#lang marv

import types/gcp/_auto/secretmanager as _auto

type _base = { 
    state(cfg) = cfg <- { original=cfg.original response=cfg.response <- { project=cfg.original.project region=cfg.original.region }}
}

secret-schema(cfg) = cfg << [replication labels topics expireTime ttl rotation versionAliases annotations]

type _secret = {
    create(cfg) = cfg <- { 
        config = cfg.config <- { parent = strf("projects/~a" cfg.config.project) }
        api=cfg.api <- { 
            request-type=secret-schema
            url="https://secretmanager.googleapis.com/v1/{+parent}/secrets?secretId={secretId}"
        }
    }
    read(cfg) = cfg <- { config = cfg.config <- { name=strf("projects/~a/secrets/~a" cfg.config.project cfg.config.secretId) }}

    state(cfg) = cfg.response <- { secretId=cfg.original.secretId }
}

type secret =  _base | _auto:secrets | _secret
export secret

type location =  _base | _auto:locations
export location

type _version = {
    create(cfg) = { parent=cfg.secret  payload={ data=base64encode(cfg.secret-data)}}
    read(cfg) = cfg <- { name=strf("~a/versions/latest" cfg.secret) }

    state(cfg) = cfg.response <- { secret=cfg.original.secret secret-data=cfg.original.secret-data }
}

type version =  _base | _version | _auto:versions
export version


#secret-parent(config) = config <- { parent = strf("projects/~a" config.project) }
#post-secret(orig new) = add-project-region(orig new) <- { secretId = orig.secretId }

# only-name(cfg) = cfg << [name]
# 
# type secret using gcp = {
#     create = create("secrets") <- { pre = secret-parent} 
#     read = read("secrets")
#     update = update("secrets")
#     delete = delete("secrets") <- { filter=only-name } << [api-id filter]
# }
# 
# create-transform(config) = {
#     parent = config.secret
#     payload = { data = base64encode(config.secret-data) }
# }
# 
# read-transform(config) = { name = strf("~a/versions/latest" config.secret) }
# 
# read-reply-transform(config) = {
#     secret-data = base64decode(config.payload.data)
# }
# 
# type secret-version using gcp = {
#     create =api("secrets" "addVersion") <- { pre=create-transform post=pass-thru }
#     read = api("secrets.versions" "access") <- { pre=read-transform post=read-reply-transform }
#     update = api("secrets" "addVersion") <- { pre = create-transform }
#     delete = api("secrets.versions" "destroy") <- { filter=only-name} << [api-id filter]
# }
# 
# 
# # this type is an expansion/extraction of the discovery document; it would be a
# # bit raw to use directly.
# 
# type secret-http using http-driver = {
# 
#     create = {
#         method = "POST"
# 
#         # assume that the 'config' will contain 'parameters' and 'body' attributes,
#         # such that the http-driver can access them separately
# 
#         # 'parameters' will be used to expand the URL:
#         url = "v1/{+parent}/secrets?secretId={secretId}"
# 
#         headers = "GCP_HEADERS"
#         response-handler = operation-handler
#     }
#     ...
# }
# 
# # this builds on the above:
# secret-transform(cfg) = { 
#     parameters = { 
#         secretId = cfg.id
#         parent = strf("projects/~a" cfg.project) 
#     }
#     # Drop id/project from config body
#     body = cfg <<- [ id project ]
# }
# type secret overlays secret-http = {
#     create = {
#         pre = create-transform
#     }
# }