#lang marv

import types/common

export secret secret-version

secret-parent(config) = config <- { parent = strf("projects/~a" config.project) }

post-secret(orig new) = add-project-region(orig new) <- { secretId = orig.secretId }

api(id op) = api-base("secretmanager.projects" id op identity post-secret)

create(id) = api(id "create")
read(id) = api(id "get")
update(id) = api(id "patch")
delete(id) = api(id "delete")

only-name(cfg) = cfg << [name]

type secret using gcp = {
    create = create("secrets") <- { pre = secret-parent} 
    read = read("secrets")
    update = update("secrets")
    delete = delete("secrets") <- { filter=only-name } << [api-id filter]
}

create-transform(config) = {
    parent = config.secret
    payload = { data = base64encode(config.secret-data) }
}

read-transform(config) = { name = strf("~a/versions/latest" config.secret) }

read-reply-transform(config) = {
    secret-data = base64decode(config.payload.data)
}

type secret-version using gcp = {
    create =api("secrets" "addVersion") <- { pre=create-transform post=pass-thru }
    read = api("secrets.versions" "access") <- { pre=read-transform post=read-reply-transform }
    update = api("secrets" "addVersion") <- { pre = create-transform }
    delete = api("secrets.versions" "destroy") <- { filter=only-name} << [api-id filter]
}


# this type is an expansion/extraction of the discovery document; it would be a
# bit raw to use directly.

type secret-http using http-driver = {

    create = {
        method = "POST"

        # assume that the 'config' will contain 'parameters' and 'body' attributes,
        # such that the http-driver can access them separately

        # 'parameters' will be used to expand the URL:
        url = "v1/{+parent}/secrets?secretId={secretId}"

        headers = "GCP_HEADERS"
        response-handler = operation-handler
    }
    ...
}

# this builds on the above:
secret-transform(cfg) = { 
    parameters = { 
        secretId = cfg.id
        parent = strf("projects/~a" cfg.project) 
    }
    # Drop id/project from config body
    body = cfg <<- [ id project ]
}
type secret overlays secret-http = {
    create = {
        pre = create-transform
    }
}