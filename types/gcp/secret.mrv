#lang marv

import types/gcp/_auto/secretmanager as _auto

type _base = { 
  # origin(cfg)= cfg <- { name=cfg.name }
  delete(cfg)=cfg <- { config={} api=cfg.api <- { url=expandvars(cfg.api.url cfg.config) } }
  state(cfg)=cfg.response <- { project=cfg.original.project }
}

type _fix_secret_api = {
    create(cfg)=cfg <- { 
        config = cfg.config <- { parent = strf("projects/~a" cfg.config.project) }
        api=cfg.api <- { 
            url="https://secretmanager.googleapis.com/v1/{+parent}/secrets?secretId={secretId}"
        }
    }
    read(cfg) = cfg <- { config=cfg.config <- { name=strf("projects/~a/secrets/~a" cfg.config.project cfg.config.secretId) }}
    state(cfg) = cfg <- { response=cfg.response <- { secretId=cfg.original.secretId }}
}

type _secret = { 
    read(cfg)=cfg <- { }
}

type secret =  _secret | _auto:secrets | _fix_secret_api | _base
export secret

type location =  _auto:locations | _base
export location

type _version = {
    create(cfg) = { parent=cfg.secret  payload={ data=base64encode(cfg.secret-data)}}
    read(cfg) = cfg <- { name=strf("~a/versions/latest" cfg.secret)  }
    update(cfg) = { parent=cfg.secret  payload={ data=base64encode(cfg.secret-data)}}
    state(cfg) = cfg <- { response=cfg.response <- { secret=cfg.original.secret secret-data=base64decode(cfg.response.payload.data) } }
}

type version =  _version | _auto:versions | _base 
export version

