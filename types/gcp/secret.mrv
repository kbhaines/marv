#lang marv

import types/gcp/_auto/secretmanager as _auto

type _base = { 
    state(cfg) = cfg <- { original=cfg.original response=cfg.response <- { project=cfg.original.project region=cfg.original.region }}
}

type _secret = {
    create(cfg) = cfg <- { 
        config = cfg.config <- { parent = strf("projects/~a" cfg.config.project) }
        api=cfg.api <- { 
            url="https://secretmanager.googleapis.com/v1/{+parent}/secrets?secretId={secretId}"
        }
    }
    read(cfg) = cfg <- { config = cfg.config <- { name=strf("projects/~a/secrets/~a" cfg.config.project cfg.config.secretId) }}
    state(cfg) = cfg.response <- { secretId=cfg.original.secretId }
}

type secret =  _base | _auto:secrets | _secret
export secret

type location =  _base | _auto:locations
export location

type _version = {
    create(cfg) = { parent=cfg.secret  payload={ data=base64encode(cfg.secret-data)}}
    read(cfg) = cfg <- { name=strf("~a/versions/latest" cfg.secret)  }
    update(cfg) = { parent=cfg.secret  payload={ data=base64encode(cfg.secret-data)}}
    state(cfg) = cfg.response <- { secret=cfg.original.secret secret-data=base64decode(cfg.response.payload.data) }
}

type version =  _base | _version | _auto:versions
export version
