#lang marv

import types/common

export secret secret-version

secret-parent(config) = config <- { parent = strf("projects/~a" config.project) }

api(id op) = api-base("secretmanager.projects" id op identity pass-thru)

create(id) = api(id "create")
read(id) = api(id "get")
update(id) = api(id "patch")
delete(id) = api(id "delete")

only-name(cfg) = cfg << [name]

type secret using gcp = {
    create = create("secrets") <- { pre = secret-parent } 
    read = read("secrets")
    update = update("secrets")
    delete = delete("secrets") <- { filter=only-name } << [api-id filter]
}

create-transform(config) = {
    parent = config.secret
    payload = { data = base64encode(config.secret-data) }
}

read-transform(config) = { name = strf("~a/versions/latest" config.secret) }

read-reply-transform(config) = {
    secret-data = base64decode(config.payload.data)
}

type secret-version using gcp = {
    create =api("secrets" "addVersion") <- { pre=create-transform }
    read = api("secrets.versions" "access") <- { pre=read-transform post=read-reply-transform }
    update = api("secrets" "addVersion") <- { pre = create-transform }
    delete = api("secrets.versions" "destroy")
}