#lang marv

import types/gcp/_auto/secretmanager as _auto
import types/gcp/_auto/secretmanager-schema

import types/marv/marshalls

type _fix_secret_api = {
    create(cfg)= { 
        config=cfg
        api={ 
            api-id="secretmanager"
            request-body=schemas.Secret(cfg)
            response-type="secretmanager.schemas.Secret"
            method="POST"
            url="https://secretmanager.googleapis.com/v1/{+parent}/secrets?secretId={secretId}"
            required=["(parent)"]
        }
    }
    * = _auto:secrets.*
}

type Msecret = {
    identity(cfg) = cfg << [ project, name, description, replication ]
    create(cfg) = cfg <- { secretId=cfg.name, parent = strf("projects/~a", cfg.project) }
    post-create(o, state) = state <- { name = o.name, project=o.project }

    read(cfg) = cfg <- { name=strf("projects/~a/secrets/~a", cfg.project, cfg.name) }
    post-read(original, state) = post-create(original, state)

    delete(state) = state <<[ name ]
}

type secret =  M1<Msecret, _fix_secret_api>
export secret

type Mversion = {
    identity(cfg) = cfg <- { project=imm: cfg.project, secretData = imm: cfg.secretData, secret = imm: cfg.secret }
    parent(cfg) = strf("projects/~a/secrets/~a", cfg.project, cfg.secret)
    create(cfg) = { parent=parent(cfg), payload={data=base64encode(cfg.secretData)}}
    post-create(original, state) = state <- { secret=original.secret, project=original.project, secretData=original.secretData }
    
    read(cfg) = { name=strf("~a/versions/latest" parent(cfg)) }
    post-read(original, state) = post-create(original, state) <- { secretData=base64decode(state.payload.data)}
    update(cfg) = { parent=parent(cfg),  payload={ data=base64encode(cfg.secretData)}}
    post-update(original, state) = post-create(original, state)
    delete(cfg) = cfg << [name]
}

type version = M1<Mversion, _auto:versions>
export version