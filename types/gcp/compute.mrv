#lang marv

# WARNING: This shim file is incomplete. You need to define an 'API' type
# relevant to the API being imported, and then remove this warning.

import types/gcp/_auto/compute as _auto

# Modify this example per API

delete-self(state, oapi) = {
  api= oapi.api <- { url=state.selfLink }
  config = {}
}

type API<T> = {
 post-create(original, state) = state <- { project=original.project, region=original.region }
 post-read(current-state, remote-state) = post-create(current-state, remote-state)
 post-update(original, cfg)=post-create(original, cfg)
 delete(state) = delete-self(state, T.delete(state))
 * = T.*
}

type regionTargetTcpProxy=API<_auto:resources_regionTargetTcpProxies>
export regionTargetTcpProxy

type globalOperation=API<_auto:resources_globalOperations>
export globalOperation

type vpnTunnel=API<_auto:resources_vpnTunnels>
export vpnTunnel

type network=API<_auto:resources_networks>
export network

type instanceTemplate=API<_auto:resources_instanceTemplates>
export instanceTemplate

type regionInstantSnapshot=API<_auto:resources_regionInstantSnapshots>
export regionInstantSnapshot

type nodeType=API<_auto:resources_nodeTypes>
export nodeType

type nodeTemplate=API<_auto:resources_nodeTemplates>
export nodeTemplate

type securityPolicy=API<_auto:resources_securityPolicies>
export securityPolicy

type regionInstance=API<_auto:resources_regionInstances>
export regionInstance

type diskType=API<_auto:resources_diskTypes>
export diskType

type instanceGroupManager=API<_auto:resources_instanceGroupManagers>
export instanceGroupManager

type instanceSetting=API<_auto:resources_instanceSettings>
export instanceSetting

type interconnect=API<_auto:resources_interconnects>
export interconnect

type machineImage=API<_auto:resources_machineImages>
export machineImage

type addresse=API<_auto:resources_addresses>
export addresse

type reservation=API<_auto:resources_reservations>
export reservation

type publicDelegatedPrefixe=API<_auto:resources_publicDelegatedPrefixes>
export publicDelegatedPrefixe

type license=API<_auto:resources_licenses>
export license

type networkAttachment=API<_auto:resources_networkAttachments>
export networkAttachment

type route=API<_auto:resources_routes>
export route

type regionBackendService=API<_auto:resources_regionBackendServices>
export regionBackendService

type targetHttpsProxy=API<_auto:resources_targetHttpsProxies>
export targetHttpsProxy

type targetPool=API<_auto:resources_targetPools>
export targetPool

type targetHttpProxy=API<_auto:resources_targetHttpProxies>
export targetHttpProxy

type project=API<_auto:resources_projects>
export project

type firewallPolicy=API<_auto:resources_firewallPolicies>
export firewallPolicy

type regionSslPolicy=API<_auto:resources_regionSslPolicies>
export regionSslPolicy

type regionInstanceGroup=API<_auto:resources_regionInstanceGroups>
export regionInstanceGroup

type regionAutoscaler=API<_auto:resources_regionAutoscalers>
export regionAutoscaler

type networkEndpointGroup=API<_auto:resources_networkEndpointGroups>
export networkEndpointGroup

type regionOperation=API<_auto:resources_regionOperations>
export regionOperation

type sslPolicy=API<_auto:resources_sslPolicies>
export sslPolicy

type targetGrpcProxy=API<_auto:resources_targetGrpcProxies>
export targetGrpcProxy

type image=API<_auto:resources_images>
export image

type instanceGroup=API<_auto:resources_instanceGroups>
export instanceGroup

type regionTargetHttpsProxy=API<_auto:resources_regionTargetHttpsProxies>
export regionTargetHttpsProxy

type httpHealthCheck=API<_auto:resources_httpHealthChecks>
export httpHealthCheck

type instance=API<_auto:resources_instances>
export instance

type autoscaler=API<_auto:resources_autoscalers>
export autoscaler

type futureReservation=API<_auto:resources_futureReservations>
export futureReservation

type sslCertificate=API<_auto:resources_sslCertificates>
export sslCertificate

type instantSnapshot=API<_auto:resources_instantSnapshots>
export instantSnapshot

type publicAdvertisedPrefixe=API<_auto:resources_publicAdvertisedPrefixes>
export publicAdvertisedPrefixe

type globalAddresse=API<_auto:resources_globalAddresses>
export globalAddresse

type regionZone=API<_auto:resources_regionZones>
export regionZone

type router=API<_auto:resources_routers>
export router

type disk=API<_auto:resources_disks>
export disk

type regionNetworkEndpointGroup=API<_auto:resources_regionNetworkEndpointGroups>
export regionNetworkEndpointGroup

type zoneOperation=API<_auto:resources_zoneOperations>
export zoneOperation

type regionTargetHttpProxy=API<_auto:resources_regionTargetHttpProxies>
export regionTargetHttpProxy

type regionNotificationEndpoint=API<_auto:resources_regionNotificationEndpoints>
export regionNotificationEndpoint

type packetMirroring=API<_auto:resources_packetMirrorings>
export packetMirroring

type regionHealthCheck=API<_auto:resources_regionHealthChecks>
export regionHealthCheck

type regionCommitment=API<_auto:resources_regionCommitments>
export regionCommitment

type nodeGroup=API<_auto:resources_nodeGroups>
export nodeGroup

type acceleratorType=API<_auto:resources_acceleratorTypes>
export acceleratorType

type globalForwardingRule=API<_auto:resources_globalForwardingRules>
export globalForwardingRule

type snapshotSetting=API<_auto:resources_snapshotSettings>
export snapshotSetting

type resourcePolicy=API<_auto:resources_resourcePolicies>
export resourcePolicy

type globalPublicDelegatedPrefixe=API<_auto:resources_globalPublicDelegatedPrefixes>
export globalPublicDelegatedPrefixe

type snapshot=API<_auto:resources_snapshots>
export snapshot

type globalOrganizationOperation=API<_auto:resources_globalOrganizationOperations>
export globalOrganizationOperation

type regionInstanceGroupManager=API<_auto:resources_regionInstanceGroupManagers>
export regionInstanceGroupManager

type httpsHealthCheck=API<_auto:resources_httpsHealthChecks>
export httpsHealthCheck

type regionSslCertificate=API<_auto:resources_regionSslCertificates>
export regionSslCertificate

type backendService=API<_auto:resources_backendServices>
export backendService

type targetVpnGateway=API<_auto:resources_targetVpnGateways>
export targetVpnGateway

type interconnectRemoteLocation=API<_auto:resources_interconnectRemoteLocations>
export interconnectRemoteLocation

type firewall=API<_auto:resources_firewalls>
export firewall

type globalNetworkEndpointGroup=API<_auto:resources_globalNetworkEndpointGroups>
export globalNetworkEndpointGroup

type regionSecurityPolicy=API<_auto:resources_regionSecurityPolicies>
export regionSecurityPolicy

type interconnectAttachment=API<_auto:resources_interconnectAttachments>
export interconnectAttachment

type region=API<_auto:resources_regions>
export region

type subnetwork=API<_auto:resources_subnetworks>
export subnetwork

type regionHealthCheckService=API<_auto:resources_regionHealthCheckServices>
export regionHealthCheckService

type zone=API<_auto:resources_zones>
export zone

type networkEdgeSecurityService=API<_auto:resources_networkEdgeSecurityServices>
export networkEdgeSecurityService

type backendBucket=API<_auto:resources_backendBuckets>
export backendBucket

type healthCheck=API<_auto:resources_healthChecks>
export healthCheck

type urlMap=API<_auto:resources_urlMaps>
export urlMap

type targetTcpProxy=API<_auto:resources_targetTcpProxies>
export targetTcpProxy

type externalVpnGateway=API<_auto:resources_externalVpnGateways>
export externalVpnGateway

type organizationSecurityPolicy=API<_auto:resources_organizationSecurityPolicies>
export organizationSecurityPolicy

type networkFirewallPolicy=API<_auto:resources_networkFirewallPolicies>
export networkFirewallPolicy

type vpnGateway=API<_auto:resources_vpnGateways>
export vpnGateway

type regionDiskType=API<_auto:resources_regionDiskTypes>
export regionDiskType

type forwardingRule=API<_auto:resources_forwardingRules>
export forwardingRule

type licenseCode=API<_auto:resources_licenseCodes>
export licenseCode

type targetSslProxy=API<_auto:resources_targetSslProxies>
export targetSslProxy

type imageFamilyView=API<_auto:resources_imageFamilyViews>
export imageFamilyView

type targetInstance=API<_auto:resources_targetInstances>
export targetInstance

type regionInstanceTemplate=API<_auto:resources_regionInstanceTemplates>
export regionInstanceTemplate

type serviceAttachment=API<_auto:resources_serviceAttachments>
export serviceAttachment

type machineType=API<_auto:resources_machineTypes>
export machineType

type regionUrlMap=API<_auto:resources_regionUrlMaps>
export regionUrlMap

type regionNetworkFirewallPolicy=API<_auto:resources_regionNetworkFirewallPolicies>
export regionNetworkFirewallPolicy

type instanceGroupManagerResizeRequest=API<_auto:resources_instanceGroupManagerResizeRequests>
export instanceGroupManagerResizeRequest

type interconnectLocation=API<_auto:resources_interconnectLocations>
export interconnectLocation

type regionDisk=API<_auto:resources_regionDisks>
export regionDisk
