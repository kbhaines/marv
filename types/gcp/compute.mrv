#lang marv

import types/gcp/_auto/compute as _auto

type _base = {
  origin(cfg)= cfg <- { name=cfg.name }
  delete(cfg)=cfg <- { config={} api=cfg.api <- { url=expandvars(cfg.api.url cfg.config) } }
  state(cfg)=cfg.response <- { region=cfg.original.region project=cfg.original.project }
}

type url-fixup = {
  read(cfg) = cfg <- { api=cfg.api <- { url="rewrite-me" }}
}

type regionTargetTcpProxy =  _auto:regionTargetTcpProxies | _base
export regionTargetTcpProxy

type globalOperation =  _auto:globalOperations | _base
export globalOperation

type vpnTunnel =  _auto:vpnTunnels | _base
export vpnTunnel

type network =  _auto:networks | _base
export network

type instanceTemplate =  _auto:instanceTemplates | _base
export instanceTemplate

type regionInstantSnapshot =  _auto:regionInstantSnapshots | _base
export regionInstantSnapshot

type nodeType =  _auto:nodeTypes | _base
export nodeType

type nodeTemplate =  _auto:nodeTemplates | _base
export nodeTemplate

type securityPolicy =  _auto:securityPolicies | _base
export securityPolicy

type regionInstance =  _auto:regionInstances | _base
export regionInstance

type diskType =  _auto:diskTypes | _base
export diskType

type instanceGroupManager =  _auto:instanceGroupManagers | _base
export instanceGroupManager

type instanceSetting =  _auto:instanceSettings | _base
export instanceSetting

type interconnect =  _auto:interconnects | _base
export interconnect

type machineImage =  _auto:machineImages | _base
export machineImage

type addresse =  _auto:addresses | _base
export addresse

type reservation =  _auto:reservations | _base
export reservation

type publicDelegatedPrefixe =  _auto:publicDelegatedPrefixes | _base
export publicDelegatedPrefixe

type license =  _auto:licenses | _base
export license

type networkAttachment =  _auto:networkAttachments | _base
export networkAttachment

type route =  _auto:routes | _base
export route

type regionBackendService =  _auto:regionBackendServices | _base
export regionBackendService

type targetHttpsProxy =  _auto:targetHttpsProxies | _base
export targetHttpsProxy

type targetPool =  _auto:targetPools | _base
export targetPool

type targetHttpProxy =  _auto:targetHttpProxies | _base
export targetHttpProxy

type project =  _auto:projects | _base
export project

type firewallPolicy =  _auto:firewallPolicies | _base
export firewallPolicy

type regionSslPolicy =  _auto:regionSslPolicies | _base
export regionSslPolicy

type regionInstanceGroup =  _auto:regionInstanceGroups | _base
export regionInstanceGroup

type regionAutoscaler =  _auto:regionAutoscalers | _base
export regionAutoscaler

type networkEndpointGroup =  _auto:networkEndpointGroups | _base
export networkEndpointGroup

type regionOperation =  _auto:regionOperations | _base
export regionOperation

type sslPolicy =  _auto:sslPolicies | _base
export sslPolicy

type targetGrpcProxy =  _auto:targetGrpcProxies | _base
export targetGrpcProxy

type image =  _auto:images | _base
export image

type instanceGroup =  _auto:instanceGroups | _base
export instanceGroup

type regionTargetHttpsProxy =  _auto:regionTargetHttpsProxies | _base
export regionTargetHttpsProxy

type httpHealthCheck =  _auto:httpHealthChecks | _base
export httpHealthCheck

type instance =  _auto:instances | _base
export instance

type autoscaler =  _auto:autoscalers | _base
export autoscaler

type futureReservation =  _auto:futureReservations | _base
export futureReservation

type sslCertificate =  _auto:sslCertificates | _base
export sslCertificate

type instantSnapshot =  _auto:instantSnapshots | _base
export instantSnapshot

type publicAdvertisedPrefixe =  _auto:publicAdvertisedPrefixes | _base
export publicAdvertisedPrefixe

type globalAddresse =  _auto:globalAddresses | _base
export globalAddresse

type regionZone =  _auto:regionZones | _base
export regionZone

type router =  _auto:routers | _base
export router

type disk =  _auto:disks | _base
export disk

type regionNetworkEndpointGroup =  _auto:regionNetworkEndpointGroups | _base
export regionNetworkEndpointGroup

type zoneOperation =  _auto:zoneOperations | _base
export zoneOperation

type regionTargetHttpProxy =  _auto:regionTargetHttpProxies | _base
export regionTargetHttpProxy

type regionNotificationEndpoint =  _auto:regionNotificationEndpoints | _base
export regionNotificationEndpoint

type packetMirroring =  _auto:packetMirrorings | _base
export packetMirroring

type regionHealthCheck =  _auto:regionHealthChecks | _base
export regionHealthCheck

type regionCommitment =  _auto:regionCommitments | _base
export regionCommitment

type nodeGroup =  _auto:nodeGroups | _base
export nodeGroup

type acceleratorType =  _auto:acceleratorTypes | _base
export acceleratorType

type globalForwardingRule =  _auto:globalForwardingRules | _base
export globalForwardingRule

type snapshotSetting =  _auto:snapshotSettings | _base
export snapshotSetting

type resourcePolicy =  _auto:resourcePolicies | _base
export resourcePolicy

type globalPublicDelegatedPrefixe =  _auto:globalPublicDelegatedPrefixes | _base
export globalPublicDelegatedPrefixe

type snapshot =  _auto:snapshots | _base
export snapshot

type globalOrganizationOperation =  _auto:globalOrganizationOperations | _base
export globalOrganizationOperation

type regionInstanceGroupManager =  _auto:regionInstanceGroupManagers | _base
export regionInstanceGroupManager

type httpsHealthCheck =  _auto:httpsHealthChecks | _base
export httpsHealthCheck

type regionSslCertificate =  _auto:regionSslCertificates | _base
export regionSslCertificate

type backendService =  _auto:backendServices | _base
export backendService

type targetVpnGateway =  _auto:targetVpnGateways | _base
export targetVpnGateway

type interconnectRemoteLocation =  _auto:interconnectRemoteLocations | _base
export interconnectRemoteLocation

type firewall =  _auto:firewalls | _base
export firewall

type globalNetworkEndpointGroup =  _auto:globalNetworkEndpointGroups | _base
export globalNetworkEndpointGroup

type regionSecurityPolicy =  _auto:regionSecurityPolicies | _base
export regionSecurityPolicy

type interconnectAttachment =  _auto:interconnectAttachments | _base
export interconnectAttachment

type region =  _auto:regions | _base
export region

type subnetwork =  _auto:subnetworks | _base
export subnetwork

type regionHealthCheckService =  _auto:regionHealthCheckServices | _base
export regionHealthCheckService

type zone =  _auto:zones | _base
export zone

type networkEdgeSecurityService =  _auto:networkEdgeSecurityServices | _base
export networkEdgeSecurityService

type backendBucket =  _auto:backendBuckets | _base
export backendBucket

type healthCheck =  _auto:healthChecks | _base
export healthCheck

type urlMap =  _auto:urlMaps | _base
export urlMap

type targetTcpProxy =  _auto:targetTcpProxies | _base
export targetTcpProxy

type externalVpnGateway =  _auto:externalVpnGateways | _base
export externalVpnGateway

type organizationSecurityPolicy =  _auto:organizationSecurityPolicies | _base
export organizationSecurityPolicy

type networkFirewallPolicy =  _auto:networkFirewallPolicies | _base
export networkFirewallPolicy

type vpnGateway =  _auto:vpnGateways | _base
export vpnGateway

type regionDiskType =  _auto:regionDiskTypes | _base
export regionDiskType

type forwardingRule =  _auto:forwardingRules | _base
export forwardingRule

type licenseCode =  _auto:licenseCodes | _base
export licenseCode

type targetSslProxy =  _auto:targetSslProxies | _base
export targetSslProxy

type imageFamilyView =  _auto:imageFamilyViews | _base
export imageFamilyView

type targetInstance =  _auto:targetInstances | _base
export targetInstance

type regionInstanceTemplate =  _auto:regionInstanceTemplates | _base
export regionInstanceTemplate

type serviceAttachment =  _auto:serviceAttachments | _base
export serviceAttachment

type machineType =  _auto:machineTypes | _base
export machineType

type regionUrlMap =  _auto:regionUrlMaps | _base
export regionUrlMap

type regionNetworkFirewallPolicy =  _auto:regionNetworkFirewallPolicies | _base
export regionNetworkFirewallPolicy

type instanceGroupManagerResizeRequest =  _auto:instanceGroupManagerResizeRequests | _base
export instanceGroupManagerResizeRequest

type interconnectLocation =  _auto:interconnectLocations | _base
export interconnectLocation

type regionDisk =  _auto:regionDisks | _base
export regionDisk

