#lang marv

import types/gcp/_auto/compute as _auto

type _base = {
  origin(cfg)= { name=cfg.name }
  state(cfg)=cfg.response <- { region=cfg.original.region project=cfg.original.project }
}

type url-fixup = {
  read(cfg) = cfg <- { api=cfg.api <- { url="rewrite-me" }}
}

type regionDisk =  _base | _auto:regionDisks | url-fixup
export regionDisk

type interconnectLocation =  _base | _auto:interconnectLocations
export interconnectLocation

type instanceGroupManagerResizeRequest =  _base | _auto:instanceGroupManagerResizeRequests
export instanceGroupManagerResizeRequest

type regionNetworkFirewallPolicy =  _base | _auto:regionNetworkFirewallPolicies
export regionNetworkFirewallPolicy

type regionUrlMap =  _base | _auto:regionUrlMaps
export regionUrlMap

type machineType =  _base | _auto:machineTypes
export machineType

type serviceAttachment =  _base | _auto:serviceAttachments
export serviceAttachment

type regionInstanceTemplate =  _base | _auto:regionInstanceTemplates
export regionInstanceTemplate

type targetInstance =  _base | _auto:targetInstances
export targetInstance

type imageFamilyView =  _base | _auto:imageFamilyViews
export imageFamilyView

type targetSslProxy =  _base | _auto:targetSslProxies
export targetSslProxy

type licenseCode =  _base | _auto:licenseCodes
export licenseCode

type forwardingRule =  _base | _auto:forwardingRules
export forwardingRule

type regionDiskType =  _base | _auto:regionDiskTypes
export regionDiskType

type vpnGateway =  _base | _auto:vpnGateways
export vpnGateway

type networkFirewallPolicy =  _base | _auto:networkFirewallPolicies
export networkFirewallPolicy

type organizationSecurityPolicy =  _base | _auto:organizationSecurityPolicies
export organizationSecurityPolicy

type externalVpnGateway =  _base | _auto:externalVpnGateways
export externalVpnGateway

type targetTcpProxy =  _base | _auto:targetTcpProxies
export targetTcpProxy

type urlMap =  _base | _auto:urlMaps
export urlMap

type healthCheck =  _base | _auto:healthChecks
export healthCheck

type backendBucket =  _base | _auto:backendBuckets
export backendBucket

type networkEdgeSecurityService =  _base | _auto:networkEdgeSecurityServices
export networkEdgeSecurityService

type zone =  _base | _auto:zones
export zone

type regionHealthCheckService =  _base | _auto:regionHealthCheckServices
export regionHealthCheckService

type subnetwork =  _base | _auto:subnetworks
export subnetwork

type region =  _base | _auto:regions
export region

type interconnectAttachment =  _base | _auto:interconnectAttachments
export interconnectAttachment

type regionSecurityPolicy =  _base | _auto:regionSecurityPolicies
export regionSecurityPolicy

type globalNetworkEndpointGroup =  _base | _auto:globalNetworkEndpointGroups
export globalNetworkEndpointGroup

type firewall =  _base | _auto:firewalls
export firewall

type interconnectRemoteLocation =  _base | _auto:interconnectRemoteLocations
export interconnectRemoteLocation

type targetVpnGateway =  _base | _auto:targetVpnGateways
export targetVpnGateway

type backendService =  _base | _auto:backendServices
export backendService

type regionSslCertificate =  _base | _auto:regionSslCertificates
export regionSslCertificate

type httpsHealthCheck =  _base | _auto:httpsHealthChecks
export httpsHealthCheck

type regionInstanceGroupManager =  _base | _auto:regionInstanceGroupManagers
export regionInstanceGroupManager

type globalOrganizationOperation =  _base | _auto:globalOrganizationOperations
export globalOrganizationOperation

type snapshot =  _base | _auto:snapshots
export snapshot

type globalPublicDelegatedPrefixe =  _base | _auto:globalPublicDelegatedPrefixes
export globalPublicDelegatedPrefixe

type resourcePolicy =  _base | _auto:resourcePolicies
export resourcePolicy

type snapshotSetting =  _base | _auto:snapshotSettings
export snapshotSetting

type globalForwardingRule =  _base | _auto:globalForwardingRules
export globalForwardingRule

type acceleratorType =  _base | _auto:acceleratorTypes
export acceleratorType

type nodeGroup =  _base | _auto:nodeGroups
export nodeGroup

type regionCommitment =  _base | _auto:regionCommitments
export regionCommitment

type regionHealthCheck =  _base | _auto:regionHealthChecks
export regionHealthCheck

type packetMirroring =  _base | _auto:packetMirrorings
export packetMirroring

type regionNotificationEndpoint =  _base | _auto:regionNotificationEndpoints
export regionNotificationEndpoint

type regionTargetHttpProxy =  _base | _auto:regionTargetHttpProxies
export regionTargetHttpProxy

type zoneOperation =  _base | _auto:zoneOperations
export zoneOperation

type regionNetworkEndpointGroup =  _base | _auto:regionNetworkEndpointGroups
export regionNetworkEndpointGroup

type disk =  _base | _auto:disks
export disk

type router =  _base | _auto:routers
export router

type regionZone =  _base | _auto:regionZones
export regionZone

type globalAddresse =  _base | _auto:globalAddresses
export globalAddresse

type publicAdvertisedPrefixe =  _base | _auto:publicAdvertisedPrefixes
export publicAdvertisedPrefixe

type instantSnapshot =  _base | _auto:instantSnapshots
export instantSnapshot

type sslCertificate =  _base | _auto:sslCertificates
export sslCertificate

type futureReservation =  _base | _auto:futureReservations
export futureReservation

type autoscaler =  _base | _auto:autoscalers
export autoscaler

type instance =  _base | _auto:instances
export instance

type httpHealthCheck =  _base | _auto:httpHealthChecks
export httpHealthCheck

type regionTargetHttpsProxy =  _base | _auto:regionTargetHttpsProxies
export regionTargetHttpsProxy

type instanceGroup =  _base | _auto:instanceGroups
export instanceGroup

type image =  _base | _auto:images
export image

type targetGrpcProxy =  _base | _auto:targetGrpcProxies
export targetGrpcProxy

type sslPolicy =  _base | _auto:sslPolicies
export sslPolicy

type regionOperation =  _base | _auto:regionOperations
export regionOperation

type networkEndpointGroup =  _base | _auto:networkEndpointGroups
export networkEndpointGroup

type regionAutoscaler =  _base | _auto:regionAutoscalers
export regionAutoscaler

type regionInstanceGroup =  _base | _auto:regionInstanceGroups
export regionInstanceGroup

type regionSslPolicy =  _base | _auto:regionSslPolicies
export regionSslPolicy

type firewallPolicy =  _base | _auto:firewallPolicies
export firewallPolicy

type project =  _base | _auto:projects
export project

type targetHttpProxy =  _base | _auto:targetHttpProxies
export targetHttpProxy

type targetPool =  _base | _auto:targetPools
export targetPool

type targetHttpsProxy =  _base | _auto:targetHttpsProxies
export targetHttpsProxy

type regionBackendService =  _base | _auto:regionBackendServices
export regionBackendService

type route =  _base | _auto:routes
export route

type networkAttachment =  _base | _auto:networkAttachments
export networkAttachment

type license =  _base | _auto:licenses
export license

type publicDelegatedPrefixe =  _base | _auto:publicDelegatedPrefixes
export publicDelegatedPrefixe

type reservation =  _base | _auto:reservations
export reservation

type addresse =  _base | _auto:addresses
export addresse

type machineImage =  _base | _auto:machineImages
export machineImage

type interconnect =  _base | _auto:interconnects
export interconnect

type instanceSetting =  _base | _auto:instanceSettings
export instanceSetting

type instanceGroupManager =  _base | _auto:instanceGroupManagers
export instanceGroupManager

type diskType =  _base | _auto:diskTypes
export diskType

type regionInstance =  _base | _auto:regionInstances
export regionInstance

type securityPolicy =  _base | _auto:securityPolicies
export securityPolicy

type nodeTemplate =  _base | _auto:nodeTemplates
export nodeTemplate

type nodeType =  _base | _auto:nodeTypes
export nodeType

type regionInstantSnapshot =  _base | _auto:regionInstantSnapshots
export regionInstantSnapshot

type instanceTemplate =  _base | _auto:instanceTemplates
export instanceTemplate

type network =  _base | _auto:networks
export network

type vpnTunnel =  _base | _auto:vpnTunnels
export vpnTunnel

type globalOperation =  _base | _auto:globalOperations
export globalOperation

type regionTargetTcpProxy =  _base | _auto:regionTargetTcpProxies
export regionTargetTcpProxy
