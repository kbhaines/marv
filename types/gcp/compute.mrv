#lang marv

# WARNING: This shim file is incomplete. You need to define an 'API' type
# relevant to the API being imported, and then remove this warning.

import types/gcp/_auto/compute as _auto

# Modify this example per API

delete-self(state, oapi) = {
  api= oapi.api <- { url=state.selfLink },
  config = {}
}

type API<T> = {
 post-create(original, state) = state <- { project=original.project, region=original.region }

 # Override the READ method to use the selfLink given in cfg (which is state)
 read(cfg) = T.read(cfg) <- { api = T.read(cfg).api <- { url = cfg.selfLink }}
 
 post-read(current-state, remote-state) = post-create(current-state, remote-state)
 post-update(original, cfg)=post-create(original, cfg)
 delete(state) = delete-self(state, T.delete(state))
 * = T.*
}

type regionTargetTcpProxy=API<_auto:regionTargetTcpProxies>
export regionTargetTcpProxy

type globalOperation=API<_auto:globalOperations>
export globalOperation

type vpnTunnel=API<_auto:vpnTunnels>
export vpnTunnel

type network=API<_auto:networks>
export network

type instanceTemplate=API<_auto:instanceTemplates>
export instanceTemplate

type regionInstantSnapshot=API<_auto:regionInstantSnapshots>
export regionInstantSnapshot

type nodeType=API<_auto:nodeTypes>
export nodeType

type nodeTemplate=API<_auto:nodeTemplates>
export nodeTemplate

type securityPolicy=API<_auto:securityPolicies>
export securityPolicy

type regionInstance=API<_auto:regionInstances>
export regionInstance

type diskType=API<_auto:diskTypes>
export diskType

type instanceGroupManager=API<_auto:instanceGroupManagers>
export instanceGroupManager

type instanceSetting=API<_auto:instanceSettings>
export instanceSetting

type interconnect=API<_auto:interconnects>
export interconnect

type machineImage=API<_auto:machineImages>
export machineImage

type addresse=API<_auto:addresses>
export addresse

type reservation=API<_auto:reservations>
export reservation

type publicDelegatedPrefixe=API<_auto:publicDelegatedPrefixes>
export publicDelegatedPrefixe

type license=API<_auto:licenses>
export license

type networkAttachment=API<_auto:networkAttachments>
export networkAttachment

type route=API<_auto:routes>
export route

type regionBackendService=API<_auto:regionBackendServices>
export regionBackendService

type targetHttpsProxy=API<_auto:targetHttpsProxies>
export targetHttpsProxy

type targetPool=API<_auto:targetPools>
export targetPool

type targetHttpProxy=API<_auto:targetHttpProxies>
export targetHttpProxy

type project=API<_auto:projects>
export project

type firewallPolicy=API<_auto:firewallPolicies>
export firewallPolicy

type regionSslPolicy=API<_auto:regionSslPolicies>
export regionSslPolicy

type regionInstanceGroup=API<_auto:regionInstanceGroups>
export regionInstanceGroup

type regionAutoscaler=API<_auto:regionAutoscalers>
export regionAutoscaler

type networkEndpointGroup=API<_auto:networkEndpointGroups>
export networkEndpointGroup

type regionOperation=API<_auto:regionOperations>
export regionOperation

type sslPolicy=API<_auto:sslPolicies>
export sslPolicy

type targetGrpcProxy=API<_auto:targetGrpcProxies>
export targetGrpcProxy

type image=API<_auto:images>
export image

type instanceGroup=API<_auto:instanceGroups>
export instanceGroup

type regionTargetHttpsProxy=API<_auto:regionTargetHttpsProxies>
export regionTargetHttpsProxy

type httpHealthCheck=API<_auto:httpHealthChecks>
export httpHealthCheck

type instance=API<_auto:instances>
export instance

type autoscaler=API<_auto:autoscalers>
export autoscaler

type futureReservation=API<_auto:futureReservations>
export futureReservation

type sslCertificate=API<_auto:sslCertificates>
export sslCertificate

type instantSnapshot=API<_auto:instantSnapshots>
export instantSnapshot

type publicAdvertisedPrefixe=API<_auto:publicAdvertisedPrefixes>
export publicAdvertisedPrefixe

type globalAddresse=API<_auto:globalAddresses>
export globalAddresse

type regionZone=API<_auto:regionZones>
export regionZone

type router=API<_auto:routers>
export router

type disk=API<_auto:disks>
export disk

type regionNetworkEndpointGroup=API<_auto:regionNetworkEndpointGroups>
export regionNetworkEndpointGroup

type zoneOperation=API<_auto:zoneOperations>
export zoneOperation

type regionTargetHttpProxy=API<_auto:regionTargetHttpProxies>
export regionTargetHttpProxy

type regionNotificationEndpoint=API<_auto:regionNotificationEndpoints>
export regionNotificationEndpoint

type packetMirroring=API<_auto:packetMirrorings>
export packetMirroring

type regionHealthCheck=API<_auto:regionHealthChecks>
export regionHealthCheck

type regionCommitment=API<_auto:regionCommitments>
export regionCommitment

type nodeGroup=API<_auto:nodeGroups>
export nodeGroup

type acceleratorType=API<_auto:acceleratorTypes>
export acceleratorType

type globalForwardingRule=API<_auto:globalForwardingRules>
export globalForwardingRule

type snapshotSetting=API<_auto:snapshotSettings>
export snapshotSetting

type resourcePolicy=API<_auto:resourcePolicies>
export resourcePolicy

type globalPublicDelegatedPrefixe=API<_auto:globalPublicDelegatedPrefixes>
export globalPublicDelegatedPrefixe

type snapshot=API<_auto:snapshots>
export snapshot

type globalOrganizationOperation=API<_auto:globalOrganizationOperations>
export globalOrganizationOperation

type regionInstanceGroupManager=API<_auto:regionInstanceGroupManagers>
export regionInstanceGroupManager

type httpsHealthCheck=API<_auto:httpsHealthChecks>
export httpsHealthCheck

type regionSslCertificate=API<_auto:regionSslCertificates>
export regionSslCertificate

type backendService=API<_auto:backendServices>
export backendService

type targetVpnGateway=API<_auto:targetVpnGateways>
export targetVpnGateway

type interconnectRemoteLocation=API<_auto:interconnectRemoteLocations>
export interconnectRemoteLocation

type firewall=API<_auto:firewalls>
export firewall

type globalNetworkEndpointGroup=API<_auto:globalNetworkEndpointGroups>
export globalNetworkEndpointGroup

type regionSecurityPolicy=API<_auto:regionSecurityPolicies>
export regionSecurityPolicy

type interconnectAttachment=API<_auto:interconnectAttachments>
export interconnectAttachment

type region=API<_auto:regions>
export region

type subnetwork=API<_auto:subnetworks>
export subnetwork

type regionHealthCheckService=API<_auto:regionHealthCheckServices>
export regionHealthCheckService

type zone=API<_auto:zones>
export zone

type networkEdgeSecurityService=API<_auto:networkEdgeSecurityServices>
export networkEdgeSecurityService

type backendBucket=API<_auto:backendBuckets>
export backendBucket

type healthCheck=API<_auto:healthChecks>
export healthCheck

type urlMap=API<_auto:urlMaps>
export urlMap

type targetTcpProxy=API<_auto:targetTcpProxies>
export targetTcpProxy

type externalVpnGateway=API<_auto:externalVpnGateways>
export externalVpnGateway

type organizationSecurityPolicy=API<_auto:organizationSecurityPolicies>
export organizationSecurityPolicy

type networkFirewallPolicy=API<_auto:networkFirewallPolicies>
export networkFirewallPolicy

type vpnGateway=API<_auto:vpnGateways>
export vpnGateway

type regionDiskType=API<_auto:regionDiskTypes>
export regionDiskType

type forwardingRule=API<_auto:forwardingRules>
export forwardingRule

type licenseCode=API<_auto:licenseCodes>
export licenseCode

type targetSslProxy=API<_auto:targetSslProxies>
export targetSslProxy

type imageFamilyView=API<_auto:imageFamilyViews>
export imageFamilyView

type targetInstance=API<_auto:targetInstances>
export targetInstance

type regionInstanceTemplate=API<_auto:regionInstanceTemplates>
export regionInstanceTemplate

type serviceAttachment=API<_auto:serviceAttachments>
export serviceAttachment

type machineType=API<_auto:machineTypes>
export machineType

type regionUrlMap=API<_auto:regionUrlMaps>
export regionUrlMap

type regionNetworkFirewallPolicy=API<_auto:regionNetworkFirewallPolicies>
export regionNetworkFirewallPolicy

type instanceGroupManagerResizeRequest=API<_auto:instanceGroupManagerResizeRequests>
export instanceGroupManagerResizeRequest

type interconnectLocation=API<_auto:interconnectLocations>
export interconnectLocation

type regionDisk=API<_auto:regionDisks>
export regionDisk
