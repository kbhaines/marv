#lang marv
## AUTO-GENERATED FILE - DO NOT EDIT!

import types/gcp/_auto/storage-schema
API-ID="storage"
# /resources/notifications
type resources_notifications = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/notifications"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Notification(cfg)
   response-type="storage.schemas.Notification"
   method="POST"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/notificationConfigs"
   required=["(bucket)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.Notification"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/notificationConfigs/{name}"
   required=["(notification bucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/notificationConfigs/{name}"
   required=["(notification bucket)"]
  }
 }
}
export resources_notifications

# /resources/objectAccessControls
type resources_objectAccessControls = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/objectAccessControls"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ObjectAccessControl(cfg)
   response-type="storage.schemas.ObjectAccessControl"
   method="POST"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{object}/acl"
   required=["(object bucket)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.ObjectAccessControl"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{object}/acl/{name}"
   required=["(entity object bucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ObjectAccessControl(cfg)
   response-type="storage.schemas.ObjectAccessControl"
   method="PATCH"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{object}/acl/{name}"
   required=["(entity object bucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{object}/acl/{name}"
   required=["(entity object bucket)"]
  }
 }
}
export resources_objectAccessControls

# /resources/bucketAccessControls
type resources_bucketAccessControls = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/bucketAccessControls"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BucketAccessControl(cfg)
   response-type="storage.schemas.BucketAccessControl"
   method="POST"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/acl"
   required=["(bucket)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.BucketAccessControl"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/acl/{name}"
   required=["(entity bucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BucketAccessControl(cfg)
   response-type="storage.schemas.BucketAccessControl"
   method="PATCH"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/acl/{name}"
   required=["(entity bucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/acl/{name}"
   required=["(entity bucket)"]
  }
 }
}
export resources_bucketAccessControls

# /resources/buckets
type resources_buckets = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/buckets"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Bucket(cfg)
   response-type="storage.schemas.Bucket"
   method="POST"
   url="https://storage.googleapis.com/storage/v1/b?project={project}"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.Bucket"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/b/{name}"
   required=["(bucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Bucket(cfg)
   response-type="storage.schemas.Bucket"
   method="PATCH"
   url="https://storage.googleapis.com/storage/v1/b/{name}"
   required=["(bucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/b/{name}"
   required=["(bucket)"]
  }
 }
}
export resources_buckets

# /resources/channels
type resources_channels = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/channels"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_channels

# /resources/defaultObjectAccessControls
type resources_defaultObjectAccessControls = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/defaultObjectAccessControls"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ObjectAccessControl(cfg)
   response-type="storage.schemas.ObjectAccessControl"
   method="POST"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/defaultObjectAcl"
   required=["(bucket)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.ObjectAccessControl"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/defaultObjectAcl/{name}"
   required=["(entity bucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ObjectAccessControl(cfg)
   response-type="storage.schemas.ObjectAccessControl"
   method="PATCH"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/defaultObjectAcl/{name}"
   required=["(entity bucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/defaultObjectAcl/{name}"
   required=["(entity bucket)"]
  }
 }
}
export resources_defaultObjectAccessControls

# /resources/objects
type resources_objects = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/objects"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Object(cfg)
   response-type="storage.schemas.Object"
   method="POST"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o"
   required=["(bucket)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.Object"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{name}"
   required=["(object bucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Object(cfg)
   response-type="storage.schemas.Object"
   method="PATCH"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{name}"
   required=["(object bucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/b/{bucket}/o/{name}"
   required=["(object bucket)"]
  }
 }
}
export resources_objects

# /resources/projects/resources/serviceAccount
type resources_projects_resources_serviceAccount = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/projects/resources/serviceAccount"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.ServiceAccount"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/projects/{projectId}/serviceAccount"
   required=["(projectId)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_projects_resources_serviceAccount

# /resources/projects/resources/hmacKeys
type resources_projects_resources_hmacKeys = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:storage:/resources/projects/resources/hmacKeys"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.HmacKeyMetadata"
   method="GET"
   url="https://storage.googleapis.com/storage/v1/projects/{projectId}/hmacKeys/{name}"
   required=["(accessId projectId)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="storage.schemas.#f"
   method="DELETE"
   url="https://storage.googleapis.com/storage/v1/projects/{projectId}/hmacKeys/{name}"
   required=["(accessId projectId)"]
  }
 }
}
export resources_projects_resources_hmacKeys

