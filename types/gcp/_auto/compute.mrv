#lang marv
## AUTO-GENERATED FILE - DO NOT EDIT!

import types/gcp/_auto/compute-schema
API-ID="compute"
# /resources/regionTargetTcpProxies
type regionTargetTcpProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetTcpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetTcpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{name}"
   required=["(targetTcpProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{name}"
   required=["(targetTcpProxy region project)"]
  }
 }
}
export regionTargetTcpProxies

# /resources/globalOperations
type globalOperations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/operations/{name}"
   required=["(project operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/operations/{name}"
   required=["(project operation)"]
  }
 }
}
export globalOperations

# /resources/vpnTunnels
type vpnTunnels = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.VpnTunnel(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.VpnTunnel"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{name}"
   required=["(vpnTunnel region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{name}"
   required=["(vpnTunnel region project)"]
  }
 }
}
export vpnTunnels

# /resources/networks
type networks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Network(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Network"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{name}"
   required=["(project network)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Network(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{name}"
   required=["(project network)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{name}"
   required=["(project network)"]
  }
 }
}
export networks

# /resources/instanceTemplates
type instanceTemplates = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceTemplate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates/{name}"
   required=["(project instanceTemplate)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates/{name}"
   required=["(project instanceTemplate)"]
  }
 }
}
export instanceTemplates

# /resources/regionInstantSnapshots
type regionInstantSnapshots = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstantSnapshot(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstantSnapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{name}"
   required=["(region instantSnapshot project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{name}"
   required=["(region instantSnapshot project)"]
  }
 }
}
export regionInstantSnapshots

# /resources/nodeTypes
type nodeTypes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NodeType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{name}"
   required=["(nodeType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export nodeTypes

# /resources/nodeTemplates
type nodeTemplates = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NodeTemplate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NodeTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{name}"
   required=["(nodeTemplate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{name}"
   required=["(nodeTemplate region project)"]
  }
 }
}
export nodeTemplates

# /resources/securityPolicies
type securityPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{name}"
   required=["(project securityPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{name}"
   required=["(project securityPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{name}"
   required=["(project securityPolicy)"]
  }
 }
}
export securityPolicies

# /resources/regionInstances
type regionInstances = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionInstances

# /resources/diskTypes
type diskTypes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.DiskType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/diskTypes/{name}"
   required=["(diskType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export diskTypes

# /resources/instanceGroupManagers
type instanceGroupManagers = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroupManager"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager zone project)"]
  }
 }
}
export instanceGroupManagers

# /resources/instanceSettings
type instanceSettings = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceSettings"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceSettings"
   required=["(zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceSettings(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceSettings"
   required=["(zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export instanceSettings

# /resources/interconnects
type interconnects = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Interconnect(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Interconnect"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{name}"
   required=["(project interconnect)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Interconnect(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{name}"
   required=["(project interconnect)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{name}"
   required=["(project interconnect)"]
  }
 }
}
export interconnects

# /resources/machineImages
type machineImages = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.MachineImage(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.MachineImage"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages/{name}"
   required=["(project machineImage)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages/{name}"
   required=["(project machineImage)"]
  }
 }
}
export machineImages

# /resources/addresses
type addresses = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Address(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Address"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses/{name}"
   required=["(address region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses/{name}"
   required=["(address region project)"]
  }
 }
}
export addresses

# /resources/reservations
type reservations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Reservation(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Reservation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations/{name}"
   required=["(zone reservation project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations/{name}"
   required=["(zone reservation project)"]
  }
 }
}
export reservations

# /resources/publicDelegatedPrefixes
type publicDelegatedPrefixes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PublicDelegatedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{name}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{name}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{name}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
}
export publicDelegatedPrefixes

# /resources/licenses
type licenses = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.License(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.License"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses/{name}"
   required=["(license project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses/{name}"
   required=["(license project)"]
  }
 }
}
export licenses

# /resources/networkAttachments
type networkAttachments = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{name}"
   required=["(networkAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{name}"
   required=["(networkAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{name}"
   required=["(networkAttachment region project)"]
  }
 }
}
export networkAttachments

# /resources/routes
type routes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Route(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Route"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes/{name}"
   required=["(project route)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes/{name}"
   required=["(project route)"]
  }
 }
}
export routes

# /resources/regionBackendServices
type regionBackendServices = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.BackendService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{name}"
   required=["(backendService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{name}"
   required=["(backendService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{name}"
   required=["(backendService region project)"]
  }
 }
}
export regionBackendServices

# /resources/targetHttpsProxies
type targetHttpsProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpsProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{name}"
   required=["(project targetHttpsProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{name}"
   required=["(project targetHttpsProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{name}"
   required=["(project targetHttpsProxy)"]
  }
 }
}
export targetHttpsProxies

# /resources/targetPools
type targetPools = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetPool(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetPool"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools/{name}"
   required=["(targetPool region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools/{name}"
   required=["(targetPool region project)"]
  }
 }
}
export targetPools

# /resources/targetHttpProxies
type targetHttpProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{name}"
   required=["(project targetHttpProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{name}"
   required=["(project targetHttpProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{name}"
   required=["(project targetHttpProxy)"]
  }
 }
}
export targetHttpProxies

# /resources/projects
type projects = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Project"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{name}"
   required=["(project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export projects

# /resources/firewallPolicies
type firewallPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies"
   required=["()"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{name}"
   required=["(firewallPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{name}"
   required=["(firewallPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{name}"
   required=["(firewallPolicy)"]
  }
 }
}
export firewallPolicies

# /resources/regionSslPolicies
type regionSslPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{name}"
   required=["(sslPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{name}"
   required=["(sslPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{name}"
   required=["(sslPolicy region project)"]
  }
 }
}
export regionSslPolicies

# /resources/regionInstanceGroups
type regionInstanceGroups = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroups/{name}"
   required=["(instanceGroup region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionInstanceGroups

# /resources/regionAutoscalers
type regionAutoscalers = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Autoscaler"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers/{name}"
   required=["(autoscaler region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers/{name}"
   required=["(autoscaler region project)"]
  }
 }
}
export regionAutoscalers

# /resources/networkEndpointGroups
type networkEndpointGroups = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEndpointGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup zone project)"]
  }
 }
}
export networkEndpointGroups

# /resources/regionOperations
type regionOperations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/operations/{name}"
   required=["(operation region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/operations/{name}"
   required=["(operation region project)"]
  }
 }
}
export regionOperations

# /resources/sslPolicies
type sslPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{name}"
   required=["(project sslPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{name}"
   required=["(project sslPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{name}"
   required=["(project sslPolicy)"]
  }
 }
}
export sslPolicies

# /resources/targetGrpcProxies
type targetGrpcProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetGrpcProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetGrpcProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{name}"
   required=["(project targetGrpcProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetGrpcProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{name}"
   required=["(project targetGrpcProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{name}"
   required=["(project targetGrpcProxy)"]
  }
 }
}
export targetGrpcProxies

# /resources/images
type images = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Image(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Image"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{name}"
   required=["(project image)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Image(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{name}"
   required=["(project image)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{name}"
   required=["(project image)"]
  }
 }
}
export images

# /resources/instanceGroups
type instanceGroups = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{name}"
   required=["(instanceGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{name}"
   required=["(instanceGroup zone project)"]
  }
 }
}
export instanceGroups

# /resources/regionTargetHttpsProxies
type regionTargetHttpsProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpsProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{name}"
   required=["(targetHttpsProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{name}"
   required=["(targetHttpsProxy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{name}"
   required=["(targetHttpsProxy region project)"]
  }
 }
}
export regionTargetHttpsProxies

# /resources/httpHealthChecks
type httpHealthChecks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HttpHealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{name}"
   required=["(project httpHealthCheck)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{name}"
   required=["(project httpHealthCheck)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{name}"
   required=["(project httpHealthCheck)"]
  }
 }
}
export httpHealthChecks

# /resources/instances
type instances = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Instance(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Instance"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances/{name}"
   required=["(instance zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances/{name}"
   required=["(instance zone project)"]
  }
 }
}
export instances

# /resources/autoscalers
type autoscalers = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Autoscaler"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers/{name}"
   required=["(autoscaler zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers/{name}"
   required=["(autoscaler zone project)"]
  }
 }
}
export autoscalers

# /resources/futureReservations
type futureReservations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FutureReservation(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FutureReservation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations/{name}"
   required=["(futureReservation zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations/{name}"
   required=["(futureReservation zone project)"]
  }
 }
}
export futureReservations

# /resources/sslCertificates
type sslCertificates = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslCertificate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslCertificate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates/{name}"
   required=["(project sslCertificate)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates/{name}"
   required=["(project sslCertificate)"]
  }
 }
}
export sslCertificates

# /resources/instantSnapshots
type instantSnapshots = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstantSnapshot(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstantSnapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{name}"
   required=["(zone instantSnapshot project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{name}"
   required=["(zone instantSnapshot project)"]
  }
 }
}
export instantSnapshots

# /resources/publicAdvertisedPrefixes
type publicAdvertisedPrefixes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicAdvertisedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PublicAdvertisedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{name}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicAdvertisedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{name}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{name}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
}
export publicAdvertisedPrefixes

# /resources/globalAddresses
type globalAddresses = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Address(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Address"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses/{name}"
   required=["(project address)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses/{name}"
   required=["(project address)"]
  }
 }
}
export globalAddresses

# /resources/regionZones
type regionZones = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionZones

# /resources/routers
type routers = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Router(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Router"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{name}"
   required=["(router region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Router(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{name}"
   required=["(router region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{name}"
   required=["(router region project)"]
  }
 }
}
export routers

# /resources/disks
type disks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Disk(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Disk"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks/{name}"
   required=["(disk zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks/{name}"
   required=["(disk zone project)"]
  }
 }
}
export disks

# /resources/regionNetworkEndpointGroups
type regionNetworkEndpointGroups = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEndpointGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup region project)"]
  }
 }
}
export regionNetworkEndpointGroups

# /resources/zoneOperations
type zoneOperations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/operations/{name}"
   required=["(operation zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/operations/{name}"
   required=["(operation zone project)"]
  }
 }
}
export zoneOperations

# /resources/regionTargetHttpProxies
type regionTargetHttpProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{name}"
   required=["(targetHttpProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{name}"
   required=["(targetHttpProxy region project)"]
  }
 }
}
export regionTargetHttpProxies

# /resources/regionNotificationEndpoints
type regionNotificationEndpoints = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NotificationEndpoint(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NotificationEndpoint"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{name}"
   required=["(notificationEndpoint region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{name}"
   required=["(notificationEndpoint region project)"]
  }
 }
}
export regionNotificationEndpoints

# /resources/packetMirrorings
type packetMirrorings = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PacketMirroring(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PacketMirroring"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{name}"
   required=["(packetMirroring region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PacketMirroring(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{name}"
   required=["(packetMirroring region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{name}"
   required=["(packetMirroring region project)"]
  }
 }
}
export packetMirrorings

# /resources/regionHealthChecks
type regionHealthChecks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{name}"
   required=["(healthCheck region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{name}"
   required=["(healthCheck region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{name}"
   required=["(healthCheck region project)"]
  }
 }
}
export regionHealthChecks

# /resources/regionCommitments
type regionCommitments = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Commitment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Commitment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments/{name}"
   required=["(commitment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionCommitments

# /resources/nodeGroups
type nodeGroups = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NodeGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups?initialNodeCount={initialNodeCount}"
   required=["(initialNodeCount zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NodeGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{name}"
   required=["(nodeGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NodeGroup(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{name}"
   required=["(nodeGroup zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{name}"
   required=["(nodeGroup zone project)"]
  }
 }
}
export nodeGroups

# /resources/acceleratorTypes
type acceleratorTypes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.AcceleratorType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{name}"
   required=["(acceleratorType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export acceleratorTypes

# /resources/globalForwardingRules
type globalForwardingRules = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ForwardingRule"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{name}"
   required=["(project forwardingRule)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{name}"
   required=["(project forwardingRule)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{name}"
   required=["(project forwardingRule)"]
  }
 }
}
export globalForwardingRules

# /resources/snapshotSettings
type snapshotSettings = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SnapshotSettings"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshotSettings"
   required=["(project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SnapshotSettings(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshotSettings"
   required=["(project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export snapshotSettings

# /resources/resourcePolicies
type resourcePolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ResourcePolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ResourcePolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{name}"
   required=["(resourcePolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ResourcePolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{name}"
   required=["(resourcePolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{name}"
   required=["(resourcePolicy region project)"]
  }
 }
}
export resourcePolicies

# /resources/globalPublicDelegatedPrefixes
type globalPublicDelegatedPrefixes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PublicDelegatedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{name}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{name}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{name}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
}
export globalPublicDelegatedPrefixes

# /resources/snapshots
type snapshots = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Snapshot(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Snapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots/{name}"
   required=["(project snapshot)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots/{name}"
   required=["(project snapshot)"]
  }
 }
}
export snapshots

# /resources/globalOrganizationOperations
type globalOrganizationOperations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/operations/{name}"
   required=["(operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/operations/{name}"
   required=["(operation)"]
  }
 }
}
export globalOrganizationOperations

# /resources/regionInstanceGroupManagers
type regionInstanceGroupManagers = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroupManager"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager region project)"]
  }
 }
}
export regionInstanceGroupManagers

# /resources/httpsHealthChecks
type httpsHealthChecks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpsHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HttpsHealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{name}"
   required=["(httpsHealthCheck project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpsHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{name}"
   required=["(httpsHealthCheck project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{name}"
   required=["(httpsHealthCheck project)"]
  }
 }
}
export httpsHealthChecks

# /resources/regionSslCertificates
type regionSslCertificates = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslCertificate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslCertificate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates/{name}"
   required=["(sslCertificate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates/{name}"
   required=["(sslCertificate region project)"]
  }
 }
}
export regionSslCertificates

# /resources/backendServices
type backendServices = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.BackendService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{name}"
   required=["(project backendService)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{name}"
   required=["(project backendService)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{name}"
   required=["(project backendService)"]
  }
 }
}
export backendServices

# /resources/targetVpnGateways
type targetVpnGateways = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetVpnGateway(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetVpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{name}"
   required=["(targetVpnGateway region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{name}"
   required=["(targetVpnGateway region project)"]
  }
 }
}
export targetVpnGateways

# /resources/interconnectRemoteLocations
type interconnectRemoteLocations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InterconnectRemoteLocation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnectRemoteLocations/{name}"
   required=["(project interconnectRemoteLocation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export interconnectRemoteLocations

# /resources/firewalls
type firewalls = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Firewall(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Firewall"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{name}"
   required=["(firewall project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Firewall(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{name}"
   required=["(firewall project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{name}"
   required=["(firewall project)"]
  }
 }
}
export firewalls

# /resources/globalNetworkEndpointGroups
type globalNetworkEndpointGroups = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEndpointGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups/{name}"
   required=["(project networkEndpointGroup)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups/{name}"
   required=["(project networkEndpointGroup)"]
  }
 }
}
export globalNetworkEndpointGroups

# /resources/regionSecurityPolicies
type regionSecurityPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{name}"
   required=["(securityPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{name}"
   required=["(securityPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{name}"
   required=["(securityPolicy region project)"]
  }
 }
}
export regionSecurityPolicies

# /resources/interconnectAttachments
type interconnectAttachments = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InterconnectAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InterconnectAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{name}"
   required=["(interconnectAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InterconnectAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{name}"
   required=["(interconnectAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{name}"
   required=["(interconnectAttachment region project)"]
  }
 }
}
export interconnectAttachments

# /resources/regions
type regions = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Region"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{name}"
   required=["(region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regions

# /resources/subnetworks
type subnetworks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Subnetwork(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Subnetwork"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{name}"
   required=["(subnetwork region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Subnetwork(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{name}"
   required=["(subnetwork region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{name}"
   required=["(subnetwork region project)"]
  }
 }
}
export subnetworks

# /resources/regionHealthCheckServices
type regionHealthCheckServices = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheckService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HealthCheckService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{name}"
   required=["(healthCheckService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheckService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{name}"
   required=["(healthCheckService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{name}"
   required=["(healthCheckService region project)"]
  }
 }
}
export regionHealthCheckServices

# /resources/zones
type zones = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Zone"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{name}"
   required=["(zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export zones

# /resources/networkEdgeSecurityServices
type networkEdgeSecurityServices = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEdgeSecurityService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEdgeSecurityService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{name}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEdgeSecurityService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{name}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{name}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
}
export networkEdgeSecurityServices

# /resources/backendBuckets
type backendBuckets = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendBucket(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.BackendBucket"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{name}"
   required=["(project backendBucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendBucket(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{name}"
   required=["(project backendBucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{name}"
   required=["(project backendBucket)"]
  }
 }
}
export backendBuckets

# /resources/healthChecks
type healthChecks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{name}"
   required=["(project healthCheck)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{name}"
   required=["(project healthCheck)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{name}"
   required=["(project healthCheck)"]
  }
 }
}
export healthChecks

# /resources/urlMaps
type urlMaps = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.UrlMap"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{name}"
   required=["(project urlMap)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{name}"
   required=["(project urlMap)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{name}"
   required=["(project urlMap)"]
  }
 }
}
export urlMaps

# /resources/targetTcpProxies
type targetTcpProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetTcpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetTcpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies/{name}"
   required=["(project targetTcpProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies/{name}"
   required=["(project targetTcpProxy)"]
  }
 }
}
export targetTcpProxies

# /resources/externalVpnGateways
type externalVpnGateways = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ExternalVpnGateway(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ExternalVpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways/{name}"
   required=["(project externalVpnGateway)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways/{name}"
   required=["(project externalVpnGateway)"]
  }
 }
}
export externalVpnGateways

# /resources/organizationSecurityPolicies
type organizationSecurityPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies"
   required=["()"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{name}"
   required=["(securityPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{name}"
   required=["(securityPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{name}"
   required=["(securityPolicy)"]
  }
 }
}
export organizationSecurityPolicies

# /resources/networkFirewallPolicies
type networkFirewallPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{name}"
   required=["(project firewallPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{name}"
   required=["(project firewallPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{name}"
   required=["(project firewallPolicy)"]
  }
 }
}
export networkFirewallPolicies

# /resources/vpnGateways
type vpnGateways = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.VpnGateway(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.VpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways/{name}"
   required=["(vpnGateway region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways/{name}"
   required=["(vpnGateway region project)"]
  }
 }
}
export vpnGateways

# /resources/regionDiskTypes
type regionDiskTypes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.DiskType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/diskTypes/{name}"
   required=["(diskType region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionDiskTypes

# /resources/forwardingRules
type forwardingRules = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ForwardingRule"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{name}"
   required=["(forwardingRule region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{name}"
   required=["(forwardingRule region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{name}"
   required=["(forwardingRule region project)"]
  }
 }
}
export forwardingRules

# /resources/licenseCodes
type licenseCodes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.LicenseCode"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenseCodes/{name}"
   required=["(project licenseCode)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export licenseCodes

# /resources/targetSslProxies
type targetSslProxies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetSslProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetSslProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies/{name}"
   required=["(project targetSslProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies/{name}"
   required=["(project targetSslProxy)"]
  }
 }
}
export targetSslProxies

# /resources/imageFamilyViews
type imageFamilyViews = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ImageFamilyView"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/imageFamilyViews/{name}"
   required=["(family zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export imageFamilyViews

# /resources/targetInstances
type targetInstances = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetInstance(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetInstance"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances/{name}"
   required=["(targetInstance zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances/{name}"
   required=["(targetInstance zone project)"]
  }
 }
}
export targetInstances

# /resources/regionInstanceTemplates
type regionInstanceTemplates = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceTemplate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{name}"
   required=["(instanceTemplate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{name}"
   required=["(instanceTemplate region project)"]
  }
 }
}
export regionInstanceTemplates

# /resources/serviceAttachments
type serviceAttachments = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ServiceAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ServiceAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{name}"
   required=["(serviceAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ServiceAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{name}"
   required=["(serviceAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{name}"
   required=["(serviceAttachment region project)"]
  }
 }
}
export serviceAttachments

# /resources/machineTypes
type machineTypes = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.MachineType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/machineTypes/{name}"
   required=["(zone project machineType)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export machineTypes

# /resources/regionUrlMaps
type regionUrlMaps = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.UrlMap"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{name}"
   required=["(urlMap region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{name}"
   required=["(urlMap region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{name}"
   required=["(urlMap region project)"]
  }
 }
}
export regionUrlMaps

# /resources/regionNetworkFirewallPolicies
type regionNetworkFirewallPolicies = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{name}"
   required=["(firewallPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{name}"
   required=["(firewallPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{name}"
   required=["(firewallPolicy region project)"]
  }
 }
}
export regionNetworkFirewallPolicies

# /resources/instanceGroupManagerResizeRequests
type instanceGroupManagerResizeRequests = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManagerResizeRequest(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests"
   required=["(instanceGroupManager zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroupManagerResizeRequest"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{name}"
   required=["(instanceGroupManager resizeRequest zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{name}"
   required=["(instanceGroupManager resizeRequest zone project)"]
  }
 }
}
export instanceGroupManagerResizeRequests

# /resources/interconnectLocations
type interconnectLocations = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InterconnectLocation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnectLocations/{name}"
   required=["(project interconnectLocation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export interconnectLocations

# /resources/regionDisks
type regionDisks = {
 identity(cfg) = cfg
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Disk(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Disk"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks/{name}"
   required=["(disk region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks/{name}"
   required=["(disk region project)"]
  }
 }
}
export regionDisks

