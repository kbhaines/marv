#lang marv
## AUTO-GENERATED FILE - DO NOT EDIT!
type regionDisks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Disk"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Disk"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Disk"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks/{disk}"
   required=["(disk region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks/{disk}"
   required=["(disk region project)"]
  }
 }
}
export regionDisks

type interconnectLocations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InterconnectLocation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnectLocations/{interconnectLocation}"
   required=["(project interconnectLocation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export interconnectLocations

type instanceGroupManagerResizeRequests = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstanceGroupManagerResizeRequest"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests"
   required=["(instanceGroupManager zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceGroupManagerResizeRequest"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests"
   required=["(instanceGroupManager zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceGroupManagerResizeRequest"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}"
   required=["(instanceGroupManager resizeRequest zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{resizeRequest}"
   required=["(instanceGroupManager resizeRequest zone project)"]
  }
 }
}
export instanceGroupManagerResizeRequests

type regionNetworkFirewallPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}"
   required=["(firewallPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}"
   required=["(firewallPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}"
   required=["(firewallPolicy region project)"]
  }
 }
}
export regionNetworkFirewallPolicies

type regionUrlMaps = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="UrlMap"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="UrlMap"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="UrlMap"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}"
   required=["(urlMap region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="UrlMap"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}"
   required=["(urlMap region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{urlMap}"
   required=["(urlMap region project)"]
  }
 }
}
export regionUrlMaps

type machineTypes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="MachineType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/machineTypes/{machineType}"
   required=["(zone project machineType)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export machineTypes

type serviceAttachments = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="ServiceAttachment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ServiceAttachment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="ServiceAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}"
   required=["(serviceAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ServiceAttachment"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}"
   required=["(serviceAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}"
   required=["(serviceAttachment region project)"]
  }
 }
}
export serviceAttachments

type regionInstanceTemplates = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstanceTemplate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceTemplate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}"
   required=["(instanceTemplate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{instanceTemplate}"
   required=["(instanceTemplate region project)"]
  }
 }
}
export regionInstanceTemplates

type targetInstances = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetInstance"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetInstance"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetInstance"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}"
   required=["(targetInstance zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances/{targetInstance}"
   required=["(targetInstance zone project)"]
  }
 }
}
export targetInstances

type imageFamilyViews = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="ImageFamilyView"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/imageFamilyViews/{family}"
   required=["(family zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export imageFamilyViews

type targetSslProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetSslProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetSslProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetSslProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}"
   required=["(project targetSslProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies/{targetSslProxy}"
   required=["(project targetSslProxy)"]
  }
 }
}
export targetSslProxies

type licenseCodes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="LicenseCode"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenseCodes/{licenseCode}"
   required=["(project licenseCode)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export licenseCodes

type forwardingRules = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="ForwardingRule"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ForwardingRule"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="ForwardingRule"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}"
   required=["(forwardingRule region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ForwardingRule"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}"
   required=["(forwardingRule region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{forwardingRule}"
   required=["(forwardingRule region project)"]
  }
 }
}
export forwardingRules

type regionDiskTypes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="DiskType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/diskTypes/{diskType}"
   required=["(diskType region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionDiskTypes

type vpnGateways = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="VpnGateway"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="VpnGateway"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="VpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}"
   required=["(vpnGateway region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways/{vpnGateway}"
   required=["(vpnGateway region project)"]
  }
 }
}
export vpnGateways

type networkFirewallPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}"
   required=["(project firewallPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}"
   required=["(project firewallPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{firewallPolicy}"
   required=["(project firewallPolicy)"]
  }
 }
}
export networkFirewallPolicies

type organizationSecurityPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies"
   required=["()"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies"
   required=["()"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{securityPolicy}"
   required=["(securityPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{securityPolicy}"
   required=["(securityPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{securityPolicy}"
   required=["(securityPolicy)"]
  }
 }
}
export organizationSecurityPolicies

type externalVpnGateways = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="ExternalVpnGateway"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ExternalVpnGateway"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="ExternalVpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}"
   required=["(project externalVpnGateway)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways/{externalVpnGateway}"
   required=["(project externalVpnGateway)"]
  }
 }
}
export externalVpnGateways

type targetTcpProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetTcpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetTcpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetTcpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}"
   required=["(project targetTcpProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies/{targetTcpProxy}"
   required=["(project targetTcpProxy)"]
  }
 }
}
export targetTcpProxies

type urlMaps = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="UrlMap"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="UrlMap"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="UrlMap"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{urlMap}"
   required=["(project urlMap)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="UrlMap"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{urlMap}"
   required=["(project urlMap)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{urlMap}"
   required=["(project urlMap)"]
  }
 }
}
export urlMaps

type healthChecks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="HealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="HealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{healthCheck}"
   required=["(project healthCheck)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HealthCheck"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{healthCheck}"
   required=["(project healthCheck)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{healthCheck}"
   required=["(project healthCheck)"]
  }
 }
}
export healthChecks

type backendBuckets = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="BackendBucket"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="BackendBucket"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="BackendBucket"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}"
   required=["(project backendBucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="BackendBucket"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}"
   required=["(project backendBucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{backendBucket}"
   required=["(project backendBucket)"]
  }
 }
}
export backendBuckets

type networkEdgeSecurityServices = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NetworkEdgeSecurityService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkEdgeSecurityService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NetworkEdgeSecurityService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkEdgeSecurityService"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
}
export networkEdgeSecurityServices

type zones = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Zone"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}"
   required=["(zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export zones

type regionHealthCheckServices = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="HealthCheckService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HealthCheckService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="HealthCheckService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}"
   required=["(healthCheckService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HealthCheckService"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}"
   required=["(healthCheckService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}"
   required=["(healthCheckService region project)"]
  }
 }
}
export regionHealthCheckServices

type subnetworks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Subnetwork"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Subnetwork"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Subnetwork"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
   required=["(subnetwork region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Subnetwork"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
   required=["(subnetwork region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{subnetwork}"
   required=["(subnetwork region project)"]
  }
 }
}
export subnetworks

type regions = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Region"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}"
   required=["(region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regions

type interconnectAttachments = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InterconnectAttachment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InterconnectAttachment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InterconnectAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
   required=["(interconnectAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InterconnectAttachment"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
   required=["(interconnectAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}"
   required=["(interconnectAttachment region project)"]
  }
 }
}
export interconnectAttachments

type regionSecurityPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}"
   required=["(securityPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}"
   required=["(securityPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}"
   required=["(securityPolicy region project)"]
  }
 }
}
export regionSecurityPolicies

type globalNetworkEndpointGroups = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NetworkEndpointGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkEndpointGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}"
   required=["(project networkEndpointGroup)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}"
   required=["(project networkEndpointGroup)"]
  }
 }
}
export globalNetworkEndpointGroups

type firewalls = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Firewall"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Firewall"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Firewall"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{firewall}"
   required=["(firewall project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Firewall"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{firewall}"
   required=["(firewall project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{firewall}"
   required=["(firewall project)"]
  }
 }
}
export firewalls

type interconnectRemoteLocations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InterconnectRemoteLocation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnectRemoteLocations/{interconnectRemoteLocation}"
   required=["(project interconnectRemoteLocation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export interconnectRemoteLocations

type targetVpnGateways = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetVpnGateway"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetVpnGateway"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetVpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"
   required=["(targetVpnGateway region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}"
   required=["(targetVpnGateway region project)"]
  }
 }
}
export targetVpnGateways

type backendServices = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="BackendService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="BackendService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="BackendService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{backendService}"
   required=["(project backendService)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="BackendService"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{backendService}"
   required=["(project backendService)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{backendService}"
   required=["(project backendService)"]
  }
 }
}
export backendServices

type regionSslCertificates = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SslCertificate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SslCertificate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SslCertificate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}"
   required=["(sslCertificate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates/{sslCertificate}"
   required=["(sslCertificate region project)"]
  }
 }
}
export regionSslCertificates

type httpsHealthChecks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="HttpsHealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HttpsHealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="HttpsHealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}"
   required=["(httpsHealthCheck project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HttpsHealthCheck"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}"
   required=["(httpsHealthCheck project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}"
   required=["(httpsHealthCheck project)"]
  }
 }
}
export httpsHealthChecks

type regionInstanceGroupManagers = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstanceGroupManager"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceGroupManager"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceGroupManager"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
   required=["(instanceGroupManager region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceGroupManager"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
   required=["(instanceGroupManager region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}"
   required=["(instanceGroupManager region project)"]
  }
 }
}
export regionInstanceGroupManagers

type globalOrganizationOperations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/operations/{operation}"
   required=["(operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/operations/{operation}"
   required=["(operation)"]
  }
 }
}
export globalOrganizationOperations

type snapshots = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Snapshot"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Snapshot"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Snapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots/{snapshot}"
   required=["(project snapshot)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots/{snapshot}"
   required=["(project snapshot)"]
  }
 }
}
export snapshots

type globalPublicDelegatedPrefixes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="PublicDelegatedPrefix"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PublicDelegatedPrefix"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="PublicDelegatedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PublicDelegatedPrefix"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
}
export globalPublicDelegatedPrefixes

type resourcePolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="ResourcePolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ResourcePolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="ResourcePolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}"
   required=["(resourcePolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ResourcePolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}"
   required=["(resourcePolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}"
   required=["(resourcePolicy region project)"]
  }
 }
}
export resourcePolicies

type snapshotSettings = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SnapshotSettings"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshotSettings"
   required=["(project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SnapshotSettings"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshotSettings"
   required=["(project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export snapshotSettings

type globalForwardingRules = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="ForwardingRule"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ForwardingRule"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="ForwardingRule"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}"
   required=["(project forwardingRule)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="ForwardingRule"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}"
   required=["(project forwardingRule)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{forwardingRule}"
   required=["(project forwardingRule)"]
  }
 }
}
export globalForwardingRules

type acceleratorTypes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="AcceleratorType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}"
   required=["(acceleratorType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export acceleratorTypes

type nodeGroups = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NodeGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups?initialNodeCount={initialNodeCount}"
   required=["(initialNodeCount zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NodeGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups?initialNodeCount={initialNodeCount}"
   required=["(initialNodeCount zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NodeGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}"
   required=["(nodeGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NodeGroup"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}"
   required=["(nodeGroup zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}"
   required=["(nodeGroup zone project)"]
  }
 }
}
export nodeGroups

type regionCommitments = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Commitment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Commitment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Commitment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments/{commitment}"
   required=["(commitment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionCommitments

type regionHealthChecks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="HealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="HealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}"
   required=["(healthCheck region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HealthCheck"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}"
   required=["(healthCheck region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{healthCheck}"
   required=["(healthCheck region project)"]
  }
 }
}
export regionHealthChecks

type packetMirrorings = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="PacketMirroring"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PacketMirroring"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="PacketMirroring"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}"
   required=["(packetMirroring region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PacketMirroring"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}"
   required=["(packetMirroring region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}"
   required=["(packetMirroring region project)"]
  }
 }
}
export packetMirrorings

type regionNotificationEndpoints = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NotificationEndpoint"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NotificationEndpoint"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NotificationEndpoint"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}"
   required=["(notificationEndpoint region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}"
   required=["(notificationEndpoint region project)"]
  }
 }
}
export regionNotificationEndpoints

type regionTargetHttpProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetHttpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetHttpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}"
   required=["(targetHttpProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}"
   required=["(targetHttpProxy region project)"]
  }
 }
}
export regionTargetHttpProxies

type zoneOperations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/operations/{operation}"
   required=["(operation zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/operations/{operation}"
   required=["(operation zone project)"]
  }
 }
}
export zoneOperations

type regionNetworkEndpointGroups = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NetworkEndpointGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkEndpointGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}"
   required=["(networkEndpointGroup region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}"
   required=["(networkEndpointGroup region project)"]
  }
 }
}
export regionNetworkEndpointGroups

type disks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Disk"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Disk"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Disk"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks/{disk}"
   required=["(disk zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks/{disk}"
   required=["(disk zone project)"]
  }
 }
}
export disks

type routers = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Router"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Router"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Router"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{router}"
   required=["(router region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Router"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{router}"
   required=["(router region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{router}"
   required=["(router region project)"]
  }
 }
}
export routers

type regionZones = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionZones

type globalAddresses = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Address"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Address"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Address"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses/{address}"
   required=["(project address)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses/{address}"
   required=["(project address)"]
  }
 }
}
export globalAddresses

type publicAdvertisedPrefixes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="PublicAdvertisedPrefix"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PublicAdvertisedPrefix"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="PublicAdvertisedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PublicAdvertisedPrefix"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
}
export publicAdvertisedPrefixes

type instantSnapshots = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstantSnapshot"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstantSnapshot"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstantSnapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}"
   required=["(zone instantSnapshot project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}"
   required=["(zone instantSnapshot project)"]
  }
 }
}
export instantSnapshots

type sslCertificates = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SslCertificate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SslCertificate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SslCertificate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}"
   required=["(project sslCertificate)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates/{sslCertificate}"
   required=["(project sslCertificate)"]
  }
 }
}
export sslCertificates

type futureReservations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="FutureReservation"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FutureReservation"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="FutureReservation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations/{futureReservation}"
   required=["(futureReservation zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations/{futureReservation}"
   required=["(futureReservation zone project)"]
  }
 }
}
export futureReservations

type autoscalers = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Autoscaler"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Autoscaler"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Autoscaler"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}"
   required=["(autoscaler zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Autoscaler"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers/{autoscaler}"
   required=["(autoscaler zone project)"]
  }
 }
}
export autoscalers

type instances = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Instance"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Instance"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Instance"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances/{instance}"
   required=["(instance zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances/{instance}"
   required=["(instance zone project)"]
  }
 }
}
export instances

type httpHealthChecks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="HttpHealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HttpHealthCheck"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="HttpHealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}"
   required=["(project httpHealthCheck)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="HttpHealthCheck"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}"
   required=["(project httpHealthCheck)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{httpHealthCheck}"
   required=["(project httpHealthCheck)"]
  }
 }
}
export httpHealthChecks

type regionTargetHttpsProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetHttpsProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpsProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetHttpsProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}"
   required=["(targetHttpsProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpsProxy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}"
   required=["(targetHttpsProxy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}"
   required=["(targetHttpsProxy region project)"]
  }
 }
}
export regionTargetHttpsProxies

type instanceGroups = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstanceGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}"
   required=["(instanceGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}"
   required=["(instanceGroup zone project)"]
  }
 }
}
export instanceGroups

type images = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Image"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Image"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Image"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{image}"
   required=["(project image)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Image"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{image}"
   required=["(project image)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{image}"
   required=["(project image)"]
  }
 }
}
export images

type targetGrpcProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetGrpcProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetGrpcProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetGrpcProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}"
   required=["(project targetGrpcProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetGrpcProxy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}"
   required=["(project targetGrpcProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}"
   required=["(project targetGrpcProxy)"]
  }
 }
}
export targetGrpcProxies

type sslPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SslPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SslPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SslPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}"
   required=["(project sslPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SslPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}"
   required=["(project sslPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{sslPolicy}"
   required=["(project sslPolicy)"]
  }
 }
}
export sslPolicies

type regionOperations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/operations/{operation}"
   required=["(operation region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/operations/{operation}"
   required=["(operation region project)"]
  }
 }
}
export regionOperations

type networkEndpointGroups = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NetworkEndpointGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkEndpointGroup"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}"
   required=["(networkEndpointGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}"
   required=["(networkEndpointGroup zone project)"]
  }
 }
}
export networkEndpointGroups

type regionAutoscalers = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Autoscaler"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Autoscaler"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Autoscaler"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}"
   required=["(autoscaler region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Autoscaler"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers/{autoscaler}"
   required=["(autoscaler region project)"]
  }
 }
}
export regionAutoscalers

type regionInstanceGroups = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}"
   required=["(instanceGroup region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionInstanceGroups

type regionSslPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SslPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SslPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SslPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}"
   required=["(sslPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SslPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}"
   required=["(sslPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{sslPolicy}"
   required=["(sslPolicy region project)"]
  }
 }
}
export regionSslPolicies

type firewallPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies"
   required=["()"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies"
   required=["()"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{firewallPolicy}"
   required=["(firewallPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="FirewallPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{firewallPolicy}"
   required=["(firewallPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{firewallPolicy}"
   required=["(firewallPolicy)"]
  }
 }
}
export firewallPolicies

type projects = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Project"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}"
   required=["(project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export projects

type targetHttpProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetHttpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetHttpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}"
   required=["(project targetHttpProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpProxy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}"
   required=["(project targetHttpProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{targetHttpProxy}"
   required=["(project targetHttpProxy)"]
  }
 }
}
export targetHttpProxies

type targetPools = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetPool"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetPool"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetPool"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}"
   required=["(targetPool region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools/{targetPool}"
   required=["(targetPool region project)"]
  }
 }
}
export targetPools

type targetHttpsProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetHttpsProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpsProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetHttpsProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}"
   required=["(project targetHttpsProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetHttpsProxy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}"
   required=["(project targetHttpsProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}"
   required=["(project targetHttpsProxy)"]
  }
 }
}
export targetHttpsProxies

type regionBackendServices = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="BackendService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="BackendService"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="BackendService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}"
   required=["(backendService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="BackendService"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}"
   required=["(backendService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{backendService}"
   required=["(backendService region project)"]
  }
 }
}
export regionBackendServices

type routes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Route"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Route"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Route"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes/{route}"
   required=["(project route)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes/{route}"
   required=["(project route)"]
  }
 }
}
export routes

type networkAttachments = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NetworkAttachment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkAttachment"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NetworkAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}"
   required=["(networkAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NetworkAttachment"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}"
   required=["(networkAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{networkAttachment}"
   required=["(networkAttachment region project)"]
  }
 }
}
export networkAttachments

type licenses = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="License"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="License"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="License"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses/{license}"
   required=["(license project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses/{license}"
   required=["(license project)"]
  }
 }
}
export licenses

type publicDelegatedPrefixes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="PublicDelegatedPrefix"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PublicDelegatedPrefix"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="PublicDelegatedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="PublicDelegatedPrefix"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
}
export publicDelegatedPrefixes

type reservations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Reservation"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Reservation"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Reservation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}"
   required=["(zone reservation project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations/{reservation}"
   required=["(zone reservation project)"]
  }
 }
}
export reservations

type addresses = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Address"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Address"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Address"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses/{address}"
   required=["(address region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses/{address}"
   required=["(address region project)"]
  }
 }
}
export addresses

type machineImages = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="MachineImage"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="MachineImage"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="MachineImage"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages/{machineImage}"
   required=["(project machineImage)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages/{machineImage}"
   required=["(project machineImage)"]
  }
 }
}
export machineImages

type interconnects = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Interconnect"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Interconnect"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Interconnect"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{interconnect}"
   required=["(project interconnect)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Interconnect"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{interconnect}"
   required=["(project interconnect)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{interconnect}"
   required=["(project interconnect)"]
  }
 }
}
export interconnects

type instanceSettings = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceSettings"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceSettings"
   required=["(zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceSettings"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceSettings"
   required=["(zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export instanceSettings

type instanceGroupManagers = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstanceGroupManager"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers"
   required=["(zone project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceGroupManager"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceGroupManager"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
   required=["(instanceGroupManager zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceGroupManager"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
   required=["(instanceGroupManager zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}"
   required=["(instanceGroupManager zone project)"]
  }
 }
}
export instanceGroupManagers

type diskTypes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="DiskType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/diskTypes/{diskType}"
   required=["(diskType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export diskTypes

type regionInstances = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export regionInstances

type securityPolicies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}"
   required=["(project securityPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="SecurityPolicy"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}"
   required=["(project securityPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{securityPolicy}"
   required=["(project securityPolicy)"]
  }
 }
}
export securityPolicies

type nodeTemplates = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="NodeTemplate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="NodeTemplate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NodeTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}"
   required=["(nodeTemplate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}"
   required=["(nodeTemplate region project)"]
  }
 }
}
export nodeTemplates

type nodeTypes = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="NodeType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{nodeType}"
   required=["(nodeType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export nodeTypes

type regionInstantSnapshots = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstantSnapshot"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstantSnapshot"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstantSnapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}"
   required=["(region instantSnapshot project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}"
   required=["(region instantSnapshot project)"]
  }
 }
}
export regionInstantSnapshots

type instanceTemplates = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="InstanceTemplate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="InstanceTemplate"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="InstanceTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}"
   required=["(project instanceTemplate)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates/{instanceTemplate}"
   required=["(project instanceTemplate)"]
  }
 }
}
export instanceTemplates

type networks = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="Network"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks"
   required=["(project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Network"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Network"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{network}"
   required=["(project network)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="Network"
   response-type="Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{network}"
   required=["(project network)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{network}"
   required=["(project network)"]
  }
 }
}
export networks

type vpnTunnels = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="VpnTunnel"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="VpnTunnel"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="VpnTunnel"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}"
   required=["(vpnTunnel region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}"
   required=["(vpnTunnel region project)"]
  }
 }
}
export vpnTunnels

type globalOperations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   
  }
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/operations/{operation}"
   required=["(project operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/operations/{operation}"
   required=["(project operation)"]
  }
 }
}
export globalOperations

type regionTargetTcpProxies = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
  api={
   api-id="compute"
   request-type="TargetTcpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies"
   required=["(region project)"]
  }
 }
 create(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="TargetTcpProxy"
   response-type="Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="TargetTcpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}"
   required=["(targetTcpProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id="compute"
   request-type="#f"
   response-type="Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{targetTcpProxy}"
   required=["(targetTcpProxy region project)"]
  }
 }
}
export regionTargetTcpProxies

