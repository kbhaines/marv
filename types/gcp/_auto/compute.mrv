#lang marv
## AUTO-GENERATED FILE - DO NOT EDIT!

import types/gcp/_auto/compute-schema
API-ID="compute"
# /resources/regionTargetTcpProxies
type resources_regionTargetTcpProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionTargetTcpProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetTcpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetTcpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{name}"
   required=["(targetTcpProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetTcpProxies/{name}"
   required=["(targetTcpProxy region project)"]
  }
 }
}
export resources_regionTargetTcpProxies

# /resources/globalOperations
type resources_globalOperations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/globalOperations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/operations/{name}"
   required=["(project operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/operations/{name}"
   required=["(project operation)"]
  }
 }
}
export resources_globalOperations

# /resources/vpnTunnels
type resources_vpnTunnels = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/vpnTunnels"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.VpnTunnel(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.VpnTunnel"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{name}"
   required=["(vpnTunnel region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnTunnels/{name}"
   required=["(vpnTunnel region project)"]
  }
 }
}
export resources_vpnTunnels

# /resources/networks
type resources_networks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/networks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Network(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Network"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{name}"
   required=["(project network)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Network(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{name}"
   required=["(project network)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networks/{name}"
   required=["(project network)"]
  }
 }
}
export resources_networks

# /resources/instanceTemplates
type resources_instanceTemplates = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instanceTemplates"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceTemplate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates/{name}"
   required=["(project instanceTemplate)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/instanceTemplates/{name}"
   required=["(project instanceTemplate)"]
  }
 }
}
export resources_instanceTemplates

# /resources/regionInstantSnapshots
type resources_regionInstantSnapshots = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionInstantSnapshots"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstantSnapshot(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstantSnapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{name}"
   required=["(region instantSnapshot project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instantSnapshots/{name}"
   required=["(region instantSnapshot project)"]
  }
 }
}
export resources_regionInstantSnapshots

# /resources/nodeTypes
type resources_nodeTypes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/nodeTypes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NodeType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeTypes/{name}"
   required=["(nodeType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_nodeTypes

# /resources/nodeTemplates
type resources_nodeTemplates = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/nodeTemplates"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NodeTemplate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NodeTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{name}"
   required=["(nodeTemplate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/nodeTemplates/{name}"
   required=["(nodeTemplate region project)"]
  }
 }
}
export resources_nodeTemplates

# /resources/securityPolicies
type resources_securityPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/securityPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{name}"
   required=["(project securityPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{name}"
   required=["(project securityPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/securityPolicies/{name}"
   required=["(project securityPolicy)"]
  }
 }
}
export resources_securityPolicies

# /resources/regionInstances
type resources_regionInstances = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionInstances"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_regionInstances

# /resources/diskTypes
type resources_diskTypes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/diskTypes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.DiskType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/diskTypes/{name}"
   required=["(diskType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_diskTypes

# /resources/instanceGroupManagers
type resources_instanceGroupManagers = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instanceGroupManagers"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroupManager"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager zone project)"]
  }
 }
}
export resources_instanceGroupManagers

# /resources/instanceSettings
type resources_instanceSettings = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instanceSettings"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceSettings"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceSettings"
   required=["(zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceSettings(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceSettings"
   required=["(zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_instanceSettings

# /resources/interconnects
type resources_interconnects = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/interconnects"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Interconnect(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Interconnect"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{name}"
   required=["(project interconnect)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Interconnect(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{name}"
   required=["(project interconnect)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnects/{name}"
   required=["(project interconnect)"]
  }
 }
}
export resources_interconnects

# /resources/machineImages
type resources_machineImages = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/machineImages"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.MachineImage(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.MachineImage"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages/{name}"
   required=["(project machineImage)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/machineImages/{name}"
   required=["(project machineImage)"]
  }
 }
}
export resources_machineImages

# /resources/addresses
type resources_addresses = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/addresses"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Address(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Address"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses/{name}"
   required=["(address region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/addresses/{name}"
   required=["(address region project)"]
  }
 }
}
export resources_addresses

# /resources/reservations
type resources_reservations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/reservations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Reservation(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Reservation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations/{name}"
   required=["(zone reservation project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/reservations/{name}"
   required=["(zone reservation project)"]
  }
 }
}
export resources_reservations

# /resources/publicDelegatedPrefixes
type resources_publicDelegatedPrefixes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/publicDelegatedPrefixes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PublicDelegatedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{name}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{name}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/publicDelegatedPrefixes/{name}"
   required=["(publicDelegatedPrefix region project)"]
  }
 }
}
export resources_publicDelegatedPrefixes

# /resources/licenses
type resources_licenses = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/licenses"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.License(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.License"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses/{name}"
   required=["(license project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenses/{name}"
   required=["(license project)"]
  }
 }
}
export resources_licenses

# /resources/networkAttachments
type resources_networkAttachments = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/networkAttachments"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{name}"
   required=["(networkAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{name}"
   required=["(networkAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkAttachments/{name}"
   required=["(networkAttachment region project)"]
  }
 }
}
export resources_networkAttachments

# /resources/routes
type resources_routes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/routes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Route(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Route"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes/{name}"
   required=["(project route)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/routes/{name}"
   required=["(project route)"]
  }
 }
}
export resources_routes

# /resources/regionBackendServices
type resources_regionBackendServices = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionBackendServices"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.BackendService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{name}"
   required=["(backendService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{name}"
   required=["(backendService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/backendServices/{name}"
   required=["(backendService region project)"]
  }
 }
}
export resources_regionBackendServices

# /resources/targetHttpsProxies
type resources_targetHttpsProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetHttpsProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpsProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{name}"
   required=["(project targetHttpsProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{name}"
   required=["(project targetHttpsProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpsProxies/{name}"
   required=["(project targetHttpsProxy)"]
  }
 }
}
export resources_targetHttpsProxies

# /resources/targetPools
type resources_targetPools = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetPools"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetPool(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetPool"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools/{name}"
   required=["(targetPool region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetPools/{name}"
   required=["(targetPool region project)"]
  }
 }
}
export resources_targetPools

# /resources/targetHttpProxies
type resources_targetHttpProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetHttpProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{name}"
   required=["(project targetHttpProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{name}"
   required=["(project targetHttpProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetHttpProxies/{name}"
   required=["(project targetHttpProxy)"]
  }
 }
}
export resources_targetHttpProxies

# /resources/projects
type resources_projects = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/projects"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Project"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{name}"
   required=["(project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_projects

# /resources/firewallPolicies
type resources_firewallPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/firewallPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies"
   required=["()"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{name}"
   required=["(firewallPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{name}"
   required=["(firewallPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/firewallPolicies/{name}"
   required=["(firewallPolicy)"]
  }
 }
}
export resources_firewallPolicies

# /resources/regionSslPolicies
type resources_regionSslPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionSslPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{name}"
   required=["(sslPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{name}"
   required=["(sslPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslPolicies/{name}"
   required=["(sslPolicy region project)"]
  }
 }
}
export resources_regionSslPolicies

# /resources/regionInstanceGroups
type resources_regionInstanceGroups = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionInstanceGroups"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroups/{name}"
   required=["(instanceGroup region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_regionInstanceGroups

# /resources/regionAutoscalers
type resources_regionAutoscalers = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionAutoscalers"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Autoscaler"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers/{name}"
   required=["(autoscaler region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers"
   required=["(region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/autoscalers/{name}"
   required=["(autoscaler region project)"]
  }
 }
}
export resources_regionAutoscalers

# /resources/networkEndpointGroups
type resources_networkEndpointGroups = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/networkEndpointGroups"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEndpointGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup zone project)"]
  }
 }
}
export resources_networkEndpointGroups

# /resources/regionOperations
type resources_regionOperations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionOperations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/operations/{name}"
   required=["(operation region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/operations/{name}"
   required=["(operation region project)"]
  }
 }
}
export resources_regionOperations

# /resources/sslPolicies
type resources_sslPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/sslPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{name}"
   required=["(project sslPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{name}"
   required=["(project sslPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslPolicies/{name}"
   required=["(project sslPolicy)"]
  }
 }
}
export resources_sslPolicies

# /resources/targetGrpcProxies
type resources_targetGrpcProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetGrpcProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetGrpcProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetGrpcProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{name}"
   required=["(project targetGrpcProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetGrpcProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{name}"
   required=["(project targetGrpcProxy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetGrpcProxies/{name}"
   required=["(project targetGrpcProxy)"]
  }
 }
}
export resources_targetGrpcProxies

# /resources/images
type resources_images = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/images"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Image(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Image"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{name}"
   required=["(project image)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Image(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{name}"
   required=["(project image)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/images/{name}"
   required=["(project image)"]
  }
 }
}
export resources_images

# /resources/instanceGroups
type resources_instanceGroups = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instanceGroups"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{name}"
   required=["(instanceGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroups/{name}"
   required=["(instanceGroup zone project)"]
  }
 }
}
export resources_instanceGroups

# /resources/regionTargetHttpsProxies
type resources_regionTargetHttpsProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionTargetHttpsProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpsProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{name}"
   required=["(targetHttpsProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpsProxy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{name}"
   required=["(targetHttpsProxy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpsProxies/{name}"
   required=["(targetHttpsProxy region project)"]
  }
 }
}
export resources_regionTargetHttpsProxies

# /resources/httpHealthChecks
type resources_httpHealthChecks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/httpHealthChecks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HttpHealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{name}"
   required=["(project httpHealthCheck)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{name}"
   required=["(project httpHealthCheck)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpHealthChecks/{name}"
   required=["(project httpHealthCheck)"]
  }
 }
}
export resources_httpHealthChecks

# /resources/instances
type resources_instances = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instances"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Instance(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Instance"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances/{name}"
   required=["(instance zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instances/{name}"
   required=["(instance zone project)"]
  }
 }
}
export resources_instances

# /resources/autoscalers
type resources_autoscalers = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/autoscalers"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Autoscaler"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers/{name}"
   required=["(autoscaler zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Autoscaler(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers"
   required=["(zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/autoscalers/{name}"
   required=["(autoscaler zone project)"]
  }
 }
}
export resources_autoscalers

# /resources/futureReservations
type resources_futureReservations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/futureReservations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FutureReservation(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FutureReservation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations/{name}"
   required=["(futureReservation zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/futureReservations/{name}"
   required=["(futureReservation zone project)"]
  }
 }
}
export resources_futureReservations

# /resources/sslCertificates
type resources_sslCertificates = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/sslCertificates"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslCertificate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslCertificate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates/{name}"
   required=["(project sslCertificate)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/sslCertificates/{name}"
   required=["(project sslCertificate)"]
  }
 }
}
export resources_sslCertificates

# /resources/instantSnapshots
type resources_instantSnapshots = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instantSnapshots"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstantSnapshot(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstantSnapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{name}"
   required=["(zone instantSnapshot project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instantSnapshots/{name}"
   required=["(zone instantSnapshot project)"]
  }
 }
}
export resources_instantSnapshots

# /resources/publicAdvertisedPrefixes
type resources_publicAdvertisedPrefixes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/publicAdvertisedPrefixes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicAdvertisedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PublicAdvertisedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{name}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicAdvertisedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{name}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicAdvertisedPrefixes/{name}"
   required=["(project publicAdvertisedPrefix)"]
  }
 }
}
export resources_publicAdvertisedPrefixes

# /resources/globalAddresses
type resources_globalAddresses = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/globalAddresses"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Address(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Address"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses/{name}"
   required=["(project address)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/addresses/{name}"
   required=["(project address)"]
  }
 }
}
export resources_globalAddresses

# /resources/regionZones
type resources_regionZones = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionZones"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_regionZones

# /resources/routers
type resources_routers = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/routers"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Router(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Router"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{name}"
   required=["(router region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Router(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{name}"
   required=["(router region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/routers/{name}"
   required=["(router region project)"]
  }
 }
}
export resources_routers

# /resources/disks
type resources_disks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/disks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Disk(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Disk"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks/{name}"
   required=["(disk zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/disks/{name}"
   required=["(disk zone project)"]
  }
 }
}
export resources_disks

# /resources/regionNetworkEndpointGroups
type resources_regionNetworkEndpointGroups = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionNetworkEndpointGroups"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEndpointGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEndpointGroups/{name}"
   required=["(networkEndpointGroup region project)"]
  }
 }
}
export resources_regionNetworkEndpointGroups

# /resources/zoneOperations
type resources_zoneOperations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/zoneOperations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/operations/{name}"
   required=["(operation zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/operations/{name}"
   required=["(operation zone project)"]
  }
 }
}
export resources_zoneOperations

# /resources/regionTargetHttpProxies
type resources_regionTargetHttpProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionTargetHttpProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetHttpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetHttpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{name}"
   required=["(targetHttpProxy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetHttpProxies/{name}"
   required=["(targetHttpProxy region project)"]
  }
 }
}
export resources_regionTargetHttpProxies

# /resources/regionNotificationEndpoints
type resources_regionNotificationEndpoints = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionNotificationEndpoints"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NotificationEndpoint(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NotificationEndpoint"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{name}"
   required=["(notificationEndpoint region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/notificationEndpoints/{name}"
   required=["(notificationEndpoint region project)"]
  }
 }
}
export resources_regionNotificationEndpoints

# /resources/packetMirrorings
type resources_packetMirrorings = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/packetMirrorings"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PacketMirroring(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PacketMirroring"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{name}"
   required=["(packetMirroring region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PacketMirroring(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{name}"
   required=["(packetMirroring region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/packetMirrorings/{name}"
   required=["(packetMirroring region project)"]
  }
 }
}
export resources_packetMirrorings

# /resources/regionHealthChecks
type resources_regionHealthChecks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionHealthChecks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{name}"
   required=["(healthCheck region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{name}"
   required=["(healthCheck region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthChecks/{name}"
   required=["(healthCheck region project)"]
  }
 }
}
export resources_regionHealthChecks

# /resources/regionCommitments
type resources_regionCommitments = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionCommitments"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Commitment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Commitment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/commitments/{name}"
   required=["(commitment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_regionCommitments

# /resources/nodeGroups
type resources_nodeGroups = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/nodeGroups"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NodeGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups?initialNodeCount={initialNodeCount}"
   required=["(initialNodeCount zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NodeGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{name}"
   required=["(nodeGroup zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NodeGroup(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{name}"
   required=["(nodeGroup zone project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/nodeGroups/{name}"
   required=["(nodeGroup zone project)"]
  }
 }
}
export resources_nodeGroups

# /resources/acceleratorTypes
type resources_acceleratorTypes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/acceleratorTypes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.AcceleratorType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/acceleratorTypes/{name}"
   required=["(acceleratorType zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_acceleratorTypes

# /resources/globalForwardingRules
type resources_globalForwardingRules = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/globalForwardingRules"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ForwardingRule"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{name}"
   required=["(project forwardingRule)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{name}"
   required=["(project forwardingRule)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/forwardingRules/{name}"
   required=["(project forwardingRule)"]
  }
 }
}
export resources_globalForwardingRules

# /resources/snapshotSettings
type resources_snapshotSettings = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/snapshotSettings"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SnapshotSettings"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshotSettings"
   required=["(project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SnapshotSettings(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshotSettings"
   required=["(project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_snapshotSettings

# /resources/resourcePolicies
type resources_resourcePolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/resourcePolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ResourcePolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ResourcePolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{name}"
   required=["(resourcePolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ResourcePolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{name}"
   required=["(resourcePolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/resourcePolicies/{name}"
   required=["(resourcePolicy region project)"]
  }
 }
}
export resources_resourcePolicies

# /resources/globalPublicDelegatedPrefixes
type resources_globalPublicDelegatedPrefixes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/globalPublicDelegatedPrefixes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.PublicDelegatedPrefix"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{name}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.PublicDelegatedPrefix(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{name}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/publicDelegatedPrefixes/{name}"
   required=["(project publicDelegatedPrefix)"]
  }
 }
}
export resources_globalPublicDelegatedPrefixes

# /resources/snapshots
type resources_snapshots = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/snapshots"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Snapshot(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Snapshot"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots/{name}"
   required=["(project snapshot)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/snapshots/{name}"
   required=["(project snapshot)"]
  }
 }
}
export resources_snapshots

# /resources/globalOrganizationOperations
type resources_globalOrganizationOperations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/globalOrganizationOperations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/operations/{name}"
   required=["(operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.#f"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/operations/{name}"
   required=["(operation)"]
  }
 }
}
export resources_globalOrganizationOperations

# /resources/regionInstanceGroupManagers
type resources_regionInstanceGroupManagers = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionInstanceGroupManagers"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroupManager"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManager(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceGroupManagers/{name}"
   required=["(instanceGroupManager region project)"]
  }
 }
}
export resources_regionInstanceGroupManagers

# /resources/httpsHealthChecks
type resources_httpsHealthChecks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/httpsHealthChecks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpsHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HttpsHealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{name}"
   required=["(httpsHealthCheck project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HttpsHealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{name}"
   required=["(httpsHealthCheck project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/httpsHealthChecks/{name}"
   required=["(httpsHealthCheck project)"]
  }
 }
}
export resources_httpsHealthChecks

# /resources/regionSslCertificates
type resources_regionSslCertificates = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionSslCertificates"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslCertificate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SslCertificate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates/{name}"
   required=["(sslCertificate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/sslCertificates/{name}"
   required=["(sslCertificate region project)"]
  }
 }
}
export resources_regionSslCertificates

# /resources/backendServices
type resources_backendServices = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/backendServices"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.BackendService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{name}"
   required=["(project backendService)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{name}"
   required=["(project backendService)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendServices/{name}"
   required=["(project backendService)"]
  }
 }
}
export resources_backendServices

# /resources/targetVpnGateways
type resources_targetVpnGateways = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetVpnGateways"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetVpnGateway(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetVpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{name}"
   required=["(targetVpnGateway region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/targetVpnGateways/{name}"
   required=["(targetVpnGateway region project)"]
  }
 }
}
export resources_targetVpnGateways

# /resources/interconnectRemoteLocations
type resources_interconnectRemoteLocations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/interconnectRemoteLocations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InterconnectRemoteLocation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnectRemoteLocations/{name}"
   required=["(project interconnectRemoteLocation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_interconnectRemoteLocations

# /resources/firewalls
type resources_firewalls = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/firewalls"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Firewall(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Firewall"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{name}"
   required=["(firewall project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Firewall(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{name}"
   required=["(firewall project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewalls/{name}"
   required=["(firewall project)"]
  }
 }
}
export resources_firewalls

# /resources/globalNetworkEndpointGroups
type resources_globalNetworkEndpointGroups = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/globalNetworkEndpointGroups"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEndpointGroup(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEndpointGroup"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups/{name}"
   required=["(project networkEndpointGroup)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/networkEndpointGroups/{name}"
   required=["(project networkEndpointGroup)"]
  }
 }
}
export resources_globalNetworkEndpointGroups

# /resources/regionSecurityPolicies
type resources_regionSecurityPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionSecurityPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{name}"
   required=["(securityPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{name}"
   required=["(securityPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/securityPolicies/{name}"
   required=["(securityPolicy region project)"]
  }
 }
}
export resources_regionSecurityPolicies

# /resources/interconnectAttachments
type resources_interconnectAttachments = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/interconnectAttachments"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InterconnectAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InterconnectAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{name}"
   required=["(interconnectAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InterconnectAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{name}"
   required=["(interconnectAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/interconnectAttachments/{name}"
   required=["(interconnectAttachment region project)"]
  }
 }
}
export resources_interconnectAttachments

# /resources/regions
type resources_regions = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regions"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Region"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{name}"
   required=["(region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_regions

# /resources/subnetworks
type resources_subnetworks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/subnetworks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Subnetwork(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Subnetwork"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{name}"
   required=["(subnetwork region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Subnetwork(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{name}"
   required=["(subnetwork region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/subnetworks/{name}"
   required=["(subnetwork region project)"]
  }
 }
}
export resources_subnetworks

# /resources/regionHealthCheckServices
type resources_regionHealthCheckServices = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionHealthCheckServices"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheckService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HealthCheckService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{name}"
   required=["(healthCheckService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheckService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{name}"
   required=["(healthCheckService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/healthCheckServices/{name}"
   required=["(healthCheckService region project)"]
  }
 }
}
export resources_regionHealthCheckServices

# /resources/zones
type resources_zones = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/zones"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Zone"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{name}"
   required=["(zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_zones

# /resources/networkEdgeSecurityServices
type resources_networkEdgeSecurityServices = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/networkEdgeSecurityServices"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEdgeSecurityService(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.NetworkEdgeSecurityService"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{name}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.NetworkEdgeSecurityService(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{name}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/networkEdgeSecurityServices/{name}"
   required=["(networkEdgeSecurityService region project)"]
  }
 }
}
export resources_networkEdgeSecurityServices

# /resources/backendBuckets
type resources_backendBuckets = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/backendBuckets"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendBucket(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.BackendBucket"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{name}"
   required=["(project backendBucket)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackendBucket(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{name}"
   required=["(project backendBucket)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/backendBuckets/{name}"
   required=["(project backendBucket)"]
  }
 }
}
export resources_backendBuckets

# /resources/healthChecks
type resources_healthChecks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/healthChecks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.HealthCheck"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{name}"
   required=["(project healthCheck)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.HealthCheck(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{name}"
   required=["(project healthCheck)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/healthChecks/{name}"
   required=["(project healthCheck)"]
  }
 }
}
export resources_healthChecks

# /resources/urlMaps
type resources_urlMaps = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/urlMaps"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.UrlMap"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{name}"
   required=["(project urlMap)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{name}"
   required=["(project urlMap)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/urlMaps/{name}"
   required=["(project urlMap)"]
  }
 }
}
export resources_urlMaps

# /resources/targetTcpProxies
type resources_targetTcpProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetTcpProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetTcpProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetTcpProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies/{name}"
   required=["(project targetTcpProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetTcpProxies/{name}"
   required=["(project targetTcpProxy)"]
  }
 }
}
export resources_targetTcpProxies

# /resources/externalVpnGateways
type resources_externalVpnGateways = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/externalVpnGateways"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ExternalVpnGateway(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ExternalVpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways/{name}"
   required=["(project externalVpnGateway)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/externalVpnGateways/{name}"
   required=["(project externalVpnGateway)"]
  }
 }
}
export resources_externalVpnGateways

# /resources/organizationSecurityPolicies
type resources_organizationSecurityPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/organizationSecurityPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies"
   required=["()"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.SecurityPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{name}"
   required=["(securityPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SecurityPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{name}"
   required=["(securityPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/locations/global/securityPolicies/{name}"
   required=["(securityPolicy)"]
  }
 }
}
export resources_organizationSecurityPolicies

# /resources/networkFirewallPolicies
type resources_networkFirewallPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/networkFirewallPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{name}"
   required=["(project firewallPolicy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{name}"
   required=["(project firewallPolicy)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/firewallPolicies/{name}"
   required=["(project firewallPolicy)"]
  }
 }
}
export resources_networkFirewallPolicies

# /resources/vpnGateways
type resources_vpnGateways = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/vpnGateways"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.VpnGateway(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.VpnGateway"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways/{name}"
   required=["(vpnGateway region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/vpnGateways/{name}"
   required=["(vpnGateway region project)"]
  }
 }
}
export resources_vpnGateways

# /resources/regionDiskTypes
type resources_regionDiskTypes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionDiskTypes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.DiskType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/diskTypes/{name}"
   required=["(diskType region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_regionDiskTypes

# /resources/forwardingRules
type resources_forwardingRules = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/forwardingRules"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ForwardingRule"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{name}"
   required=["(forwardingRule region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ForwardingRule(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{name}"
   required=["(forwardingRule region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/forwardingRules/{name}"
   required=["(forwardingRule region project)"]
  }
 }
}
export resources_forwardingRules

# /resources/licenseCodes
type resources_licenseCodes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/licenseCodes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.LicenseCode"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/licenseCodes/{name}"
   required=["(project licenseCode)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_licenseCodes

# /resources/targetSslProxies
type resources_targetSslProxies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetSslProxies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetSslProxy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetSslProxy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies/{name}"
   required=["(project targetSslProxy)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/targetSslProxies/{name}"
   required=["(project targetSslProxy)"]
  }
 }
}
export resources_targetSslProxies

# /resources/imageFamilyViews
type resources_imageFamilyViews = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/imageFamilyViews"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ImageFamilyView"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/imageFamilyViews/{name}"
   required=["(family zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_imageFamilyViews

# /resources/targetInstances
type resources_targetInstances = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/targetInstances"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.TargetInstance(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances"
   required=["(zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.TargetInstance"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances/{name}"
   required=["(targetInstance zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/targetInstances/{name}"
   required=["(targetInstance zone project)"]
  }
 }
}
export resources_targetInstances

# /resources/regionInstanceTemplates
type resources_regionInstanceTemplates = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionInstanceTemplates"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceTemplate(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceTemplate"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{name}"
   required=["(instanceTemplate region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/instanceTemplates/{name}"
   required=["(instanceTemplate region project)"]
  }
 }
}
export resources_regionInstanceTemplates

# /resources/serviceAttachments
type resources_serviceAttachments = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/serviceAttachments"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ServiceAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.ServiceAttachment"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{name}"
   required=["(serviceAttachment region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.ServiceAttachment(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{name}"
   required=["(serviceAttachment region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/serviceAttachments/{name}"
   required=["(serviceAttachment region project)"]
  }
 }
}
export resources_serviceAttachments

# /resources/machineTypes
type resources_machineTypes = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/machineTypes"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.MachineType"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/machineTypes/{name}"
   required=["(zone project machineType)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_machineTypes

# /resources/regionUrlMaps
type resources_regionUrlMaps = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionUrlMaps"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.UrlMap"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{name}"
   required=["(urlMap region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.UrlMap(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{name}"
   required=["(urlMap region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/urlMaps/{name}"
   required=["(urlMap region project)"]
  }
 }
}
export resources_regionUrlMaps

# /resources/regionNetworkFirewallPolicies
type resources_regionNetworkFirewallPolicies = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionNetworkFirewallPolicies"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.FirewallPolicy"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{name}"
   required=["(firewallPolicy region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.FirewallPolicy(cfg)
   response-type="compute.schemas.Operation"
   method="PATCH"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{name}"
   required=["(firewallPolicy region project)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/firewallPolicies/{name}"
   required=["(firewallPolicy region project)"]
  }
 }
}
export resources_regionNetworkFirewallPolicies

# /resources/instanceGroupManagerResizeRequests
type resources_instanceGroupManagerResizeRequests = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/instanceGroupManagerResizeRequests"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.InstanceGroupManagerResizeRequest(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests"
   required=["(instanceGroupManager zone project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InstanceGroupManagerResizeRequest"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{name}"
   required=["(instanceGroupManager resizeRequest zone project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeRequests/{name}"
   required=["(instanceGroupManager resizeRequest zone project)"]
  }
 }
}
export resources_instanceGroupManagerResizeRequests

# /resources/interconnectLocations
type resources_interconnectLocations = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/interconnectLocations"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.InterconnectLocation"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/global/interconnectLocations/{name}"
   required=["(project interconnectLocation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export resources_interconnectLocations

# /resources/regionDisks
type resources_regionDisks = {
 origin(cfg)= {
  driver="gcp"
  type="gcp:compute:/resources/regionDisks"
 }
 identity(cfg) = cfg
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Disk(cfg)
   response-type="compute.schemas.Operation"
   method="POST"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks"
   required=["(region project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Disk"
   method="GET"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks/{name}"
   required=["(disk region project)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="compute.schemas.Operation"
   method="DELETE"
   url="https://compute.googleapis.com/compute/beta/projects/{project}/regions/{region}/disks/{name}"
   required=["(disk region project)"]
  }
 }
}
export resources_regionDisks

