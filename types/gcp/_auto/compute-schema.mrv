#lang marv
## AUTO-GENERATED FILE - DO NOT EDIT!


# Schema for Help
Help(c)=c << [links]

# Schema for ExternalVpnGateway
ExternalVpnGateway(c)=c << [id,interfaces,selfLink,labelFingerprint,redundancyType,name,labels,creationTimestamp,description,kind]

# Schema for SecurityPolicyRuleRateLimitOptionsThreshold
SecurityPolicyRuleRateLimitOptionsThreshold(c)=c << [count,intervalSec]

# Schema for InstanceGroupList
InstanceGroupList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RouterBgpPeerBfd
RouterBgpPeerBfd(c)=c << [multiplier,minTransmitInterval,sessionInitializationMode,minReceiveInterval]

# Schema for CommitmentList
CommitmentList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RegionInstanceGroupManagerList
RegionInstanceGroupManagerList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for BackendBucketCdnPolicy
BackendBucketCdnPolicy(c)=c << [defaultTtl,cacheMode,clientTtl,serveWhileStale,negativeCaching,bypassCacheOnRequestHeaders,negativeCachingPolicy,signedUrlCacheMaxAgeSec,cacheKeyPolicy,signedUrlKeyNames,maxTtl,requestCoalescing]

# Schema for RegionDisksResizeRequest
RegionDisksResizeRequest(c)=c << [sizeGb]

# Schema for RegionInstanceGroupsSetNamedPortsRequest
RegionInstanceGroupsSetNamedPortsRequest(c)=c << [fingerprint,namedPorts]

# Schema for NetworkEndpointGroupPscData
NetworkEndpointGroupPscData(c)=c << [pscConnectionId,consumerPscAddress,pscConnectionStatus]

# Schema for AllocationAggregateReservationReservedResourceInfo
AllocationAggregateReservationReservedResourceInfo(c)=c << [accelerator]

# Schema for SubnetworkList
SubnetworkList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig
SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig(c)=c << [value,enableEachUniqueValue,type]

# Schema for DiskMoveRequest
DiskMoveRequest(c)=c << [targetDisk,destinationZone]

# Schema for AutoscalersScopedList
AutoscalersScopedList(c)=c << [warning,autoscalers]

# Schema for NetworkPeering
NetworkPeering(c)=c << [state,importSubnetRoutesWithPublicIp,exportSubnetRoutesWithPublicIp,network,autoCreateRoutes,peerMtu,exchangeSubnetRoutes,importCustomRoutes,stateDetails,name,stackType,exportCustomRoutes]

# Schema for TargetVpnGatewayAggregatedList
TargetVpnGatewayAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for SecurityPoliciesAggregatedList
SecurityPoliciesAggregatedList(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for ShieldedInstanceIdentityEntry
ShieldedInstanceIdentityEntry(c)=c << [ekPub,ekCert]

# Schema for BgpRoute
BgpRoute(c)=c << [destination,communities,med,origin,asPaths]

# Schema for VpnGatewayStatusTunnel
VpnGatewayStatusTunnel(c)=c << [localGatewayInterface,tunnelUrl,peerGatewayInterface]

# Schema for TargetVpnGatewaysScopedList
TargetVpnGatewaysScopedList(c)=c << [targetVpnGateways,warning]

# Schema for InterconnectAttachmentsScopedList
InterconnectAttachmentsScopedList(c)=c << [interconnectAttachments,warning]

# Schema for SecurityPoliciesListPreconfiguredExpressionSetsResponse
SecurityPoliciesListPreconfiguredExpressionSetsResponse(c)=c << [preconfiguredExpressionSets]

# Schema for ImageList
ImageList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ServiceAccount
ServiceAccount(c)=c << [email,scopes]

# Schema for InstanceAggregatedList
InstanceAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for DisksStartAsyncReplicationRequest
DisksStartAsyncReplicationRequest(c)=c << [asyncSecondaryDisk]

# Schema for SubnetworksExpandIpCidrRangeRequest
SubnetworksExpandIpCidrRangeRequest(c)=c << [ipCidrRange]

# Schema for TargetTcpProxyList
TargetTcpProxyList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for PacketMirroringFilter
PacketMirroringFilter(c)=c << [IPProtocols,direction,cidrRanges]

# Schema for SecurityPolicyRuleMatcherConfig
SecurityPolicyRuleMatcherConfig(c)=c << [destIpRanges,srcIpRanges,layer4Configs]

# Schema for InstanceGroupManagersStartInstancesRequest
InstanceGroupManagersStartInstancesRequest(c)=c << [instances]

# Schema for InstanceParams
InstanceParams(c)=c << [resourceManagerTags]

# Schema for SecurityPolicy
SecurityPolicy(c)=c << [id,selfLink,labelFingerprint,ruleTupleCount,userDefinedFields,name,advancedOptionsConfig,description,adaptiveProtectionConfig,rules,displayName,region,associations,recaptchaOptionsConfig,labels,type,fingerprint,ddosProtectionConfig,shortName,creationTimestamp,kind,selfLinkWithId,parent]

# Schema for RegionList
RegionList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ResourcePolicyDailyCycle
ResourcePolicyDailyCycle(c)=c << [daysInCycle,startTime,duration]

# Schema for SecurityPolicyRuleMatcherConfigLayer4Config
SecurityPolicyRuleMatcherConfigLayer4Config(c)=c << [ports,ipProtocol]

# Schema for AllocationSpecificSKUAllocationReservedInstanceProperties
AllocationSpecificSKUAllocationReservedInstanceProperties(c)=c << [locationHint,machineType,localSsds,guestAccelerators,maintenanceFreezeDurationHours,maintenanceInterval,minCpuPlatform]

# Schema for NodeGroupNode
NodeGroupNode(c)=c << [upcomingMaintenance,serverId,satisfiesPzs,instances,status,consumedResources,serverBinding,instanceConsumptionData,disks,name,cpuOvercommitType,accelerators,nodeType,totalResources]

# Schema for RegionDiskTypeList
RegionDiskTypeList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for Disk
Disk(c)=c << [selfLink,satisfiesPzs,sourceSnapshotEncryptionKey,replicaZones,sourceDiskId,params,sourceStorageObject,id,sourceSnapshot,licenseCodes,sourceInstantSnapshotId,locationHint,sourceImageId,zone,asyncPrimaryDisk,region,sourceImageEncryptionKey,sourceDisk,labelFingerprint,sourceSnapshotId,users,resourcePolicies,architecture,interface,options,name,asyncSecondaryDisks,sizeGb,multiWriter,type,labels,sourceInstantSnapshot,satisfiesPzi,sourceConsistencyGroupPolicyId,accessMode,provisionedThroughput,lastAttachTimestamp,userLicenses,sourceImage,guestOsFeatures,licenses,diskEncryptionKey,sourceConsistencyGroupPolicy,creationTimestamp,lastDetachTimestamp,enableConfidentialCompute,locked,storagePool,eraseWindowsVssSignature,description,storageType,kind,status,physicalBlockSizeBytes,resourceStatus,provisionedIops]

# Schema for RouterNatLogConfig
RouterNatLogConfig(c)=c << [enable,filter]

# Schema for ConsistentHashLoadBalancerSettingsHttpCookie
ConsistentHashLoadBalancerSettingsHttpCookie(c)=c << [name,ttl,path]

# Schema for DiskType
DiskType(c)=c << [id,defaultDiskSizeGb,name,creationTimestamp,description,kind,region,zone,deprecated,selfLink,validDiskSize]

# Schema for HttpsHealthCheck
HttpsHealthCheck(c)=c << [id,checkIntervalSec,requestPath,name,healthyThreshold,port,selfLink,unhealthyThreshold,creationTimestamp,host,description,kind,timeoutSec]

# Schema for AttachedDisk
AttachedDisk(c)=c << [forceAttach,deviceName,diskSizeGb,type,kind,mode,shieldedInstanceInitialState,savedState,architecture,interface,index,source,userLicenses,initializeParams,guestOsFeatures,licenses,diskEncryptionKey,locked,autoDelete,boot]

# Schema for ServiceAttachmentTunnelingConfig
ServiceAttachmentTunnelingConfig(c)=c << [encapsulationProfile,routingMode]

# Schema for UsableSubnetwork
UsableSubnetwork(c)=c << [externalIpv6Prefix,secondaryIpRanges,purpose,subnetwork,network,stackType,ipCidrRange,role,ipv6AccessType,internalIpv6Prefix]

# Schema for NetworkEdgeSecurityServiceAggregatedList
NetworkEdgeSecurityServiceAggregatedList(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for ShareSettings
ShareSettings(c)=c << [projects,projectMap,shareType]

# Schema for InstanceTemplateAggregatedList
InstanceTemplateAggregatedList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ScalingScheduleStatus
ScalingScheduleStatus(c)=c << [state,lastStartTime,nextStartTime]

# Schema for FutureReservationStatusSpecificSKUProperties
FutureReservationStatusSpecificSKUProperties(c)=c << [sourceInstanceTemplateId]

# Schema for RouterBgpPeer
RouterBgpPeer(c)=c << [advertisedGroups,peerIpv4NexthopAddress,name,ipv4NexthopAddress,importPolicies,customLearnedRoutePriority,managementType,peerAsn,enableIpv6,interfaceName,peerIpv6NexthopAddress,enableIpv4,routerApplianceInstance,enable,customLearnedIpRanges,exportPolicies,md5AuthenticationKeyName,advertisedIpRanges,ipv6NexthopAddress,ipAddress,advertiseMode,advertisedRoutePriority,bfd,peerIpAddress]

# Schema for InstanceGroupManagerInstanceFlexibilityPolicy
InstanceGroupManagerInstanceFlexibilityPolicy(c)=c << [provisioningModelMix,instanceSelections]

# Schema for AllocationResourceStatus
AllocationResourceStatus(c)=c << [specificSkuAllocation]

# Schema for BackendServicesScopedList
BackendServicesScopedList(c)=c << [backendServices,warning]

# Schema for RegionInstanceGroupManagersRecreateRequest
RegionInstanceGroupManagersRecreateRequest(c)=c << [instances]

# Schema for NetworkPerformanceConfig
NetworkPerformanceConfig(c)=c << [totalEgressBandwidthTier]

# Schema for NamedPort
NamedPort(c)=c << [port,name]

# Schema for DiskAggregatedList
DiskAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstancesScopedList
InstancesScopedList(c)=c << [warning,instances]

# Schema for OperationsScopedList
OperationsScopedList(c)=c << [warning,operations]

# Schema for HttpFaultInjection
HttpFaultInjection(c)=c << [abort,delay]

# Schema for MachineTypesScopedList
MachineTypesScopedList(c)=c << [machineTypes,warning]

# Schema for SecurityPolicyAdvancedOptionsConfig
SecurityPolicyAdvancedOptionsConfig(c)=c << [userIpRequestHeaders,logLevel,jsonCustomConfig,jsonParsing]

# Schema for StoragePoolTypesScopedList
StoragePoolTypesScopedList(c)=c << [storagePoolTypes,warning]

# Schema for InstanceGroupManagerStatusAllInstancesConfig
InstanceGroupManagerStatusAllInstancesConfig(c)=c << [effective,currentRevision]

# Schema for InterconnectRemoteLocationConstraintsSubnetLengthRange
InterconnectRemoteLocationConstraintsSubnetLengthRange(c)=c << [min,max]

# Schema for NodeGroupsAddNodesRequest
NodeGroupsAddNodesRequest(c)=c << [additionalNodeCount]

# Schema for TargetPoolAggregatedList
TargetPoolAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for PublicAdvertisedPrefixPublicDelegatedPrefix
PublicAdvertisedPrefixPublicDelegatedPrefix(c)=c << [name,ipRange,status,region,project]

# Schema for InterconnectsGetDiagnosticsResponse
InterconnectsGetDiagnosticsResponse(c)=c << [result]

# Schema for ForwardingRuleAggregatedList
ForwardingRuleAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for NodeGroupsScopedList
NodeGroupsScopedList(c)=c << [warning,nodeGroups]

# Schema for SslCertificateAggregatedList
SslCertificateAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for BackendServiceAggregatedList
BackendServiceAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstanceGroupManagerVersion
InstanceGroupManagerVersion(c)=c << [name,instanceTemplate,targetSize]

# Schema for PreservedStatePreservedDisk
PreservedStatePreservedDisk(c)=c << [mode,source,autoDelete]

# Schema for ShieldedInstanceIdentity
ShieldedInstanceIdentity(c)=c << [signingKey,encryptionKey,kind]

# Schema for VpnGatewayStatusHighAvailabilityRequirementState
VpnGatewayStatusHighAvailabilityRequirementState(c)=c << [state,unsatisfiedReason]

# Schema for ProjectsGetXpnResources
ProjectsGetXpnResources(c)=c << [resources,kind,nextPageToken]

# Schema for NodeTemplateNodeTypeFlexibility
NodeTemplateNodeTypeFlexibility(c)=c << [localSsd,cpus,memory]

# Schema for InstanceGroup
InstanceGroup(c)=c << [id,selfLink,subnetwork,name,description,zone,region,network,size,fingerprint,creationTimestamp,kind,namedPorts]

# Schema for NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy(c)=c << [name,type,shortName,priority,rules,displayName]

# Schema for MachineImage
MachineImage(c)=c << [id,sourceDiskEncryptionKeys,satisfiesPzs,name,satisfiesPzi,sourceInstance,totalStorageBytes,savedDisks,instanceProperties,selfLink,sourceInstanceProperties,storageLocations,creationTimestamp,guestFlush,machineImageEncryptionKey,description,kind,status]

# Schema for TargetTcpProxy
TargetTcpProxy(c)=c << [service,region,selfLink,name,creationTimestamp,description,kind,id,proxyHeader,proxyBind]

# Schema for DisksRemoveResourcePoliciesRequest
DisksRemoveResourcePoliciesRequest(c)=c << [resourcePolicies]

# Schema for AllocationAggregateReservationReservedResourceInfoAccelerator
AllocationAggregateReservationReservedResourceInfoAccelerator(c)=c << [acceleratorType,acceleratorCount]

# Schema for ZoneSetLabelsRequest
ZoneSetLabelsRequest(c)=c << [labelFingerprint,labels]

# Schema for RouterAggregatedList
RouterAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy
NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy(c)=c << [id,rules]

# Schema for AddressesScopedList
AddressesScopedList(c)=c << [warning,addresses]

# Schema for Subnetwork
Subnetwork(c)=c << [selfLink,gatewayAddress,logConfig,network,stackType,description,id,externalIpv6Prefix,reservedInternalRange,state,secondaryIpRanges,purpose,region,ipv6CidrRange,privateIpGoogleAccess,allowSubnetCidrRoutesOverlap,name,fingerprint,creationTimestamp,kind,enableFlowLogs,privateIpv6GoogleAccess,ipCidrRange,role,ipv6AccessType,internalIpv6Prefix]

# Schema for VpnGatewayStatusVpnConnection
VpnGatewayStatusVpnConnection(c)=c << [state,peerExternalGateway,tunnels,peerGcpGateway]

# Schema for MetadataFilter
MetadataFilter(c)=c << [filterMatchCriteria,filterLabels]

# Schema for UpcomingMaintenance
UpcomingMaintenance(c)=c << [canReschedule,type,maintenanceStatus,windowStartTime,latestWindowStartTime,windowEndTime]

# Schema for Backend
Backend(c)=c << [maxRate,maxConnectionsPerInstance,failover,capacityScaler,balancingMode,description,maxRatePerInstance,maxConnectionsPerEndpoint,maxConnections,preference,group,maxRatePerEndpoint,maxUtilization]

# Schema for GRPCHealthCheck
GRPCHealthCheck(c)=c << [portName,port,portSpecification,grpcServiceName]

# Schema for PublicDelegatedPrefixesScopedList
PublicDelegatedPrefixesScopedList(c)=c << [warning,publicDelegatedPrefixes]

# Schema for HttpHeaderAction
HttpHeaderAction(c)=c << [requestHeadersToAdd,responseHeadersToRemove,requestHeadersToRemove,responseHeadersToAdd]

# Schema for ConnectionDraining
ConnectionDraining(c)=c << [drainingTimeoutSec]

# Schema for BackendServiceIAP
BackendServiceIAP(c)=c << [oauth2ClientSecretSha256,oauth2ClientId,oauth2ClientSecret,enabled]

# Schema for RegionTargetHttpsProxiesSetSslCertificatesRequest
RegionTargetHttpsProxiesSetSslCertificatesRequest(c)=c << [sslCertificates]

# Schema for ServiceAttachment
ServiceAttachment(c)=c << [id,selfLink,targetService,connectionPreference,consumerRejectLists,name,tunnelingConfig,connectedEndpoints,propagatedConnectionLimit,consumerAcceptLists,pscServiceAttachmentId,natSubnets,domainNames,region,fingerprint,reconcileConnections,creationTimestamp,enableProxyProtocol,description,kind,producerForwardingRule]

# Schema for BackendBucket
BackendBucket(c)=c << [id,enableCdn,bucketName,selfLink,name,edgeSecurityPolicy,description,kind,cdnPolicy,customResponseHeaders,compressionMode,creationTimestamp]

# Schema for ForwardingRuleReference
ForwardingRuleReference(c)=c << [forwardingRule]

# Schema for InstanceConsumptionInfo
InstanceConsumptionInfo(c)=c << [minNodeCpus,localSsdGb,guestCpus,memoryMb]

# Schema for SerialPortOutput
SerialPortOutput(c)=c << [start,selfLink,kind,contents,next]

# Schema for InterconnectAttachmentConfigurationConstraints
InterconnectAttachmentConfigurationConstraints(c)=c << [bgpMd5,bgpPeerAsnRanges]

# Schema for TargetPoolsRemoveHealthCheckRequest
TargetPoolsRemoveHealthCheckRequest(c)=c << [healthChecks]

# Schema for RouterList
RouterList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupManagersListErrorsResponse
InstanceGroupManagersListErrorsResponse(c)=c << [nextPageToken,items]

# Schema for SnapshotList
SnapshotList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for WafExpressionSetExpression
WafExpressionSetExpression(c)=c << [id,sensitivity]

# Schema for NetworksAddPeeringRequest
NetworksAddPeeringRequest(c)=c << [name,peerNetwork,autoCreateRoutes,networkPeering]

# Schema for VpnGatewayAggregatedList
VpnGatewayAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstantSnapshotAggregatedList
InstantSnapshotAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstanceGroupManagerStatusStateful
InstanceGroupManagerStatusStateful(c)=c << [isStateful,hasStatefulConfig,perInstanceConfigs]

# Schema for StoragePoolTypeAggregatedList
StoragePoolTypeAggregatedList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for PreservedStatePreservedNetworkIpIpAddress
PreservedStatePreservedNetworkIpIpAddress(c)=c << [literal,address]

# Schema for InstanceGroupsRemoveInstancesRequest
InstanceGroupsRemoveInstancesRequest(c)=c << [instances]

# Schema for ResourceStatusScheduling
ResourceStatusScheduling(c)=c << [terminationTimestamp,availabilityDomain]

# Schema for RegionInstanceGroupManagersSetTemplateRequest
RegionInstanceGroupManagersSetTemplateRequest(c)=c << [instanceTemplate]

# Schema for LogConfig
LogConfig(c)=c << [cloudAudit,counter,dataAccess]

# Schema for TargetSslProxyList
TargetSslProxyList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ReservationList
ReservationList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for HttpFaultAbort
HttpFaultAbort(c)=c << [httpStatus,percentage]

# Schema for DiskList
DiskList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for TargetSslProxiesSetProxyHeaderRequest
TargetSslProxiesSetProxyHeaderRequest(c)=c << [proxyHeader]

# Schema for Network
Network(c)=c << [peerings,firewallPolicy,networkFirewallPolicyEnforcementOrder,creationTimestamp,description,id,internalIpv6Range,selfLink,subnetworks,mtu,routingConfig,name,gatewayIPv4,IPv4Range,autoCreateSubnetworks,enableUlaInternalIpv6,kind,selfLinkWithId]

# Schema for GlobalAddressesMoveRequest
GlobalAddressesMoveRequest(c)=c << [description,destinationAddress]

# Schema for StoragePoolList
StoragePoolList(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for ProjectsSetDefaultNetworkTierRequest
ProjectsSetDefaultNetworkTierRequest(c)=c << [networkTier]

# Schema for AddressAggregatedList
AddressAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy(c)=c << [data,name]

# Schema for RouterInterface
RouterInterface(c)=c << [managementType,subnetwork,ipVersion,name,linkedInterconnectAttachment,ipRange,linkedVpnTunnel,redundantInterface,privateIpAddress]

# Schema for ExternalVpnGatewayList
ExternalVpnGatewayList(c)=c << [id,selfLink,warning,etag,items,kind,nextPageToken]

# Schema for SetCommonInstanceMetadataOperationMetadata
SetCommonInstanceMetadataOperationMetadata(c)=c << [perLocationOperations,clientOperationId]

# Schema for HttpHeaderOption
HttpHeaderOption(c)=c << [headerName,replace,headerValue]

# Schema for GlobalSetPolicyRequest
GlobalSetPolicyRequest(c)=c << [policy,bindings,etag]

# Schema for ResourcePolicyInstanceSchedulePolicy
ResourcePolicyInstanceSchedulePolicy(c)=c << [timeZone,startTime,vmStartSchedule,vmStopSchedule,expirationTime]

# Schema for BackendServiceHttpCookie
BackendServiceHttpCookie(c)=c << [name,ttl,path]

# Schema for ForwardingRule
ForwardingRule(c)=c << [portRange,networkTier,kind,id,serviceName,ports,isMirroringCollector,noAutomateDnsZone,externalManagedBackendBucketMigrationState,region,loadBalancingScheme,pscConnectionId,externalManagedBackendBucketMigrationTestingPercentage,selfLink,serviceLabel,allowPscGlobalAccess,pscConnectionStatus,subnetwork,labelFingerprint,ipVersion,IPAddress,allPorts,backendService,name,metadataFilters,sourceIpRanges,network,labels,IPProtocol,allowPscPacketInjection,allowGlobalAccess,fingerprint,creationTimestamp,baseForwardingRule,target,description,serviceDirectoryRegistrations,ipCollection]

# Schema for RequestMirrorPolicy
RequestMirrorPolicy(c)=c << [backendService]

# Schema for AllocationResourceStatusSpecificSKUAllocation
AllocationResourceStatusSpecificSKUAllocation(c)=c << [sourceInstanceTemplateId,utilizations]

# Schema for BackendServiceCdnPolicy
BackendServiceCdnPolicy(c)=c << [defaultTtl,cacheMode,clientTtl,serveWhileStale,negativeCaching,bypassCacheOnRequestHeaders,negativeCachingPolicy,signedUrlCacheMaxAgeSec,cacheKeyPolicy,signedUrlKeyNames,maxTtl,requestCoalescing]

# Schema for NodeGroupMaintenanceWindow
NodeGroupMaintenanceWindow(c)=c << [maintenanceDuration,startTime]

# Schema for RouterMd5AuthenticationKey
RouterMd5AuthenticationKey(c)=c << [name,key]

# Schema for LogConfigCloudAuditOptions
LogConfigCloudAuditOptions(c)=c << [logName]

# Schema for TargetPoolList
TargetPoolList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupManagerInstanceFlexibilityPolicyInstanceSelection
InstanceGroupManagerInstanceFlexibilityPolicyInstanceSelection(c)=c << [machineTypes,rank]

# Schema for PublicAdvertisedPrefix
PublicAdvertisedPrefix(c)=c << [id,byoipApiVersion,selfLink,name,description,fingerprint,pdpScope,creationTimestamp,ipCidrRange,kind,status,sharedSecret,publicDelegatedPrefixs,dnsVerificationIp]

# Schema for RegionInstanceGroupManagersStartInstancesRequest
RegionInstanceGroupManagersStartInstancesRequest(c)=c << [instances]

# Schema for AutoscalingPolicyScaleInControl
AutoscalingPolicyScaleInControl(c)=c << [maxScaledInReplicas,timeWindowSec]

# Schema for UsageExportLocation
UsageExportLocation(c)=c << [bucketName,reportNamePrefix]

# Schema for License
License(c)=c << [id,transferable,chargesUseFee,selfLink,resourceRequirements,licenseCode,name,creationTimestamp,description,kind]

# Schema for RoutersListRoutePolicies
RoutersListRoutePolicies(c)=c << [id,selfLink,result,etag,warning,unreachables,kind,nextPageToken]

# Schema for TargetPoolInstanceHealth
TargetPoolInstanceHealth(c)=c << [healthStatus,kind]

# Schema for BulkInsertInstanceResourcePerInstanceProperties
BulkInsertInstanceResourcePerInstanceProperties(c)=c << [hostname,name]

# Schema for ShieldedInstanceConfig
ShieldedInstanceConfig(c)=c << [enableIntegrityMonitoring,enableVtpm,enableSecureBoot]

# Schema for ReservationsResizeRequest
ReservationsResizeRequest(c)=c << [specificSkuCount]

# Schema for FirewallPolicyRuleMatcherLayer4Config
FirewallPolicyRuleMatcherLayer4Config(c)=c << [ports,ipProtocol]

# Schema for FutureReservationsListResponse
FutureReservationsListResponse(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for TargetPoolsScopedList
TargetPoolsScopedList(c)=c << [warning,targetPools]

# Schema for AutoscalingPolicyLoadBalancingUtilization
AutoscalingPolicyLoadBalancingUtilization(c)=c << [utilizationTarget]

# Schema for FileContentBuffer
FileContentBuffer(c)=c << [fileType,content]

# Schema for FutureReservationsScopedList
FutureReservationsScopedList(c)=c << [warning,futureReservations]

# Schema for RegionInstanceGroupManagersListInstancesResponse
RegionInstanceGroupManagersListInstancesResponse(c)=c << [managedInstances,nextPageToken]

# Schema for SslPoliciesScopedList
SslPoliciesScopedList(c)=c << [warning,sslPolicies]

# Schema for FirewallList
FirewallList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for LocationPolicy
LocationPolicy(c)=c << [locations,targetShape]

# Schema for HTTPSHealthCheck
HTTPSHealthCheck(c)=c << [proxyHeader,portName,requestPath,port,response,portSpecification,host]

# Schema for SslPolicyReference
SslPolicyReference(c)=c << [sslPolicy]

# Schema for InstancesStartWithEncryptionKeyRequest
InstancesStartWithEncryptionKeyRequest(c)=c << [disks]

# Schema for LocationPolicyLocationConstraints
LocationPolicyLocationConstraints(c)=c << [maxCount]

# Schema for BackendService
BackendService(c)=c << [id,portName,securityPolicy,region,loadBalancingScheme,affinityCookieTtlSec,externalManagedMigrationState,consistentHash,customRequestHeaders,subsetting,circuitBreakers,healthChecks,port,selfLink,securitySettings,localityLbPolicies,sessionAffinity,strongSessionAffinityCookie,failoverPolicy,usedBy,logConfig,connectionTrackingPolicy,enableCDN,name,network,serviceBindings,edgeSecurityPolicy,cdnPolicy,ipAddressSelectionPolicy,localityLbPolicy,customResponseHeaders,maxStreamDuration,iap,backends,protocol,outlierDetection,fingerprint,compressionMode,creationTimestamp,metadatas,description,serviceLbPolicy,externalManagedMigrationTestingPercentage,connectionDraining,kind,timeoutSec]

# Schema for NetworkEndpointGroupCloudRun
NetworkEndpointGroupCloudRun(c)=c << [urlMask,tag,service]

# Schema for DiskInstantiationConfig
DiskInstantiationConfig(c)=c << [instantiateFrom,deviceName,customImage,autoDelete]

# Schema for ForwardingRulesScopedList
ForwardingRulesScopedList(c)=c << [forwardingRules,warning]

# Schema for BgpRouteAsPath
BgpRouteAsPath(c)=c << [asns,type]

# Schema for InstanceGroupManagersSetAutoHealingRequest
InstanceGroupManagersSetAutoHealingRequest(c)=c << [autoHealingPolicies]

# Schema for WafExpressionSet
WafExpressionSet(c)=c << [id,expressions,aliases]

# Schema for StatefulPolicyPreservedStateDiskDevice
StatefulPolicyPreservedStateDiskDevice(c)=c << [autoDelete]

# Schema for OrganizationSecurityPoliciesListAssociationsResponse
OrganizationSecurityPoliciesListAssociationsResponse(c)=c << [associations,kind]

# Schema for InterconnectMacsecPreSharedKey
InterconnectMacsecPreSharedKey(c)=c << [startTime,name]

# Schema for InstanceGroupManagersAbandonInstancesRequest
InstanceGroupManagersAbandonInstancesRequest(c)=c << [instances]

# Schema for InstantSnapshotList
InstantSnapshotList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupManagerStatus
InstanceGroupManagerStatus(c)=c << [isStable,versionTarget,allInstancesConfig,stateful,autoscaler]

# Schema for InstanceListReferrers
InstanceListReferrers(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NetworkEdgeSecurityServicesScopedList
NetworkEdgeSecurityServicesScopedList(c)=c << [networkEdgeSecurityServices,warning]

# Schema for DeprecationStatus
DeprecationStatus(c)=c << [state,obsolete,deprecated,deleted,stateOverride,replacement]

# Schema for DisksScopedList
DisksScopedList(c)=c << [warning,disks]

# Schema for Metadata
Metadata(c)=c << [fingerprint,kind,items]

# Schema for Region
Region(c)=c << [deprecated,quotaStatusWarning,name,creationTimestamp,description,supportsPzs,id,quotas,selfLink,zones,kind,status]

# Schema for CustomerEncryptionKeyProtectedDisk
CustomerEncryptionKeyProtectedDisk(c)=c << [source,diskEncryptionKey]

# Schema for NodeTemplateList
NodeTemplateList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ResourcePolicySnapshotSchedulePolicySnapshotProperties
ResourcePolicySnapshotSchedulePolicySnapshotProperties(c)=c << [labels,chainName,storageLocations,guestFlush]

# Schema for DiskResourceStatus
DiskResourceStatus(c)=c << [asyncPrimaryDisk,asyncSecondaryDisks]

# Schema for DiskTypeAggregatedList
DiskTypeAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstanceGroupManagersResumeInstancesRequest
InstanceGroupManagersResumeInstancesRequest(c)=c << [instances]

# Schema for RegionInstanceGroupManagerDeleteInstanceConfigReq
RegionInstanceGroupManagerDeleteInstanceConfigReq(c)=c << [names]

# Schema for FirewallPolicy
FirewallPolicy(c)=c << [id,ruleTupleCount,name,associations,description,rules,displayName,region,selfLink,packetMirroringRules,fingerprint,shortName,creationTimestamp,kind,selfLinkWithId,parent]

# Schema for AWSV4Signature
AWSV4Signature(c)=c << [accessKey,accessKeyVersion,accessKeyId,originRegion]

# Schema for ResourceStatus
ResourceStatus(c)=c << [upcomingMaintenance,physicalHost,scheduling]

# Schema for UrlMapsAggregatedList
UrlMapsAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for BgpRouteNetworkLayerReachabilityInformation
BgpRouteNetworkLayerReachabilityInformation(c)=c << [prefix,pathId]

# Schema for RegionInstanceGroupManagersSuspendInstancesRequest
RegionInstanceGroupManagersSuspendInstancesRequest(c)=c << [forceSuspend,instances]

# Schema for StoragePool
StoragePool(c)=c << [id,selfLink,poolProvisionedIops,labelFingerprint,name,labels,capacityProvisioningType,poolProvisionedCapacityGb,creationTimestamp,description,resourceStatus,poolProvisionedThroughput,state,zone,performanceProvisioningType,selfLinkWithId,storagePoolType,kind,status]

# Schema for XpnHostList
XpnHostList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for DistributionPolicy
DistributionPolicy(c)=c << [zones,targetShape]

# Schema for BfdStatusPacketCounts
BfdStatusPacketCounts(c)=c << [numTx,numRx,numRxRejected,numRxSuccessful]

# Schema for ErrorInfo
ErrorInfo(c)=c << [reason,domain,metadatas]

# Schema for BackendServiceUsedBy
BackendServiceUsedBy(c)=c << [reference]

# Schema for Router
Router(c)=c << [id,selfLink,encryptedInterconnectRouter,name,bgp,creationTimestamp,description,kind,md5AuthenticationKeys,nats,region,interfaces,bgpPeers,network]

# Schema for ReservationsScopedList
ReservationsScopedList(c)=c << [warning,reservations]

# Schema for AutoscalingPolicyScaleDownControl
AutoscalingPolicyScaleDownControl(c)=c << [timeWindowSec,maxScaledDownReplicas]

# Schema for SslCertificate
SslCertificate(c)=c << [id,selfLink,managed,expireTime,subjectAlternativeNames,name,type,creationTimestamp,kind,privateKey,certificate,region,selfManaged,description]

# Schema for InstanceReference
InstanceReference(c)=c << [instance]

# Schema for AuditLogConfig
AuditLogConfig(c)=c << [exemptedMembers,logType,ignoreChildExemptions]

# Schema for HealthCheckService
HealthCheckService(c)=c << [id,healthStatusAggregationPolicy,name,networkEndpointGroups,kind,region,healthStatusAggregationStrategy,selfLink,healthChecks,fingerprint,creationTimestamp,notificationEndpoints,description]

# Schema for LicenseResourceRequirements
LicenseResourceRequirements(c)=c << [minMemoryMb,minGuestCpuCount]

# Schema for NetworkEndpointGroupList
NetworkEndpointGroupList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk(c)=c << [interface,diskSizeGb]

# Schema for TargetSslProxiesSetBackendServiceRequest
TargetSslProxiesSetBackendServiceRequest(c)=c << [service]

# Schema for OperationAggregatedList
OperationAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for RouterStatusNatStatusNatRuleStatus
RouterStatusNatStatusNatRuleStatus(c)=c << [drainNatIps,ruleNumber,activeNatIps,minExtraIpsNeeded,numVmEndpointsWithNatMappings]

# Schema for StructuredEntries
StructuredEntries(c)=c << [entries]

# Schema for BackendBucketCdnPolicyBypassCacheOnRequestHeader
BackendBucketCdnPolicyBypassCacheOnRequestHeader(c)=c << [headerName]

# Schema for RolloutPolicy
RolloutPolicy(c)=c << [locationRolloutPolicies,defaultRolloutTime]

# Schema for RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(c)=c << [name,type,priority,rules,displayName]

# Schema for Subsetting
Subsetting(c)=c << [policy,subsetSize]

# Schema for AutoscalingPolicyCustomMetricUtilization
AutoscalingPolicyCustomMetricUtilization(c)=c << [utilizationTargetType,metric,utilizationTarget,singleInstanceAssignment,filter]

# Schema for SecurityPolicyRule
SecurityPolicyRule(c)=c << [headerAction,targetResources,ruleTupleCount,targetServiceAccounts,ruleNumber,match,preconfiguredWafConfig,networkMatch,direction,enableLogging,redirectOptions,action,description,preview,rateLimitOptions,kind,priority]

# Schema for PublicDelegatedPrefixAggregatedList
PublicDelegatedPrefixAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for Quota
Quota(c)=c << [owner,usage,limit,metric]

# Schema for NetworkEndpointGroupsListNetworkEndpoints
NetworkEndpointGroupsListNetworkEndpoints(c)=c << [id,warning,items,kind,nextPageToken]

# Schema for AdvancedMachineFeatures
AdvancedMachineFeatures(c)=c << [turboMode,enableNestedVirtualization,enableUefiNetworking,threadsPerCore,visibleCoreCount,performanceMonitoringUnit]

# Schema for LicenseCodeLicenseAlias
LicenseCodeLicenseAlias(c)=c << [selfLink,description]

# Schema for BackendServiceLogConfig
BackendServiceLogConfig(c)=c << [enable,optionalFields,optionalMode,sampleRate]

# Schema for RegionSetLabelsRequest
RegionSetLabelsRequest(c)=c << [labelFingerprint,labels]

# Schema for NetworkEndpointGroupLbNetworkEndpointGroup
NetworkEndpointGroupLbNetworkEndpointGroup(c)=c << [zone,subnetwork,network,defaultPort]

# Schema for InterconnectOutageNotification
InterconnectOutageNotification(c)=c << [endTime,state,startTime,name,source,description,affectedCircuits,issueType]

# Schema for InstanceGroupAggregatedList
InstanceGroupAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for ReservationAffinity
ReservationAffinity(c)=c << [consumeReservationType,values,key]

# Schema for PacketMirroringAggregatedList
PacketMirroringAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for HealthCheck
HealthCheck(c)=c << [id,checkIntervalSec,selfLink,sslHealthCheck,logConfig,name,type,httpsHealthCheck,region,grpcHealthCheck,tcpHealthCheck,healthyThreshold,sourceRegions,unhealthyThreshold,httpHealthCheck,creationTimestamp,http2HealthCheck,description,kind,timeoutSec]

# Schema for NodeTypeList
NodeTypeList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RoutersPreviewResponse
RoutersPreviewResponse(c)=c << [resource]

# Schema for RouterStatusNatStatus
RouterStatusNatStatus(c)=c << [ruleStatus,userAllocatedNatIps,autoAllocatedNatIps,name,drainAutoAllocatedNatIps,userAllocatedNatIpResources,drainUserAllocatedNatIps,numVmEndpointsWithNatMappings,minExtraNatIpsNeeded]

# Schema for StatefulPolicyPreservedState
StatefulPolicyPreservedState(c)=c << [externalIPs,disks,internalIPs]

# Schema for ShieldedVmIntegrityPolicy
ShieldedVmIntegrityPolicy(c)=c << [updateAutoLearnPolicy]

# Schema for CustomerEncryptionKey
CustomerEncryptionKey(c)=c << [kmsKeyName,rsaEncryptedKey,rawKey,sha256,kmsKeyServiceAccount]

# Schema for ExchangedPeeringRoute
ExchangedPeeringRoute(c)=c << [destRange,nextHopRegion,priority,imported,type]

# Schema for LicenseCode
LicenseCode(c)=c << [id,selfLink,creationTimestamp,description,kind,state,transferable,name,licenseAlias]

# Schema for PathRule
PathRule(c)=c << [routeAction,urlRedirect,service,paths,customErrorResponsePolicy]

# Schema for NetworkEndpointGroupsAttachEndpointsRequest
NetworkEndpointGroupsAttachEndpointsRequest(c)=c << [networkEndpoints]

# Schema for InstanceManagedByIgmError
InstanceManagedByIgmError(c)=c << [instanceActionDetails,error,timestamp]

# Schema for InstanceGroupManagerAutoHealingPolicy
InstanceGroupManagerAutoHealingPolicy(c)=c << [initialDelaySec,healthCheck]

# Schema for InstanceGroupManagersListPerInstanceConfigsResp
InstanceGroupManagersListPerInstanceConfigsResp(c)=c << [warning,nextPageToken,items]

# Schema for VmEndpointNatMappingsInterfaceNatMappings
VmEndpointNatMappingsInterfaceNatMappings(c)=c << [natIpPortRanges,sourceVirtualIp,drainNatIpPortRanges,sourceAliasIpRange,numTotalDrainNatPorts,numTotalNatPorts,ruleMappings]

# Schema for SecurityPolicyReference
SecurityPolicyReference(c)=c << [securityPolicy]

# Schema for InstantSnapshotResourceStatus
InstantSnapshotResourceStatus(c)=c << [storageSizeBytes]

# Schema for AcceleratorTypeAggregatedList
AcceleratorTypeAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for FirewallPolicyRuleMatcher
FirewallPolicyRuleMatcher(c)=c << [srcRegionCodes,destNetworkScope,srcSecureTags,destRegionCodes,destFqdns,destIpRanges,destThreatIntelligences,srcIpRanges,layer4Configs,destAddressGroups,srcThreatIntelligences,srcFqdns,srcAddressGroups,srcNetworkScope,srcNetworks]

# Schema for Screenshot
Screenshot(c)=c << [contents,kind]

# Schema for BackendServiceCdnPolicyBypassCacheOnRequestHeader
BackendServiceCdnPolicyBypassCacheOnRequestHeader(c)=c << [headerName]

# Schema for BackendServiceLocalityLoadBalancingPolicyConfigPolicy
BackendServiceLocalityLoadBalancingPolicyConfigPolicy(c)=c << [name]

# Schema for InstanceGroupManagerResourcePolicies
InstanceGroupManagerResourcePolicies(c)=c << [workloadPolicy]

# Schema for InstanceProperties
InstanceProperties(c)=c << [machineType,serviceAccounts,keyRevocationActionType,description,privateIpv6GoogleAccess,displayDevice,postKeyRevocationActionType,minCpuPlatform,reservationAffinity,partnerMetadata,scheduling,shieldedInstanceConfig,resourcePolicies,canIpForward,shieldedVmConfig,networkPerformanceConfig,disks,networkInterfaces,guestAccelerators,labels,tags,resourceManagerTags,confidentialInstanceConfig,metadata,advancedMachineFeatures]

# Schema for ResourceGroupReference
ResourceGroupReference(c)=c << [group]

# Schema for TargetPoolsRemoveInstanceRequest
TargetPoolsRemoveInstanceRequest(c)=c << [instances]

# Schema for UsableSubnetworkSecondaryRange
UsableSubnetworkSecondaryRange(c)=c << [rangeName,ipCidrRange]

# Schema for InterconnectMacsec
InterconnectMacsec(c)=c << [preSharedKeys,failOpen]

# Schema for RouterBgpPeerCustomLearnedIpRange
RouterBgpPeerCustomLearnedIpRange(c)=c << [range]

# Schema for PacketMirroringNetworkInfo
PacketMirroringNetworkInfo(c)=c << [url,canonicalUrl]

# Schema for SubnetworksSetPrivateIpGoogleAccessRequest
SubnetworksSetPrivateIpGoogleAccessRequest(c)=c << [privateIpGoogleAccess]

# Schema for HealthCheckLogConfig
HealthCheckLogConfig(c)=c << [enable]

# Schema for SslCertificateManagedSslCertificate
SslCertificateManagedSslCertificate(c)=c << [domains,domainStatus,status]

# Schema for ManagedInstance
ManagedInstance(c)=c << [id,instanceStatus,name,preservedStateFromPolicy,propertiesFromFlexibilityPolicy,currentAction,version,preservedStateFromConfig,instance,instanceHealth,targetStatus,allInstancesConfig,lastAttempt]

# Schema for HttpHealthCheckList
HttpHealthCheckList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for GlobalSetLabelsRequest
GlobalSetLabelsRequest(c)=c << [labelFingerprint,labels]

# Schema for HealthStatusForNetworkEndpoint
HealthStatusForNetworkEndpoint(c)=c << [healthCheckService,ipv6HealthState,healthState,healthCheck,forwardingRule,backendService]

# Schema for Instance
Instance(c)=c << [hostname,keyRevocationActionType,id,postKeyRevocationActionType,params,displayDevice,zone,machineType,selfLink,serviceAccounts,minCpuPlatform,reservationAffinity,partnerMetadata,scheduling,startRestricted,shieldedInstanceConfig,labelFingerprint,cpuPlatform,resourcePolicies,canIpForward,shieldedVmConfig,networkPerformanceConfig,satisfiesPzs,sourceMachineImageEncryptionKey,shieldedVmIntegrityPolicy,disks,networkInterfaces,statusMessage,name,instanceEncryptionKey,guestAccelerators,labels,satisfiesPzi,tags,confidentialInstanceConfig,deletionProtection,fingerprint,metadata,creationTimestamp,advancedMachineFeatures,eraseWindowsVssSignature,description,privateIpv6GoogleAccess,lastStopTimestamp,kind,status,sourceMachineImage,shieldedInstanceIntegrityPolicy,lastSuspendedTimestamp,lastStartTimestamp,resourceStatus]

# Schema for InstanceGroupManagerUpdatePolicy
InstanceGroupManagerUpdatePolicy(c)=c << [replacementMethod,instanceRedistributionType,type,maxSurge,maxUnavailable,mostDisruptiveAllowedAction,minimalAction,minReadySec]

# Schema for HttpsHealthCheckList
HttpsHealthCheckList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for AutoscalingPolicyScalingSchedule
AutoscalingPolicyScalingSchedule(c)=c << [minRequiredReplicas,disabled,durationSec,description,schedule,timeZone]

# Schema for ForwardingRuleServiceDirectoryRegistration
ForwardingRuleServiceDirectoryRegistration(c)=c << [service,serviceDirectoryRegion,namespace]

# Schema for ResourcePolicySnapshotSchedulePolicyRetentionPolicy
ResourcePolicySnapshotSchedulePolicyRetentionPolicy(c)=c << [maxRetentionDays,onSourceDiskDelete]

# Schema for VpnGatewayList
VpnGatewayList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for MachineTypeAggregatedList
MachineTypeAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for NetworkEndpointGroupsDetachEndpointsRequest
NetworkEndpointGroupsDetachEndpointsRequest(c)=c << [networkEndpoints]

# Schema for ResourceCommitment
ResourceCommitment(c)=c << [amount,type,acceleratorType]

# Schema for GlobalNetworkEndpointGroupsAttachEndpointsRequest
GlobalNetworkEndpointGroupsAttachEndpointsRequest(c)=c << [networkEndpoints]

# Schema for UrlMapReference
UrlMapReference(c)=c << [urlMap]

# Schema for InstancesSetMachineResourcesRequest
InstancesSetMachineResourcesRequest(c)=c << [guestAccelerators]

# Schema for UsableSubnetworksAggregatedList
UsableSubnetworksAggregatedList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RegionInstanceGroupManagersDeleteInstancesRequest
RegionInstanceGroupManagersDeleteInstancesRequest(c)=c << [instances,skipInstancesOnValidationError]

# Schema for HttpFilterConfig
HttpFilterConfig(c)=c << [filterName,config,configTypeUrl]

# Schema for VpnGatewayStatus
VpnGatewayStatus(c)=c << [vpnConnections]

# Schema for HttpRouteRuleMatch
HttpRouteRuleMatch(c)=c << [prefixMatch,metadataFilters,fullPathMatch,ignoreCase,headerMatches,pathTemplateMatch,queryParameterMatches,regexMatch]

# Schema for RegionInstanceGroupManagerUpdateInstanceConfigReq
RegionInstanceGroupManagerUpdateInstanceConfigReq(c)=c << [perInstanceConfigs]

# Schema for SslPoliciesAggregatedList
SslPoliciesAggregatedList(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for PacketMirroringMirroredResourceInfoSubnetInfo
PacketMirroringMirroredResourceInfoSubnetInfo(c)=c << [url,canonicalUrl]

# Schema for ManagedInstanceVersion
ManagedInstanceVersion(c)=c << [instanceTemplate,name]

# Schema for ServerBinding
ServerBinding(c)=c << [type]

# Schema for NetworkEndpointGroupAggregatedList
NetworkEndpointGroupAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for TargetReference
TargetReference(c)=c << [target]

# Schema for RegionInstanceGroupsListInstances
RegionInstanceGroupsListInstances(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for SecurityPolicyRulePreconfiguredWafConfigExclusion
SecurityPolicyRulePreconfiguredWafConfigExclusion(c)=c << [requestQueryParamsToExclude,targetRuleIds,requestUrisToExclude,requestHeadersToExclude,requestCookiesToExclude,targetRuleSet]

# Schema for HealthChecksAggregatedList
HealthChecksAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions
SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions(c)=c << [actionTokenSiteKeys,sessionTokenSiteKeys]

# Schema for Tags
Tags(c)=c << [fingerprint,items]

# Schema for InstanceManagedByIgmErrorManagedInstanceError
InstanceManagedByIgmErrorManagedInstanceError(c)=c << [code,message]

# Schema for ResourcePolicyGroupPlacementPolicy
ResourcePolicyGroupPlacementPolicy(c)=c << [maxDistance,vmCount,tpuTopology,collocation,sliceCount,availabilityDomainCount]

# Schema for FirewallLogConfig
FirewallLogConfig(c)=c << [enable,metadata]

# Schema for VpnGatewaysScopedList
VpnGatewaysScopedList(c)=c << [vpnGateways,warning]

# Schema for VpnTunnelList
VpnTunnelList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for MetadataFilterLabelMatch
MetadataFilterLabelMatch(c)=c << [value,name]

# Schema for InstanceSettings
InstanceSettings(c)=c << [zone,kind,fingerprint,metadata]

# Schema for InstanceGroupManagerActionsSummary
InstanceGroupManagerActionsSummary(c)=c << [restarting,resuming,starting,refreshing,recreating,stopping,deleting,verifying,creatingWithoutRetries,abandoning,creating,none,suspending]

# Schema for TCPHealthCheck
TCPHealthCheck(c)=c << [proxyHeader,portName,request,port,response,portSpecification]

# Schema for TargetTcpProxiesScopedList
TargetTcpProxiesScopedList(c)=c << [targetTcpProxies,warning]

# Schema for Image
Image(c)=c << [architecture,satisfiesPzs,imageEncryptionKey,id,sourceSnapshotEncryptionKey,sourceDiskId,sourceSnapshot,licenseCodes,deprecated,sourceImageId,sourceType,sourceDiskEncryptionKey,shieldedInstanceInitialState,family,selfLink,rolloutOverride,sourceImageEncryptionKey,sourceDisk,rawDisk,labelFingerprint,sourceSnapshotId,diskSizeGb,name,labels,satisfiesPzi,userLicenses,sourceImage,storageLocations,guestOsFeatures,licenses,creationTimestamp,enableConfidentialCompute,locked,description,archiveSizeBytes,kind,status]

# Schema for NodeTemplatesScopedList
NodeTemplatesScopedList(c)=c << [warning,nodeTemplates]

# Schema for Reference
Reference(c)=c << [referenceType,referrer,target,kind]

# Schema for HealthCheckList
HealthCheckList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for HttpHeaderMatch
HttpHeaderMatch(c)=c << [regexMatch,suffixMatch,invertMatch,exactMatch,headerName,presentMatch,prefixMatch,rangeMatch]

# Schema for CustomErrorResponsePolicy
CustomErrorResponsePolicy(c)=c << [errorResponseRules,errorService]

# Schema for MachineTypeList
MachineTypeList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ResourcePolicyInstanceSchedulePolicySchedule
ResourcePolicyInstanceSchedulePolicySchedule(c)=c << [schedule]

# Schema for DisksAddResourcePoliciesRequest
DisksAddResourcePoliciesRequest(c)=c << [resourcePolicies]

# Schema for CacheKeyPolicy
CacheKeyPolicy(c)=c << [includeHost,queryStringWhitelist,includeProtocol,includeHttpHeaders,includeQueryString,queryStringBlacklist,includeNamedCookies]

# Schema for SecurityPolicyRuleMatcher
SecurityPolicyRuleMatcher(c)=c << [versionedExpr,exprOptions,expr,config]

# Schema for InstanceGroupManagerInstanceLifecyclePolicy
InstanceGroupManagerInstanceLifecyclePolicy(c)=c << [forceUpdateOnRepair,defaultActionOnFailure]

# Schema for Scheduling
Scheduling(c)=c << [localSsdRecoveryTimeout,maintenanceFreezeDurationHours,preemptible,nodeAffinities,onHostMaintenance,minNodeCpus,locationHint,maintenanceInterval,onInstanceStopAction,instanceTerminationAction,availabilityDomain,maxRunDuration,terminationTime,automaticRestart,hostErrorTimeoutSeconds,provisioningModel]

# Schema for SslCertificateList
SslCertificateList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for AttachedDiskInitializeParams
AttachedDiskInitializeParams(c)=c << [sourceSnapshot,sourceImageEncryptionKey,resourceManagerTags,provisionedThroughput,sourceSnapshotEncryptionKey,replicaZones,resourcePolicies,onUpdateAction,architecture,multiWriter,diskSizeGb,labels,sourceInstantSnapshot,sourceImage,guestOsFeatures,licenses,diskName,enableConfidentialCompute,storagePool,description,provisionedIops,diskType]

# Schema for StoragePoolAggregatedList
StoragePoolAggregatedList(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for InstancesGetEffectiveFirewallsResponse
InstancesGetEffectiveFirewallsResponse(c)=c << [firewalls,firewallPolicys,organizationFirewalls]

# Schema for InterconnectDiagnosticsARPEntry
InterconnectDiagnosticsARPEntry(c)=c << [macAddress,ipAddress]

# Schema for TestPermissionsResponse
TestPermissionsResponse(c)=c << [permissions]

# Schema for InstanceMoveRequest
InstanceMoveRequest(c)=c << [targetInstance,destinationZone]

# Schema for LocationPolicyLocation
LocationPolicyLocation(c)=c << [preference,constraints]

# Schema for ProjectsEnableXpnResourceRequest
ProjectsEnableXpnResourceRequest(c)=c << [xpnResource]

# Schema for InstanceGroupManagerAggregatedList
InstanceGroupManagerAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstancesSetLabelsRequest
InstancesSetLabelsRequest(c)=c << [labelFingerprint,labels]

# Schema for ExchangedPeeringRoutesList
ExchangedPeeringRoutesList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NetworkRoutingConfig
NetworkRoutingConfig(c)=c << [bgpBestPathSelectionMode,routingMode,bgpInterRegionCost,bgpAlwaysCompareMed]

# Schema for GlobalOrganizationSetPolicyRequest
GlobalOrganizationSetPolicyRequest(c)=c << [policy,bindings,etag]

# Schema for InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy
InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy(c)=c << [id,rules]

# Schema for CacheInvalidationRule
CacheInvalidationRule(c)=c << [host,path]

# Schema for RouterStatusBgpPeerStatus
RouterStatusBgpPeerStatus(c)=c << [routerApplianceInstance,numLearnedRoutes,name,md5AuthEnabled,ipv6NexthopAddress,bfdStatus,ipv4NexthopAddress,advertisedRoutes,state,enableIpv6,peerIpv6NexthopAddress,enableIpv4,peerIpv4NexthopAddress,statusReason,uptime,uptimeSeconds,status,ipAddress,peerIpAddress,linkedVpnTunnel]

# Schema for RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse(c)=c << [firewalls,firewallPolicys]

# Schema for InterconnectAttachmentAggregatedList
InterconnectAttachmentAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for DiskParams
DiskParams(c)=c << [resourceManagerTags]

# Schema for SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig(c)=c << [ruleVisibility,enable,thresholdConfigs]

# Schema for NodeGroupList
NodeGroupList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RouterNatSubnetworkToNat
RouterNatSubnetworkToNat(c)=c << [sourceIpRangesToNat,secondaryIpRangeNames,name]

# Schema for InstanceGroupManagersUpdatePerInstanceConfigsReq
InstanceGroupManagersUpdatePerInstanceConfigsReq(c)=c << [perInstanceConfigs]

# Schema for SecurityPolicyRulePreconfiguredWafConfig
SecurityPolicyRulePreconfiguredWafConfig(c)=c << [exclusions]

# Schema for WeightedBackendService
WeightedBackendService(c)=c << [weight,headerAction,backendService]

# Schema for ServiceAttachmentAggregatedList
ServiceAttachmentAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for ProjectsListXpnHostsRequest
ProjectsListXpnHostsRequest(c)=c << [organization]

# Schema for NodeGroupAutoscalingPolicy
NodeGroupAutoscalingPolicy(c)=c << [minNodes,mode,maxNodes]

# Schema for InstancesSetMachineTypeRequest
InstancesSetMachineTypeRequest(c)=c << [machineType]

# Schema for TargetHttpProxyList
TargetHttpProxyList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for Zone
Zone(c)=c << [id,selfLink,name,availableCpuPlatforms,creationTimestamp,description,supportsPzs,deprecated,region,kind,status]

# Schema for VpnGateway
VpnGateway(c)=c << [id,region,selfLink,labelFingerprint,name,stackType,creationTimestamp,kind,network,labels,gatewayIpVersion,vpnInterfaces,description]

# Schema for RouteAsPath
RouteAsPath(c)=c << [asLists,pathSegmentType]

# Schema for UrlMapTestHeader
UrlMapTestHeader(c)=c << [value,name]

# Schema for FutureReservationStatusExistingMatchingUsageInfo
FutureReservationStatusExistingMatchingUsageInfo(c)=c << [count,timestamp]

# Schema for InterconnectList
InterconnectList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RegionInstanceGroupManagersSetTargetPoolsRequest
RegionInstanceGroupManagersSetTargetPoolsRequest(c)=c << [targetPools,fingerprint]

# Schema for NetworkAttachmentsScopedList
NetworkAttachmentsScopedList(c)=c << [warning,networkAttachments]

# Schema for FutureReservationSpecificSKUProperties
FutureReservationSpecificSKUProperties(c)=c << [instanceProperties,sourceInstanceTemplate,totalCount]

# Schema for HTTP2HealthCheck
HTTP2HealthCheck(c)=c << [proxyHeader,portName,requestPath,port,response,portSpecification,host]

# Schema for BackendServiceReference
BackendServiceReference(c)=c << [backendService]

# Schema for UrlMapList
UrlMapList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NodeType
NodeType(c)=c << [id,selfLink,cpuPlatform,name,description,kind,zone,deprecated,creationTimestamp,localSsdGb,guestCpus,memoryMb]

# Schema for BackendServiceCdnPolicyNegativeCachingPolicy
BackendServiceCdnPolicyNegativeCachingPolicy(c)=c << [code,ttl]

# Schema for AutoscalingPolicyCpuUtilization
AutoscalingPolicyCpuUtilization(c)=c << [predictiveMethod,utilizationTarget]

# Schema for LogConfigDataAccessOptions
LogConfigDataAccessOptions(c)=c << [logMode]

# Schema for CorsPolicy
CorsPolicy(c)=c << [allowHeaders,allowOrigins,allowMethods,maxAge,disabled,allowOriginRegexes,exposeHeaders,allowCredentials]

# Schema for TargetInstance
TargetInstance(c)=c << [zone,selfLink,securityPolicy,instance,name,network,creationTimestamp,description,kind,id,natPolicy]

# Schema for InstanceGroupManagerAllInstancesConfig
InstanceGroupManagerAllInstancesConfig(c)=c << [properties]

# Schema for InstancesResumeRequest
InstancesResumeRequest(c)=c << [disks,instanceEncryptionKey]

# Schema for RoutersListBgpRoutes
RoutersListBgpRoutes(c)=c << [id,selfLink,result,etag,warning,unreachables,kind,nextPageToken]

# Schema for ProjectsSetManagedProtectionTierRequest
ProjectsSetManagedProtectionTierRequest(c)=c << [managedProtectionTier]

# Schema for SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig
SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig(c)=c << [autoDeployImpactedBaselineThreshold,name,detectionLoadThreshold,autoDeployExpirationSec,trafficGranularityConfigs,autoDeployLoadThreshold,detectionAbsoluteQps,detectionRelativeToBaselineQps,autoDeployConfidenceThreshold]

# Schema for InstanceGroupManagerStandbyPolicy
InstanceGroupManagerStandbyPolicy(c)=c << [mode,initialDelaySec]

# Schema for ConsistentHashLoadBalancerSettings
ConsistentHashLoadBalancerSettings(c)=c << [minimumRingSize,httpHeaderName,httpCookie]

# Schema for ResourcePolicySnapshotSchedulePolicySchedule
ResourcePolicySnapshotSchedulePolicySchedule(c)=c << [hourlySchedule,weeklySchedule,dailySchedule]

# Schema for VpnTunnelsScopedList
VpnTunnelsScopedList(c)=c << [warning,vpnTunnels]

# Schema for SecurityPolicyDdosProtectionConfig
SecurityPolicyDdosProtectionConfig(c)=c << [ddosProtection]

# Schema for TargetHttpsProxiesSetQuicOverrideRequest
TargetHttpsProxiesSetQuicOverrideRequest(c)=c << [quicOverride]

# Schema for NodeGroupsSetNodeTemplateRequest
NodeGroupsSetNodeTemplateRequest(c)=c << [nodeTemplate]

# Schema for ShieldedVmConfig
ShieldedVmConfig(c)=c << [enableIntegrityMonitoring,enableVtpm,enableSecureBoot]

# Schema for InstanceGroupManagersSuspendInstancesRequest
InstanceGroupManagersSuspendInstancesRequest(c)=c << [forceSuspend,instances]

# Schema for InstanceGroupManagerParams
InstanceGroupManagerParams(c)=c << [resourceManagerTags]

# Schema for InterconnectAttachmentPartnerMetadata
InterconnectAttachmentPartnerMetadata(c)=c << [partnerName,interconnectName,portalUrl]

# Schema for TargetTcpProxiesSetProxyHeaderRequest
TargetTcpProxiesSetProxyHeaderRequest(c)=c << [proxyHeader]

# Schema for TargetSslProxiesSetSslCertificatesRequest
TargetSslProxiesSetSslCertificatesRequest(c)=c << [sslCertificates]

# Schema for InstancesSetServiceAccountRequest
InstancesSetServiceAccountRequest(c)=c << [email,scopes]

# Schema for InstancesBulkInsertOperationMetadata
InstancesBulkInsertOperationMetadata(c)=c << [perLocationStatus]

# Schema for TargetPool
TargetPool(c)=c << [id,region,securityPolicy,sessionAffinity,name,instances,creationTimestamp,kind,backupPool,selfLink,healthChecks,failoverRatio,description]

# Schema for VpnTunnelAggregatedList
VpnTunnelAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for LicensesListResponse
LicensesListResponse(c)=c << [id,selfLink,warning,nextPageToken,items]

# Schema for ServiceAttachmentConnectedEndpoint
ServiceAttachmentConnectedEndpoint(c)=c << [endpoint,propagatedConnectionCount,status,pscConnectionId,consumerNetwork]

# Schema for FirewallPolicyRule
FirewallPolicyRule(c)=c << [match,targetResources,ruleTupleCount,targetServiceAccounts,disabled,securityProfileGroup,tlsInspect,direction,targetSecureTags,enableLogging,action,ruleName,description,kind,priority]

# Schema for InterconnectDiagnosticsLinkLACPStatus
InterconnectDiagnosticsLinkLACPStatus(c)=c << [neighborSystemId,state,googleSystemId]

# Schema for LocalizedMessage
LocalizedMessage(c)=c << [message,locale]

# Schema for RegionAddressesMoveRequest
RegionAddressesMoveRequest(c)=c << [description,destinationAddress]

# Schema for Snapshot
Snapshot(c)=c << [sourceDisk,architecture,chainName,id,sourceDiskId,licenseCodes,sourceInstantSnapshotId,locationHint,snapshotEncryptionKey,selfLink,sourceInstantSnapshotEncryptionKey,sourceDiskEncryptionKey,creationSizeBytes,labelFingerprint,satisfiesPzs,storageBytes,name,storageBytesStatus,diskSizeGb,sourceSnapshotSchedulePolicy,labels,sourceInstantSnapshot,satisfiesPzi,sourceSnapshotSchedulePolicyId,autoCreated,sourceDiskForRecoveryCheckpoint,userLicenses,storageLocations,guestOsFeatures,licenses,creationTimestamp,guestFlush,enableConfidentialCompute,description,downloadBytes,snapshotType,kind,status]

# Schema for RegionInstanceGroupManagersResizeAdvancedRequest
RegionInstanceGroupManagersResizeAdvancedRequest(c)=c << [targetSize,noCreationRetries]

# Schema for InstanceTemplatesScopedList
InstanceTemplatesScopedList(c)=c << [warning,instanceTemplates]

# Schema for RouterNatRule
RouterNatRule(c)=c << [match,ruleNumber,action,description]

# Schema for ResourcePolicyResourceStatus
ResourcePolicyResourceStatus(c)=c << [instanceSchedulePolicy]

# Schema for XpnResourceId
XpnResourceId(c)=c << [id,type]

# Schema for BackendServiceListUsable
BackendServiceListUsable(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for StoragePoolsScopedList
StoragePoolsScopedList(c)=c << [warning,storagePools]

# Schema for TargetInstanceAggregatedList
TargetInstanceAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstancesSetMinCpuPlatformRequest
InstancesSetMinCpuPlatformRequest(c)=c << [minCpuPlatform]

# Schema for SecurityPolicyList
SecurityPolicyList(c)=c << [id,warning,items,kind,nextPageToken]

# Schema for InstantSnapshot
InstantSnapshot(c)=c << [selfLink,sourceDisk,labelFingerprint,architecture,satisfiesPzs,creationTimestamp,description,resourceStatus,id,sourceDiskId,zone,region,diskSizeGb,name,labels,satisfiesPzi,selfLinkWithId,kind,status]

# Schema for InstancesAddResourcePoliciesRequest
InstancesAddResourcePoliciesRequest(c)=c << [resourcePolicies]

# Schema for SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
SecurityPolicyAdvancedOptionsConfigJsonCustomConfig(c)=c << [contentTypes]

# Schema for NodeTypesScopedList
NodeTypesScopedList(c)=c << [warning,nodeTypes]

# Schema for FirewallPolicyList
FirewallPolicyList(c)=c << [id,warning,items,kind,nextPageToken]

# Schema for ShareSettingsProjectConfig
ShareSettingsProjectConfig(c)=c << [projectId]

# Schema for SslPolicy
SslPolicy(c)=c << [selfLink,profile,name,description,kind,customFeatures,id,enabledFeatures,warnings,region,minTlsVersion,fingerprint,creationTimestamp]

# Schema for TargetSslProxy
TargetSslProxy(c)=c << [service,selfLink,sslPolicy,certificateMap,name,sslCertificates,creationTimestamp,description,kind,id,proxyHeader]

# Schema for PreconfiguredWafSet
PreconfiguredWafSet(c)=c << [expressionSets]

# Schema for StoragePoolTypeList
StoragePoolTypeList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for SourceDiskEncryptionKey
SourceDiskEncryptionKey(c)=c << [sourceDisk,diskEncryptionKey]

# Schema for InstanceTemplateList
InstanceTemplateList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ResourcePolicyWorkloadPolicy
ResourcePolicyWorkloadPolicy(c)=c << [type]

# Schema for VpnGatewaysGetStatusResponse
VpnGatewaysGetStatusResponse(c)=c << [result]

# Schema for PathMatcher
PathMatcher(c)=c << [defaultCustomErrorResponsePolicy,defaultService,headerAction,defaultUrlRedirect,routeRules,pathRules,name,defaultRouteAction,description]

# Schema for FutureReservationsAggregatedListResponse
FutureReservationsAggregatedListResponse(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for ZoneSetPolicyRequest
ZoneSetPolicyRequest(c)=c << [policy,bindings,etag]

# Schema for HttpRedirectAction
HttpRedirectAction(c)=c << [httpsRedirect,stripQuery,redirectResponseCode,pathRedirect,hostRedirect,prefixRedirect]

# Schema for RoutePolicyPolicyTerm
RoutePolicyPolicyTerm(c)=c << [match,actions,priority]

# Schema for Interconnect
Interconnect(c)=c << [state,googleReferenceId,macsecEnabled,creationTimestamp,peerIpAddress,id,operationalStatus,circuitInfos,googleIpAddress,selfLink,macsec,requestedLinkCount,expectedOutages,interconnectAttachments,labelFingerprint,customerName,satisfiesPzs,provisionedLinkCount,name,availableFeatures,requestedFeatures,location,labels,nocContactEmail,remoteLocation,adminEnabled,linkType,description,kind,interconnectType]

# Schema for FutureReservationStatus
FutureReservationStatus(c)=c << [autoCreatedReservations,lastKnownGoodState,existingMatchingUsageInfo,lockTime,fulfilledCount,procurementStatus,amendmentStatus,specificSkuProperties]

# Schema for Binding
Binding(c)=c << [members,condition,bindingId,role]

# Schema for StatefulPolicy
StatefulPolicy(c)=c << [preservedState]

# Schema for CircuitBreakers
CircuitBreakers(c)=c << [connectTimeout,maxRequests,maxRequestsPerConnection,maxRetries,maxPendingRequests,maxConnections]

# Schema for InstanceGroupManagersResizeAdvancedRequest
InstanceGroupManagersResizeAdvancedRequest(c)=c << [targetSize,noCreationRetries]

# Schema for HttpRouteRule
HttpRouteRule(c)=c << [headerAction,httpFilterMetadata,routeAction,httpFilterConfigs,urlRedirect,service,customErrorResponsePolicy,description,priority,matchRules]

# Schema for NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter
NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter(c)=c << [networkEndpoint]

# Schema for RouterAdvertisedIpRange
RouterAdvertisedIpRange(c)=c << [range,description]

# Schema for SecurityPolicyRuleHttpHeaderAction
SecurityPolicyRuleHttpHeaderAction(c)=c << [requestHeadersToAdds]

# Schema for RegionInstanceGroupManagersListInstanceConfigsResp
RegionInstanceGroupManagersListInstanceConfigsResp(c)=c << [warning,nextPageToken,items]

# Schema for UrlMapsValidateResponse
UrlMapsValidateResponse(c)=c << [result]

# Schema for AutoscalerList
AutoscalerList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ShieldedVmIdentityEntry
ShieldedVmIdentityEntry(c)=c << [ekPub,ekCert]

# Schema for BackendServiceFailoverPolicy
BackendServiceFailoverPolicy(c)=c << [disableConnectionDrainOnFailover,failoverRatio,dropTrafficIfUnhealthy]

# Schema for TargetInstanceList
TargetInstanceList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupsAddInstancesRequest
InstanceGroupsAddInstancesRequest(c)=c << [instances]

# Schema for ManagedInstancePropertiesFromFlexibilityPolicy
ManagedInstancePropertiesFromFlexibilityPolicy(c)=c << [machineType,provisioningModel]

# Schema for PacketIntervals
PacketIntervals(c)=c << [numIntervals,type,maxMs,avgMs,duration,minMs]

# Schema for PerInstanceConfig
PerInstanceConfig(c)=c << [preservedState,name,fingerprint,status]

# Schema for Reservation
Reservation(c)=c << [deleteAtTime,resourcePolicies,satisfiesPzs,name,creationTimestamp,description,id,commitment,zone,shareSettings,deleteAfterDuration,selfLink,reservationSharingPolicy,specificReservationRequired,kind,status,aggregateReservation,specificReservation,resourceStatus]

# Schema for SslPoliciesList
SslPoliciesList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ResourcePolicy
ResourcePolicy(c)=c << [snapshotSchedulePolicy,region,name,creationTimestamp,resourceStatus,id,instanceSchedulePolicy,groupPlacementPolicy,selfLink,description,workloadPolicy,diskConsistencyGroupPolicy,kind,status]

# Schema for TargetHttpProxiesScopedList
TargetHttpProxiesScopedList(c)=c << [warning,targetHttpProxies]

# Schema for TargetHttpsProxiesSetCertificateMapRequest
TargetHttpsProxiesSetCertificateMapRequest(c)=c << [certificateMap]

# Schema for DistributionPolicyZoneConfiguration
DistributionPolicyZoneConfiguration(c)=c << [zone]

# Schema for ResourcePolicyWeeklyCycle
ResourcePolicyWeeklyCycle(c)=c << [dayOfWeeks]

# Schema for FutureReservationTimeWindow
FutureReservationTimeWindow(c)=c << [endTime,startTime,duration]

# Schema for ShieldedInstanceIntegrityPolicy
ShieldedInstanceIntegrityPolicy(c)=c << [updateAutoLearnPolicy]

# Schema for SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig
SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig(c)=c << [enforceOnKeyType,enforceOnKeyName]

# Schema for UrlRewrite
UrlRewrite(c)=c << [pathTemplateRewrite,pathPrefixRewrite,hostRewrite]

# Schema for PacketMirroringsScopedList
PacketMirroringsScopedList(c)=c << [warning,packetMirrorings]

# Schema for InterconnectLocationRegionInfo
InterconnectLocationRegionInfo(c)=c << [region,locationPresence,expectedRttMs]

# Schema for NetworksRemovePeeringRequest
NetworksRemovePeeringRequest(c)=c << [name]

# Schema for PreservedState
PreservedState(c)=c << [externalIPs,disks,metadata,internalIPs]

# Schema for UrlMap
UrlMap(c)=c << [id,defaultCustomErrorResponsePolicy,defaultUrlRedirect,pathMatchers,name,description,kind,region,defaultService,selfLink,hostRules,headerAction,tests,defaultRouteAction,fingerprint,creationTimestamp]

# Schema for AutoscalerAggregatedList
AutoscalerAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for Commitment
Commitment(c)=c << [id,mergeSourceCommitments,selfLink,startTimestamp,autoRenew,licenseResource,type,existingReservations,region,category,splitSourceCommitment,statusMessage,name,resources,creationTimestamp,reservations,description,plan,endTimestamp,kind,status]

# Schema for RegionUrlMapsValidateRequest
RegionUrlMapsValidateRequest(c)=c << [resource]

# Schema for InterconnectDiagnosticsLinkOpticalPower
InterconnectDiagnosticsLinkOpticalPower(c)=c << [state,value]

# Schema for SavedAttachedDisk
SavedAttachedDisk(c)=c << [mode,interface,type,kind,diskType,deviceName,storageBytes,storageBytesStatus,diskSizeGb,index,source,guestOsFeatures,licenses,diskEncryptionKey,autoDelete,boot]

# Schema for DisksResizeRequest
DisksResizeRequest(c)=c << [sizeGb]

# Schema for PublicDelegatedPrefix
PublicDelegatedPrefix(c)=c << [id,byoipApiVersion,region,publicDelegatedSubPrefixs,name,parentPrefix,mode,allocatablePrefixLength,selfLink,fingerprint,creationTimestamp,isLiveMigration,description,ipCidrRange,kind,status]

# Schema for InterconnectMacsecConfigPreSharedKey
InterconnectMacsecConfigPreSharedKey(c)=c << [cak,startTime,name,ckn]

# Schema for PacketMirroring
PacketMirroring(c)=c << [id,mirroredResources,region,selfLink,enable,network,creationTimestamp,collectorIlb,name,filter,description,kind,priority]

# Schema for ResourcePolicyHourlyCycle
ResourcePolicyHourlyCycle(c)=c << [duration,hoursInCycle,startTime]

# Schema for SecurityPoliciesScopedList
SecurityPoliciesScopedList(c)=c << [warning,securityPolicies]

# Schema for InstancesSetNameRequest
InstancesSetNameRequest(c)=c << [currentName,name]

# Schema for ManagedInstanceAllInstancesConfig
ManagedInstanceAllInstancesConfig(c)=c << [revision]

# Schema for DiskAsyncReplicationList
DiskAsyncReplicationList(c)=c << [asyncReplicationDisk]

# Schema for RouterStatusResponse
RouterStatusResponse(c)=c << [result,kind]

# Schema for NetworkEdgeSecurityService
NetworkEdgeSecurityService(c)=c << [id,region,selfLink,securityPolicy,name,description,fingerprint,creationTimestamp,kind,selfLinkWithId]

# Schema for InstanceGroupManagersDeleteInstancesRequest
InstanceGroupManagersDeleteInstancesRequest(c)=c << [instances,skipInstancesOnValidationError]

# Schema for StoragePoolDisk
StoragePoolDisk(c)=c << [type,provisionedThroughput,status,provisionedIops,resourcePolicies,attachedInstances,sizeGb,usedBytes,name,creationTimestamp,disk]

# Schema for StatefulPolicyPreservedStateNetworkIp
StatefulPolicyPreservedStateNetworkIp(c)=c << [autoDelete]

# Schema for PacketMirroringMirroredResourceInfo
PacketMirroringMirroredResourceInfo(c)=c << [subnetworks,instances,tags]

# Schema for InstanceTemplate
InstanceTemplate(c)=c << [id,region,selfLink,sourceInstanceParams,name,creationTimestamp,description,kind,properties,sourceInstance]

# Schema for Project
Project(c)=c << [xpnProjectStatus,usageExportLocation,name,commonInstanceMetadata,vmDnsSetting,creationTimestamp,description,kind,id,enabledFeatures,defaultServiceAccount,quotas,selfLink,managedProtectionTier,defaultNetworkTier,cloudArmorTier]

# Schema for NotificationEndpointGrpcSettings
NotificationEndpointGrpcSettings(c)=c << [resendInterval,endpoint,retryDurationSec,payloadName,authority]

# Schema for InstanceGroupManagerStatusStatefulPerInstanceConfigs
InstanceGroupManagerStatusStatefulPerInstanceConfigs(c)=c << [allEffective]

# Schema for BackendServiceGroupHealth
BackendServiceGroupHealth(c)=c << [annotations,healthStatus,kind]

# Schema for SslCertificatesScopedList
SslCertificatesScopedList(c)=c << [warning,sslCertificates]

# Schema for PublicAdvertisedPrefixList
PublicAdvertisedPrefixList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NetworkAttachmentAggregatedList
NetworkAttachmentAggregatedList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for TargetHttpProxy
TargetHttpProxy(c)=c << [region,httpFilters,name,description,kind,id,proxyBind,selfLink,urlMap,fingerprint,httpKeepAliveTimeoutSec,creationTimestamp]

# Schema for AllocationAggregateReservation
AllocationAggregateReservation(c)=c << [inUseResources,workloadType,vmFamily,reservedResources]

# Schema for InstanceGroupManagersCreateInstancesRequest
InstanceGroupManagersCreateInstancesRequest(c)=c << [instances]

# Schema for StoragePoolResourceStatus
StoragePoolResourceStatus(c)=c << [totalProvisionedDiskThroughput,totalProvisionedDiskCapacityGb,poolUsedIops,diskCount,maxTotalProvisionedDiskCapacityGb,poolUsedCapacityBytes,totalProvisionedDiskIops,poolUsedThroughput,lastResizeTimestamp,poolUserWrittenBytes]

# Schema for NatIpInfo
NatIpInfo(c)=c << [natName,natIpInfoMappings]

# Schema for TargetGrpcProxy
TargetGrpcProxy(c)=c << [id,name,validateForProxyless,description,selfLink,urlMap,fingerprint,creationTimestamp,kind,selfLinkWithId]

# Schema for TargetHttpsProxiesScopedList
TargetHttpsProxiesScopedList(c)=c << [warning,targetHttpsProxies]

# Schema for UrlMapTest
UrlMapTest(c)=c << [expectedOutputUrl,expectedRedirectResponseCode,headers,service,host,path,description]

# Schema for NetworkEndpointWithHealthStatus
NetworkEndpointWithHealthStatus(c)=c << [networkEndpoint,healths]

# Schema for LicenseResourceCommitment
LicenseResourceCommitment(c)=c << [license,amount,coresPerLicense]

# Schema for DisksStopGroupAsyncReplicationResource
DisksStopGroupAsyncReplicationResource(c)=c << [resourcePolicy]

# Schema for NetworksUpdatePeeringRequest
NetworksUpdatePeeringRequest(c)=c << [networkPeering]

# Schema for ImageFamilyView
ImageFamilyView(c)=c << [image]

# Schema for SnapshotSettingsStorageLocationSettingsStorageLocationPreference
SnapshotSettingsStorageLocationSettingsStorageLocationPreference(c)=c << [name]

# Schema for SecurityPoliciesWafConfig
SecurityPoliciesWafConfig(c)=c << [wafRules]

# Schema for InstanceGroupManagerResizeRequestStatus
InstanceGroupManagerResizeRequestStatus(c)=c << [error,lastAttempt]

# Schema for NetworkAttachmentConnectedEndpoint
NetworkAttachmentConnectedEndpoint(c)=c << [projectIdOrNum,ipv6Address,secondaryIpCidrRanges,subnetwork,subnetworkCidrRange,status,ipAddress]

# Schema for SecurityPolicyAdaptiveProtectionConfig
SecurityPolicyAdaptiveProtectionConfig(c)=c << [autoDeployConfig,layer7DdosDefenseConfig]

# Schema for SecurityPolicyUserDefinedField
SecurityPolicyUserDefinedField(c)=c << [base,offset,name,size,mask]

# Schema for TargetHttpsProxiesSetSslCertificatesRequest
TargetHttpsProxiesSetSslCertificatesRequest(c)=c << [sslCertificates]

# Schema for HttpRouteAction
HttpRouteAction(c)=c << [requestMirrorPolicy,retryPolicy,corsPolicy,timeout,faultInjectionPolicy,urlRewrite,maxStreamDuration,weightedBackendServices]

# Schema for InstanceGroupManagerInstanceFlexibilityPolicyProvisioningModelMix
InstanceGroupManagerInstanceFlexibilityPolicyProvisioningModelMix(c)=c << [standardCapacityPercentAboveBase,standardCapacityBase]

# Schema for ExternalVpnGatewayInterface
ExternalVpnGatewayInterface(c)=c << [id,ipv6Address,ipAddress]

# Schema for BfdPacket
BfdPacket(c)=c << [state,multiplier,version,authenticationPresent,minEchoRxIntervalMs,poll,diagnostic,controlPlaneIndependent,yourDiscriminator,myDiscriminator,demand,final,minRxIntervalMs,multipoint,minTxIntervalMs,length]

# Schema for AddressList
AddressList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for VpnGatewayVpnGatewayInterface
VpnGatewayVpnGatewayInterface(c)=c << [id,ipAddress,interconnectAttachment,ipv6Address]

# Schema for GuestOsFeature
GuestOsFeature(c)=c << [type]

# Schema for ResourcePolicyWeeklyCycleDayOfWeek
ResourcePolicyWeeklyCycleDayOfWeek(c)=c << [day,startTime,duration]

# Schema for VmEndpointNatMappings
VmEndpointNatMappings(c)=c << [interfaceNatMappings,instanceName]

# Schema for RegionInstanceGroupManagersApplyUpdatesRequest
RegionInstanceGroupManagersApplyUpdatesRequest(c)=c << [mostDisruptiveAllowedAction,instances,allInstances,minimalAction]

# Schema for ProjectsDisableXpnResourceRequest
ProjectsDisableXpnResourceRequest(c)=c << [xpnResource]

# Schema for ForwardingRuleList
ForwardingRuleList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for HealthCheckReference
HealthCheckReference(c)=c << [healthCheck]

# Schema for TargetTcpProxiesSetBackendServiceRequest
TargetTcpProxiesSetBackendServiceRequest(c)=c << [service]

# Schema for SignedUrlKey
SignedUrlKey(c)=c << [keyName,keyValue]

# Schema for GlobalNetworkEndpointGroupsDetachEndpointsRequest
GlobalNetworkEndpointGroupsDetachEndpointsRequest(c)=c << [networkEndpoints]

# Schema for BackendBucketCdnPolicyCacheKeyPolicy
BackendBucketCdnPolicyCacheKeyPolicy(c)=c << [queryStringWhitelist,includeHttpHeaders]

# Schema for InterconnectRemoteLocation
InterconnectRemoteLocation(c)=c << [constraints,permittedConnections,name,maxLagSize10Gbps,description,peeringdbFacilityId,id,selfLink,maxLagSize100Gbps,attachmentConfigurationConstraints,facilityProviderFacilityId,city,creationTimestamp,lacp,address,kind,remoteService,status,facilityProvider,continent]

# Schema for AcceleratorTypesScopedList
AcceleratorTypesScopedList(c)=c << [acceleratorTypes,warning]

# Schema for Address
Address(c)=c << [id,selfLink,ipVersion,addressType,name,prefixLength,networkTier,description,purpose,region,subnetwork,labelFingerprint,users,network,labels,creationTimestamp,ipv6EndpointType,address,kind,status]

# Schema for OutlierDetection
OutlierDetection(c)=c << [successRateStdevFactor,interval,enforcingSuccessRate,successRateMinimumHosts,consecutiveErrors,enforcingConsecutiveErrors,baseEjectionTime,consecutiveGatewayFailure,successRateRequestVolume,enforcingConsecutiveGatewayFailure,maxEjectionPercent]

# Schema for Policy
Policy(c)=c << [version,bindings,etag,rules,auditConfigs]

# Schema for BfdStatus
BfdStatus(c)=c << [localDiagnostic,configUpdateTimestampMicros,controlPacketCounts,controlPacketIntervals,negotiatedLocalControlTxIntervalMs,bfdSessionInitializationMode,uptimeMs,rxPacket,localState,txPacket]

# Schema for FutureReservation
FutureReservation(c)=c << [name,namePrefix,creationTimestamp,description,id,planningStatus,zone,shareSettings,selfLink,timeWindow,autoDeleteAutoCreatedReservations,autoCreatedReservationsDeleteTime,autoCreatedReservationsDuration,selfLinkWithId,specificSkuProperties,kind,status]

# Schema for TargetHttpsProxy
TargetHttpsProxy(c)=c << [region,certificateMap,sslCertificates,authentication,description,kind,id,proxyBind,selfLink,urlMap,serverTlsPolicy,sslPolicy,authorization,httpFilters,authorizationPolicy,tlsEarlyData,quicOverride,name,fingerprint,httpKeepAliveTimeoutSec,creationTimestamp]

# Schema for SecuritySettings
SecuritySettings(c)=c << [subjectAltNames,clientTlsPolicy,authentication,awsV4Authentication]

# Schema for BulkInsertInstanceResource
BulkInsertInstanceResource(c)=c << [namePattern,count,sourceInstanceTemplate,minCount,instanceProperties,perInstanceProperties,locationPolicy]

# Schema for NodeGroupAggregatedList
NodeGroupAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InstanceGroupsListInstances
InstanceGroupsListInstances(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for AcceleratorTypeList
AcceleratorTypeList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NetworkEndpointGroupAppEngine
NetworkEndpointGroupAppEngine(c)=c << [service,version,urlMask]

# Schema for NetworkAttachmentList
NetworkAttachmentList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for BackendBucketList
BackendBucketList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RouteList
RouteList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for AcceleratorType
AcceleratorType(c)=c << [id,selfLink,name,maximumCardsPerInstance,creationTimestamp,description,kind,zone,deprecated]

# Schema for InstanceGroupManagersApplyUpdatesRequest
InstanceGroupManagersApplyUpdatesRequest(c)=c << [mostDisruptiveAllowedAction,instances,allInstances,minimalAction]

# Schema for SchedulingOnInstanceStopAction
SchedulingOnInstanceStopAction(c)=c << [discardLocalSsd]

# Schema for SourceInstanceParams
SourceInstanceParams(c)=c << [diskConfigs]

# Schema for InstanceGroupManagersPatchPerInstanceConfigsReq
InstanceGroupManagersPatchPerInstanceConfigsReq(c)=c << [perInstanceConfigs]

# Schema for InstanceGroupsScopedList
InstanceGroupsScopedList(c)=c << [warning,instanceGroups]

# Schema for RouterNat
RouterNat(c)=c << [autoNetworkTier,endpointTypes,subnetworks,enableDynamicPortAllocation,name,tcpEstablishedIdleTimeoutSec,natIpAllocateOption,rules,udpIdleTimeoutSec,maxPortsPerVm,sourceSubnetworkIpRangesToNat,drainNatIps,logConfig,tcpTransitoryIdleTimeoutSec,type,icmpIdleTimeoutSec,enableEndpointIndependentMapping,natIps,minPortsPerVm,tcpTimeWaitTimeoutSec]

# Schema for FutureReservationStatusLastKnownGoodStateFutureReservationSpecs
FutureReservationStatusLastKnownGoodStateFutureReservationSpecs(c)=c << [shareSettings,timeWindow,specificSkuProperties]

# Schema for InstantSnapshotsScopedList
InstantSnapshotsScopedList(c)=c << [warning,instantSnapshots]

# Schema for GuestAttributes
GuestAttributes(c)=c << [selfLink,variableKey,queryPath,kind,queryValue,variableValue]

# Schema for NodeGroup
NodeGroup(c)=c << [locationHint,selfLink,maintenanceInterval,size,description,autoscalingPolicy,id,zone,shareSettings,nodeTemplate,name,maintenancePolicy,fingerprint,creationTimestamp,maintenanceWindow,kind,status]

# Schema for RoutersGetRoutePolicyResponse
RoutersGetRoutePolicyResponse(c)=c << [resource]

# Schema for NotificationEndpointList
NotificationEndpointList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InterconnectLocationList
InterconnectLocationList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for SecurityPolicyAdaptiveProtectionConfigAutoDeployConfig
SecurityPolicyAdaptiveProtectionConfigAutoDeployConfig(c)=c << [loadThreshold,expirationSec,impactedBaselineThreshold,confidenceThreshold]

# Schema for PreservedStatePreservedNetworkIp
PreservedStatePreservedNetworkIp(c)=c << [autoDelete,ipAddress]

# Schema for StoragePoolListDisks
StoragePoolListDisks(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for SSLHealthCheck
SSLHealthCheck(c)=c << [proxyHeader,portName,request,port,response,portSpecification]

# Schema for TargetTcpProxyAggregatedList
TargetTcpProxyAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for FirewallPoliciesListAssociationsResponse
FirewallPoliciesListAssociationsResponse(c)=c << [associations,kind]

# Schema for HostRule
HostRule(c)=c << [hosts,pathMatcher,description]

# Schema for RegionInstanceGroupManagersResumeInstancesRequest
RegionInstanceGroupManagersResumeInstancesRequest(c)=c << [instances]

# Schema for AllocationSpecificSKUReservation
AllocationSpecificSKUReservation(c)=c << [instanceProperties,assuredCount,count,sourceInstanceTemplate,inUseCount]

# Schema for NetworkEndpointGroupsScopedList
NetworkEndpointGroupsScopedList(c)=c << [warning,networkEndpointGroups]

# Schema for NetworkEndpointGroupCloudFunction
NetworkEndpointGroupCloudFunction(c)=c << [function,urlMask]

# Schema for HealthChecksScopedList
HealthChecksScopedList(c)=c << [healthChecks,warning]

# Schema for NetworkEndpointGroup
NetworkEndpointGroup(c)=c << [pscData,selfLink,subnetwork,serverlessDeployment,name,cloudRun,creationTimestamp,description,kind,id,networkEndpointType,appEngine,zone,region,pscTargetService,cloudFunction,network,size,loadBalancer,annotations,defaultPort]

# Schema for NatIpInfoResponse
NatIpInfoResponse(c)=c << [result]

# Schema for NodeGroupsPerformMaintenanceRequest
NodeGroupsPerformMaintenanceRequest(c)=c << [nodes,startTime]

# Schema for InstanceGroupManagersListManagedInstancesResponse
InstanceGroupManagersListManagedInstancesResponse(c)=c << [managedInstances,nextPageToken]

# Schema for BackendBucketCdnPolicyNegativeCachingPolicy
BackendBucketCdnPolicyNegativeCachingPolicy(c)=c << [code,ttl]

# Schema for SecurityPolicyRuleRateLimitOptions
SecurityPolicyRuleRateLimitOptions(c)=c << [rateLimitThreshold,enforceOnKey,exceedAction,enforceOnKeyConfigs,conformAction,exceedRedirectOptions,banDurationSec,banThreshold,enforceOnKeyName]

# Schema for AutoscalingPolicy
AutoscalingPolicy(c)=c << [loadBalancingUtilization,mode,customMetricUtilizations,scaleInControl,minNumReplicas,maxNumReplicas,cpuUtilization,scalingSchedules,scaleDownControl,coolDownPeriodSec]

# Schema for InstanceSettingsMetadata
InstanceSettingsMetadata(c)=c << [kind,items]

# Schema for BackendServiceLocalityLoadBalancingPolicyConfig
BackendServiceLocalityLoadBalancingPolicyConfig(c)=c << [policy,customPolicy]

# Schema for SslPoliciesListAvailableFeaturesResponse
SslPoliciesListAvailableFeaturesResponse(c)=c << [features]

# Schema for Rule
Rule(c)=c << [notIns,ins,conditions,action,description,permissions,logConfigs]

# Schema for RegionInstanceGroupManagersAbandonInstancesRequest
RegionInstanceGroupManagersAbandonInstancesRequest(c)=c << [instances]

# Schema for Autoscaler
Autoscaler(c)=c << [name,creationTimestamp,scalingScheduleStatus,autoscalingPolicy,id,zone,region,statusDetails,selfLink,recommendedSize,target,description,kind,status]

# Schema for TargetHttpsProxyAggregatedList
TargetHttpsProxyAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for TestFailure
TestFailure(c)=c << [actualService,expectedRedirectResponseCode,actualRedirectResponseCode,headers,actualOutputUrl,expectedService,expectedOutputUrl,host,path]

# Schema for AllocationReservationSharingPolicy
AllocationReservationSharingPolicy(c)=c << [serviceShareType]

# Schema for InstanceGroupManagersDeletePerInstanceConfigsReq
InstanceGroupManagersDeletePerInstanceConfigsReq(c)=c << [names]

# Schema for FirewallPolicyAssociation
FirewallPolicyAssociation(c)=c << [displayName,name,shortName,firewallPolicyId,attachmentTarget]

# Schema for InstanceGroupsListInstancesRequest
InstanceGroupsListInstancesRequest(c)=c << [instanceState]

# Schema for HttpRetryPolicy
HttpRetryPolicy(c)=c << [numRetries,perTryTimeout,retryConditions]

# Schema for RegionSetPolicyRequest
RegionSetPolicyRequest(c)=c << [policy,bindings,etag]

# Schema for InterconnectsGetMacsecConfigResponse
InterconnectsGetMacsecConfigResponse(c)=c << [result,etag]

# Schema for InstanceGroupManagersScopedList
InstanceGroupManagersScopedList(c)=c << [warning,instanceGroupManagers]

# Schema for SecurityPolicyAssociation
SecurityPolicyAssociation(c)=c << [excludedFolders,displayName,excludedProjects,securityPolicyId,shortName,attachmentId,name]

# Schema for InterconnectRemoteLocationList
InterconnectRemoteLocationList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for BackendServiceList
BackendServiceList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ResourcePolicySnapshotSchedulePolicy
ResourcePolicySnapshotSchedulePolicy(c)=c << [schedule,snapshotProperties,retentionPolicy]

# Schema for AccessConfig
AccessConfig(c)=c << [natIP,externalIpv6PrefixLength,securityPolicy,name,type,networkTier,externalIpv6,publicPtrDomainName,kind,setPublicPtr]

# Schema for RegionAutoscalerList
RegionAutoscalerList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for DisplayDevice
DisplayDevice(c)=c << [enableDisplay]

# Schema for OperationList
OperationList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for Route
Route(c)=c << [nextHopIp,nextHopInstance,nextHopIlb,tags,creationTimestamp,id,warnings,selfLink,nextHopHub,destRange,nextHopVpnTunnel,nextHopOrigin,nextHopGateway,routeStatus,routeType,name,nextHopInterRegionCost,network,nextHopPeering,nextHopInterconnectAttachment,asPaths,nextHopNetwork,description,kind,nextHopMed,priority]

# Schema for ManagedInstanceInstanceHealth
ManagedInstanceInstanceHealth(c)=c << [detailedHealthState,healthCheck]

# Schema for PublicDelegatedPrefixPublicDelegatedSubPrefix
PublicDelegatedPrefixPublicDelegatedSubPrefix(c)=c << [region,name,isAddress,description,delegateeProject,allocatablePrefixLength,mode,status,ipCidrRange]

# Schema for InstanceList
InstanceList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for ProjectsSetCloudArmorTierRequest
ProjectsSetCloudArmorTierRequest(c)=c << [cloudArmorTier]

# Schema for InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy(c)=c << [name,type,shortName,priority,rules,displayName]

# Schema for RegionInstanceGroupManagersCreateInstancesRequest
RegionInstanceGroupManagersCreateInstancesRequest(c)=c << [instances]

# Schema for HealthStatus
HealthStatus(c)=c << [weight,ipv6Address,forwardingRule,healthState,annotations,port,weightError,instance,ipv6HealthState,ipAddress,forwardingRuleIp]

# Schema for SchedulingNodeAffinity
SchedulingNodeAffinity(c)=c << [values,key,operator]

# Schema for Operation
Operation(c)=c << [selfLink,progress,startTime,error,setCommonInstanceMetadataOperationMetadata,id,warnings,endTime,zone,region,operationGroupId,insertTime,statusMessage,name,httpErrorStatusCode,targetLink,clientOperationId,operationType,creationTimestamp,httpErrorMessage,description,instancesBulkInsertOperationMetadata,targetId,user,kind,status]

# Schema for RouterNatRuleAction
RouterNatRuleAction(c)=c << [sourceNatActiveRanges,sourceNatActiveIps,sourceNatDrainRanges,sourceNatDrainIps]

# Schema for TargetPoolsAddInstanceRequest
TargetPoolsAddInstanceRequest(c)=c << [instances]

# Schema for SslCertificateSelfManagedSslCertificate
SslCertificateSelfManagedSslCertificate(c)=c << [certificate,privateKey]

# Schema for ResourcePolicyAggregatedList
ResourcePolicyAggregatedList(c)=c << [id,selfLink,etag,items,warning,unreachables,kind,nextPageToken]

# Schema for AcceleratorConfig
AcceleratorConfig(c)=c << [acceleratorType,acceleratorCount]

# Schema for InstanceGroupManagerResizeRequest
InstanceGroupManagerResizeRequest(c)=c << [id,state,zone,selfLink,count,resizeBy,creationTimestamp,description,name,requestedRunDuration,selfLinkWithId,kind,status]

# Schema for RouterStatus
RouterStatus(c)=c << [bgpPeerStatus,bestRoutesForRouter,natStatus,bestRoutes,network]

# Schema for LogConfigCounterOptionsCustomField
LogConfigCounterOptionsCustomField(c)=c << [value,name]

# Schema for AutoscalerStatusDetails
AutoscalerStatusDetails(c)=c << [message,type]

# Schema for NetworkEndpointGroupsListEndpointsRequest
NetworkEndpointGroupsListEndpointsRequest(c)=c << [healthStatus,endpointFilters]

# Schema for NetworkEndpoint
NetworkEndpoint(c)=c << [port,instance,annotations,fqdn,ipAddress,clientDestinationPort,ipv6Address]

# Schema for FutureReservationStatusLastKnownGoodState
FutureReservationStatusLastKnownGoodState(c)=c << [futureReservationSpecs,namePrefix,description,procurementStatus,existingMatchingUsageInfo,lockTime]

# Schema for SubnetworksScopedList
SubnetworksScopedList(c)=c << [subnetworks,warning]

# Schema for SubnetworkAggregatedList
SubnetworkAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InterconnectAttachmentPrivateInfo
InterconnectAttachmentPrivateInfo(c)=c << [tag8021q]

# Schema for HttpQueryParameterMatch
HttpQueryParameterMatch(c)=c << [presentMatch,regexMatch,name,exactMatch]

# Schema for InterconnectLocation
InterconnectLocation(c)=c << [facilityProviderFacilityId,peeringdbFacilityId,id,selfLink,regionInfos,name,availableFeatures,availabilityZone,city,creationTimestamp,availableLinkTypes,description,address,kind,status,facilityProvider,continent,supportsPzs]

# Schema for ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
ResourcePolicyResourceStatusInstanceSchedulePolicyStatus(c)=c << [nextRunStartTime,lastRunStartTime]

# Schema for SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo
SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo(c)=c << [state,error]

# Schema for DiskResourceStatusAsyncReplicationStatus
DiskResourceStatusAsyncReplicationStatus(c)=c << [state]

# Schema for CommitmentAggregatedList
CommitmentAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for PacketMirroringForwardingRuleInfo
PacketMirroringForwardingRuleInfo(c)=c << [url,canonicalUrl]

# Schema for TargetHttpProxyAggregatedList
TargetHttpProxyAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for InterconnectAttachmentList
InterconnectAttachmentList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NatIpInfoNatIpInfoMapping
NatIpInfoNatIpInfoMapping(c)=c << [natIp,mode,usage]

# Schema for InstanceConsumptionData
InstanceConsumptionData(c)=c << [consumptionInfo,instance]

# Schema for NodeTemplateAggregatedList
NodeTemplateAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for RegionCommitmentsUpdateReservationsRequest
RegionCommitmentsUpdateReservationsRequest(c)=c << [reservations]

# Schema for MachineImageList
MachineImageList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InterconnectCircuitInfo
InterconnectCircuitInfo(c)=c << [customerDemarcId,googleDemarcId,googleCircuitId]

# Schema for LocalDisk
LocalDisk(c)=c << [diskType,diskCount,diskSizeGb]

# Schema for ServiceAttachmentConsumerProjectLimit
ServiceAttachmentConsumerProjectLimit(c)=c << [projectIdOrNum,networkUrl,connectionLimit]

# Schema for SubnetworkLogConfig
SubnetworkLogConfig(c)=c << [flowSampling,aggregationInterval,enable,filterExpr,metadataFields,metadata]

# Schema for InterconnectDiagnosticsLinkStatus
InterconnectDiagnosticsLinkStatus(c)=c << [operationalStatus,macsec,receivingOpticalPower,transmittingOpticalPower,lacpStatus,googleDemarc,arpCaches,circuitId]

# Schema for LogConfigCounterOptions
LogConfigCounterOptions(c)=c << [field,customFields,metric]

# Schema for NetworkEndpointGroupServerlessDeployment
NetworkEndpointGroupServerlessDeployment(c)=c << [version,resource,urlMask,platform]

# Schema for InstanceWithNamedPorts
InstanceWithNamedPorts(c)=c << [instance,status,namedPorts]

# Schema for PartnerMetadata
PartnerMetadata(c)=c << [partnerMetadata,fingerprint]

# Schema for RegionDisksStartAsyncReplicationRequest
RegionDisksStartAsyncReplicationRequest(c)=c << [asyncSecondaryDisk]

# Schema for UrlMapsScopedList
UrlMapsScopedList(c)=c << [urlMaps,warning]

# Schema for TargetGrpcProxyList
TargetGrpcProxyList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for CustomErrorResponsePolicyCustomErrorResponseRule
CustomErrorResponsePolicyCustomErrorResponseRule(c)=c << [matchResponseCodes,overrideResponseCode,path]

# Schema for SecurityPolicyRuleNetworkMatcher
SecurityPolicyRuleNetworkMatcher(c)=c << [destIpRanges,srcRegionCodes,ipProtocols,userDefinedFields,srcPorts,destPorts,srcAsns,srcIpRanges]

# Schema for Firewall
Firewall(c)=c << [sourceTags,selfLink,sourceServiceAccounts,network,description,id,targetTags,direction,sourceRanges,logConfig,targetServiceAccounts,name,disabled,destinationRanges,denied,enableLogging,allowed,creationTimestamp,kind,priority]

# Schema for Condition
Condition(c)=c << [svc,sys,op,values,iam]

# Schema for InterconnectRemoteLocationPermittedConnections
InterconnectRemoteLocationPermittedConnections(c)=c << [interconnectLocation]

# Schema for CommitmentsScopedList
CommitmentsScopedList(c)=c << [warning,commitments]

# Schema for TargetInstancesScopedList
TargetInstancesScopedList(c)=c << [targetInstances,warning]

# Schema for NetworksGetEffectiveFirewallsResponse
NetworksGetEffectiveFirewallsResponse(c)=c << [firewalls,firewallPolicys,organizationFirewalls]

# Schema for UrlMapsValidateRequest
UrlMapsValidateRequest(c)=c << [loadBalancingSchemes,resource]

# Schema for RegionInstanceGroupManagersSetAutoHealingRequest
RegionInstanceGroupManagersSetAutoHealingRequest(c)=c << [autoHealingPolicies]

# Schema for InstancesSetSecurityPolicyRequest
InstancesSetSecurityPolicyRequest(c)=c << [securityPolicy,networkInterfaces]

# Schema for InstancesRemoveResourcePoliciesRequest
InstancesRemoveResourcePoliciesRequest(c)=c << [resourcePolicies]

# Schema for ManagedInstanceLastAttempt
ManagedInstanceLastAttempt(c)=c << [errors]

# Schema for HttpFaultDelay
HttpFaultDelay(c)=c << [percentage,fixedDelay]

# Schema for InstanceGroupManagersStopInstancesRequest
InstanceGroupManagersStopInstancesRequest(c)=c << [forceStop,instances]

# Schema for HttpHealthCheck
HttpHealthCheck(c)=c << [id,checkIntervalSec,requestPath,name,healthyThreshold,port,selfLink,unhealthyThreshold,creationTimestamp,host,description,kind,timeoutSec]

# Schema for NodeGroupsSimulateMaintenanceEventRequest
NodeGroupsSimulateMaintenanceEventRequest(c)=c << [nodes]

# Schema for NodeGroupsListNodes
NodeGroupsListNodes(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RegionNetworkEndpointGroupsAttachEndpointsRequest
RegionNetworkEndpointGroupsAttachEndpointsRequest(c)=c << [networkEndpoints]

# Schema for PublicDelegatedPrefixList
PublicDelegatedPrefixList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for DiskAsyncReplication
DiskAsyncReplication(c)=c << [consistencyGroupPolicyId,consistencyGroupPolicy,diskId,disk]

# Schema for NetworkList
NetworkList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupManagerResizeRequestsListResponse
InstanceGroupManagerResizeRequestsListResponse(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupManagerList
InstanceGroupManagerList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for TestPermissionsRequest
TestPermissionsRequest(c)=c << [permissions]

# Schema for ReservationAggregatedList
ReservationAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for QuotaExceededInfo
QuotaExceededInfo(c)=c << [rolloutStatus,futureLimit,limitName,dimensions,metricName,limit]

# Schema for BackendServiceConnectionTrackingPolicy
BackendServiceConnectionTrackingPolicy(c)=c << [connectionPersistenceOnUnhealthyBackends,idleTimeoutSec,trackingMode,enableStrongAffinity]

# Schema for InterconnectDiagnostics
InterconnectDiagnostics(c)=c << [bundleAggregationType,links,arpCaches,bundleOperationalStatus,macAddress]

# Schema for InterconnectAttachment
InterconnectAttachment(c)=c << [state,cloudRouterIpv6Address,stackType,edgeAvailabilityDomain,operationalStatus,bandwidth,id,dataplaneVersion,region,googleReferenceId,selfLink,customerRouterIpv6InterfaceId,mtu,partnerMetadata,labelFingerprint,interconnect,satisfiesPzs,configurationConstraints,partnerAsn,name,customerRouterIpAddress,labels,pairingKey,cloudRouterIpv6InterfaceId,type,candidateIpv6Subnets,adminEnabled,candidateSubnets,customerRouterIpv6Address,creationTimestamp,router,privateInterconnectInfo,description,vlanTag8021q,ipsecInternalAddresses,kind,remoteService,cloudRouterIpAddress,encryption,subnetLength]

# Schema for ResourcePolicyDiskConsistencyGroupPolicy
ResourcePolicyDiskConsistencyGroupPolicy(c)=c << []

# Schema for HelpLink
HelpLink(c)=c << [url,description]

# Schema for DiskTypesScopedList
DiskTypesScopedList(c)=c << [warning,diskTypes]

# Schema for PacketMirroringMirroredResourceInfoInstanceInfo
PacketMirroringMirroredResourceInfoInstanceInfo(c)=c << [url,canonicalUrl]

# Schema for SecurityPolicyRecaptchaOptionsConfig
SecurityPolicyRecaptchaOptionsConfig(c)=c << [redirectSiteKey]

# Schema for ServiceAttachmentList
ServiceAttachmentList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for TargetSslProxiesSetCertificateMapRequest
TargetSslProxiesSetCertificateMapRequest(c)=c << [certificateMap]

# Schema for InterconnectRemoteLocationConstraints
InterconnectRemoteLocationConstraints(c)=c << [portPairRemoteLocation,subnetLengthRange,portPairVlan]

# Schema for InitialStateConfig
InitialStateConfig(c)=c << [keks,dbxs,dbs,pk]

# Schema for BundledLocalSsds
BundledLocalSsds(c)=c << [defaultInterface,partitionCount]

# Schema for MachineType
MachineType(c)=c << [selfLink,architecture,isSharedCpu,name,bundledLocalSsds,creationTimestamp,kind,id,maximumPersistentDisksSizeGb,maximumPersistentDisks,zone,deprecated,accelerators,description,guestCpus,memoryMb]

# Schema for NetworkInterface
NetworkInterface(c)=c << [ipv6AccessConfigs,nicType,queueCount,name,stackType,fingerprint,kind,ipv6AccessType,ipv6Address,internalIpv6PrefixLength,networkIP,subnetwork,network,accessConfigs,networkAttachment,aliasIpRanges]

# Schema for SubnetworkSecondaryRange
SubnetworkSecondaryRange(c)=c << [reservedInternalRange,rangeName,ipCidrRange]

# Schema for FirewallPolicyRuleSecureTag
FirewallPolicyRuleSecureTag(c)=c << [state,name]

# Schema for Uint128
Uint128(c)=c << [low,high]

# Schema for ShieldedVmIdentity
ShieldedVmIdentity(c)=c << [signingKey,encryptionKey,kind]

# Schema for SavedDisk
SavedDisk(c)=c << [sourceDisk,architecture,storageBytes,storageBytesStatus,kind]

# Schema for RegionInstanceGroupList
RegionInstanceGroupList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for SnapshotSettingsStorageLocationSettings
SnapshotSettingsStorageLocationSettings(c)=c << [locations,policy]

# Schema for TargetPoolsAddHealthCheckRequest
TargetPoolsAddHealthCheckRequest(c)=c << [healthChecks]

# Schema for RegionDisksAddResourcePoliciesRequest
RegionDisksAddResourcePoliciesRequest(c)=c << [resourcePolicies]

# Schema for ServiceAttachmentsScopedList
ServiceAttachmentsScopedList(c)=c << [serviceAttachments,warning]

# Schema for UrlMapValidationResult
UrlMapValidationResult(c)=c << [loadSucceeded,testFailures,testPassed,loadErrors]

# Schema for Expr
Expr(c)=c << [title,location,description,expression]

# Schema for NodeTemplate
NodeTemplate(c)=c << [id,region,nodeTypeFlexibility,creationTimestamp,nodeAffinityLabels,selfLink,serverBinding,disks,statusMessage,name,cpuOvercommitType,accelerators,nodeType,description,kind,status]

# Schema for SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch
SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch(c)=c << [name,values]

# Schema for VmEndpointNatMappingsList
VmEndpointNatMappingsList(c)=c << [id,selfLink,warning,result,kind,nextPageToken]

# Schema for RegionInstanceGroupManagersListErrorsResponse
RegionInstanceGroupManagersListErrorsResponse(c)=c << [nextPageToken,items]

# Schema for InstanceGroupManagersSetTargetPoolsRequest
InstanceGroupManagersSetTargetPoolsRequest(c)=c << [targetPools,fingerprint]

# Schema for NodeTypeAggregatedList
NodeTypeAggregatedList(c)=c << [id,selfLink,items,warning,unreachables,kind,nextPageToken]

# Schema for HealthCheckServicesList
HealthCheckServicesList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for HTTPHealthCheck
HTTPHealthCheck(c)=c << [proxyHeader,portName,requestPath,port,response,portSpecification,host]

# Schema for InstanceManagedByIgmErrorInstanceActionDetails
InstanceManagedByIgmErrorInstanceActionDetails(c)=c << [version,instance,action]

# Schema for InterconnectDiagnosticsMacsecStatus
InterconnectDiagnosticsMacsecStatus(c)=c << [operational,ckn]

# Schema for StoragePoolType
StoragePoolType(c)=c << [id,selfLink,name,minPoolProvisionedThroughput,creationTimestamp,minSizeGb,minPoolProvisionedIops,zone,deprecated,maxPoolProvisionedCapacityGb,maxPoolProvisionedIops,maxPoolProvisionedThroughput,description,kind,minPoolProvisionedCapacityGb,supportedDiskTypes,selfLinkWithId]

# Schema for SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams(c)=c << [val,op]

# Schema for InstanceGroupManagerResizeRequestStatusLastAttempt
InstanceGroupManagerResizeRequestStatusLastAttempt(c)=c << [error]

# Schema for InstanceGroupsSetNamedPortsRequest
InstanceGroupsSetNamedPortsRequest(c)=c << [fingerprint,namedPorts]

# Schema for RegionInstanceGroupManagersStopInstancesRequest
RegionInstanceGroupManagersStopInstancesRequest(c)=c << [forceStop,instances]

# Schema for SourceInstanceProperties
SourceInstanceProperties(c)=c << [postKeyRevocationActionType,machineType,serviceAccounts,minCpuPlatform,scheduling,canIpForward,keyRevocationActionType,metadata,description,disks,networkInterfaces,guestAccelerators,labels,tags,deletionProtection]

# Schema for RoutePolicy
RoutePolicy(c)=c << [name,type,fingerprint,terms]

# Schema for InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange
InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange(c)=c << [min,max]

# Schema for SecurityPolicyRuleRedirectOptions
SecurityPolicyRuleRedirectOptions(c)=c << [type,target]

# Schema for PacketMirroringList
PacketMirroringList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for BulkInsertDiskResource
BulkInsertDiskResource(c)=c << [sourceConsistencyGroupPolicy]

# Schema for FixedOrPercent
FixedOrPercent(c)=c << [calculated,fixed,percent]

# Schema for ResourcePoliciesScopedList
ResourcePoliciesScopedList(c)=c << [resourcePolicies,warning]

# Schema for ConfidentialInstanceConfig
ConfidentialInstanceConfig(c)=c << [enableConfidentialCompute,confidentialInstanceType]

# Schema for GuestAttributesEntry
GuestAttributesEntry(c)=c << [value,key,namespace]

# Schema for NetworkAttachment
NetworkAttachment(c)=c << [id,region,connectionPreference,name,description,selfLink,subnetworks,connectionEndpoints,producerAcceptLists,producerRejectLists,network,fingerprint,creationTimestamp,kind,selfLinkWithId]

# Schema for SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
SecurityPolicyRuleHttpHeaderActionHttpHeaderOption(c)=c << [headerName,headerValue]

# Schema for TargetVpnGatewayList
TargetVpnGatewayList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for NodeGroupsDeleteNodesRequest
NodeGroupsDeleteNodesRequest(c)=c << [nodes]

# Schema for RegionInstanceGroupManagerPatchInstanceConfigReq
RegionInstanceGroupManagerPatchInstanceConfigReq(c)=c << [perInstanceConfigs]

# Schema for AuditConfig
AuditConfig(c)=c << [exemptedMembers,service,auditLogConfigs]

# Schema for RoutersScopedList
RoutersScopedList(c)=c << [warning,routers]

# Schema for BulkInsertOperationStatus
BulkInsertOperationStatus(c)=c << [deletedVmCount,failedToCreateVmCount,createdVmCount,status,targetVmCount]

# Schema for RegionInstanceGroupsListInstancesRequest
RegionInstanceGroupsListInstancesRequest(c)=c << [portName,instanceState]

# Schema for NotificationEndpoint
NotificationEndpoint(c)=c << [id,region,selfLink,grpcSettings,name,creationTimestamp,description,kind]

# Schema for Int64RangeMatch
Int64RangeMatch(c)=c << [rangeStart,rangeEnd]

# Schema for SecurityPolicyRuleMatcherExprOptions
SecurityPolicyRuleMatcherExprOptions(c)=c << [recaptchaOptions]

# Schema for HealthCheckServiceReference
HealthCheckServiceReference(c)=c << [healthCheckService]

# Schema for ZoneList
ZoneList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for InstanceGroupManagerStatusVersionTarget
InstanceGroupManagerStatusVersionTarget(c)=c << [isReached]

# Schema for InstanceGroupManagersRecreateInstancesRequest
InstanceGroupManagersRecreateInstancesRequest(c)=c << [instances]

# Schema for InstanceGroupManagersSetInstanceTemplateRequest
InstanceGroupManagersSetInstanceTemplateRequest(c)=c << [instanceTemplate]

# Schema for VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings(c)=c << [natIpPortRanges,drainNatIpPortRanges,ruleNumber,numTotalDrainNatPorts,numTotalNatPorts]

# Schema for GuestAttributesValue
GuestAttributesValue(c)=c << [items]

# Schema for InterconnectMacsecConfig
InterconnectMacsecConfig(c)=c << [preSharedKeys]

# Schema for InstancePropertiesPatch
InstancePropertiesPatch(c)=c << [labels,metadata]

# Schema for SnapshotSettings
SnapshotSettings(c)=c << [storageLocation]

# Schema for TargetVpnGateway
TargetVpnGateway(c)=c << [id,selfLink,tunnels,labelFingerprint,name,creationTimestamp,description,forwardingRules,region,network,labels,kind,status]

# Schema for InstanceGroupManager
InstanceGroupManager(c)=c << [instanceFlexibilityPolicy,updatePolicy,autoHealingPolicies,satisfiesPzs,versions,currentActions,id,failoverAction,targetStoppedSize,statefulPolicy,params,zone,region,distributionPolicy,selfLink,instanceTemplate,targetSize,resourcePolicies,standbyPolicy,serviceAccount,name,instanceLifecyclePolicy,satisfiesPzi,listManagedInstancesResults,instanceGroup,targetPools,fingerprint,baseInstanceName,allInstancesConfig,creationTimestamp,targetSuspendedSize,description,namedPorts,kind,status]

# Schema for TargetHttpsProxyList
TargetHttpsProxyList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for AliasIpRange
AliasIpRange(c)=c << [subnetworkRangeName,ipCidrRange]

# Schema for RegionNetworkEndpointGroupsDetachEndpointsRequest
RegionNetworkEndpointGroupsDetachEndpointsRequest(c)=c << [networkEndpoints]

# Schema for VpnTunnel
VpnTunnel(c)=c << [selfLink,remoteTrafficSelector,vpnGatewayInterface,name,sharedSecret,targetVpnGateway,id,peerExternalGateway,region,sharedSecretHash,labelFingerprint,peerExternalGatewayInterface,peerGcpGateway,labels,localTrafficSelector,ikeVersion,creationTimestamp,router,description,detailedStatus,vpnGateway,peerIp,kind,status]

# Schema for ResourcePolicyList
ResourcePolicyList(c)=c << [id,selfLink,warning,etag,items,kind,nextPageToken]

# Schema for Duration
Duration(c)=c << [nanos,seconds]

# Schema for DiskTypeList
DiskTypeList(c)=c << [id,selfLink,warning,items,kind,nextPageToken]

# Schema for RegionDisksRemoveResourcePoliciesRequest
RegionDisksRemoveResourcePoliciesRequest(c)=c << [resourcePolicies]

# Schema for RouterBgp
RouterBgp(c)=c << [asn,advertisedGroups,keepaliveInterval,identifierRange,advertisedIpRanges,advertiseMode]

# Schema for Status
Status(c)=c << [code,message,details]
schemas={
  Help=Help,
  ExternalVpnGateway=ExternalVpnGateway,
  SecurityPolicyRuleRateLimitOptionsThreshold=SecurityPolicyRuleRateLimitOptionsThreshold,
  InstanceGroupList=InstanceGroupList,
  RouterBgpPeerBfd=RouterBgpPeerBfd,
  CommitmentList=CommitmentList,
  RegionInstanceGroupManagerList=RegionInstanceGroupManagerList,
  BackendBucketCdnPolicy=BackendBucketCdnPolicy,
  RegionDisksResizeRequest=RegionDisksResizeRequest,
  RegionInstanceGroupsSetNamedPortsRequest=RegionInstanceGroupsSetNamedPortsRequest,
  NetworkEndpointGroupPscData=NetworkEndpointGroupPscData,
  AllocationAggregateReservationReservedResourceInfo=AllocationAggregateReservationReservedResourceInfo,
  SubnetworkList=SubnetworkList,
  SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig=SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig,
  DiskMoveRequest=DiskMoveRequest,
  AutoscalersScopedList=AutoscalersScopedList,
  NetworkPeering=NetworkPeering,
  TargetVpnGatewayAggregatedList=TargetVpnGatewayAggregatedList,
  SecurityPoliciesAggregatedList=SecurityPoliciesAggregatedList,
  ShieldedInstanceIdentityEntry=ShieldedInstanceIdentityEntry,
  BgpRoute=BgpRoute,
  VpnGatewayStatusTunnel=VpnGatewayStatusTunnel,
  TargetVpnGatewaysScopedList=TargetVpnGatewaysScopedList,
  InterconnectAttachmentsScopedList=InterconnectAttachmentsScopedList,
  SecurityPoliciesListPreconfiguredExpressionSetsResponse=SecurityPoliciesListPreconfiguredExpressionSetsResponse,
  ImageList=ImageList,
  ServiceAccount=ServiceAccount,
  InstanceAggregatedList=InstanceAggregatedList,
  DisksStartAsyncReplicationRequest=DisksStartAsyncReplicationRequest,
  SubnetworksExpandIpCidrRangeRequest=SubnetworksExpandIpCidrRangeRequest,
  TargetTcpProxyList=TargetTcpProxyList,
  PacketMirroringFilter=PacketMirroringFilter,
  SecurityPolicyRuleMatcherConfig=SecurityPolicyRuleMatcherConfig,
  InstanceGroupManagersStartInstancesRequest=InstanceGroupManagersStartInstancesRequest,
  InstanceParams=InstanceParams,
  SecurityPolicy=SecurityPolicy,
  RegionList=RegionList,
  ResourcePolicyDailyCycle=ResourcePolicyDailyCycle,
  SecurityPolicyRuleMatcherConfigLayer4Config=SecurityPolicyRuleMatcherConfigLayer4Config,
  AllocationSpecificSKUAllocationReservedInstanceProperties=AllocationSpecificSKUAllocationReservedInstanceProperties,
  NodeGroupNode=NodeGroupNode,
  RegionDiskTypeList=RegionDiskTypeList,
  Disk=Disk,
  RouterNatLogConfig=RouterNatLogConfig,
  ConsistentHashLoadBalancerSettingsHttpCookie=ConsistentHashLoadBalancerSettingsHttpCookie,
  DiskType=DiskType,
  HttpsHealthCheck=HttpsHealthCheck,
  AttachedDisk=AttachedDisk,
  ServiceAttachmentTunnelingConfig=ServiceAttachmentTunnelingConfig,
  UsableSubnetwork=UsableSubnetwork,
  NetworkEdgeSecurityServiceAggregatedList=NetworkEdgeSecurityServiceAggregatedList,
  ShareSettings=ShareSettings,
  InstanceTemplateAggregatedList=InstanceTemplateAggregatedList,
  ScalingScheduleStatus=ScalingScheduleStatus,
  FutureReservationStatusSpecificSKUProperties=FutureReservationStatusSpecificSKUProperties,
  RouterBgpPeer=RouterBgpPeer,
  InstanceGroupManagerInstanceFlexibilityPolicy=InstanceGroupManagerInstanceFlexibilityPolicy,
  AllocationResourceStatus=AllocationResourceStatus,
  BackendServicesScopedList=BackendServicesScopedList,
  RegionInstanceGroupManagersRecreateRequest=RegionInstanceGroupManagersRecreateRequest,
  NetworkPerformanceConfig=NetworkPerformanceConfig,
  NamedPort=NamedPort,
  DiskAggregatedList=DiskAggregatedList,
  InstancesScopedList=InstancesScopedList,
  OperationsScopedList=OperationsScopedList,
  HttpFaultInjection=HttpFaultInjection,
  MachineTypesScopedList=MachineTypesScopedList,
  SecurityPolicyAdvancedOptionsConfig=SecurityPolicyAdvancedOptionsConfig,
  StoragePoolTypesScopedList=StoragePoolTypesScopedList,
  InstanceGroupManagerStatusAllInstancesConfig=InstanceGroupManagerStatusAllInstancesConfig,
  InterconnectRemoteLocationConstraintsSubnetLengthRange=InterconnectRemoteLocationConstraintsSubnetLengthRange,
  NodeGroupsAddNodesRequest=NodeGroupsAddNodesRequest,
  TargetPoolAggregatedList=TargetPoolAggregatedList,
  PublicAdvertisedPrefixPublicDelegatedPrefix=PublicAdvertisedPrefixPublicDelegatedPrefix,
  InterconnectsGetDiagnosticsResponse=InterconnectsGetDiagnosticsResponse,
  ForwardingRuleAggregatedList=ForwardingRuleAggregatedList,
  NodeGroupsScopedList=NodeGroupsScopedList,
  SslCertificateAggregatedList=SslCertificateAggregatedList,
  BackendServiceAggregatedList=BackendServiceAggregatedList,
  InstanceGroupManagerVersion=InstanceGroupManagerVersion,
  PreservedStatePreservedDisk=PreservedStatePreservedDisk,
  ShieldedInstanceIdentity=ShieldedInstanceIdentity,
  VpnGatewayStatusHighAvailabilityRequirementState=VpnGatewayStatusHighAvailabilityRequirementState,
  ProjectsGetXpnResources=ProjectsGetXpnResources,
  NodeTemplateNodeTypeFlexibility=NodeTemplateNodeTypeFlexibility,
  InstanceGroup=InstanceGroup,
  NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy=NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy,
  MachineImage=MachineImage,
  TargetTcpProxy=TargetTcpProxy,
  DisksRemoveResourcePoliciesRequest=DisksRemoveResourcePoliciesRequest,
  AllocationAggregateReservationReservedResourceInfoAccelerator=AllocationAggregateReservationReservedResourceInfoAccelerator,
  ZoneSetLabelsRequest=ZoneSetLabelsRequest,
  RouterAggregatedList=RouterAggregatedList,
  NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy=NetworksGetEffectiveFirewallsResponseOrganizationFirewallPolicy,
  AddressesScopedList=AddressesScopedList,
  Subnetwork=Subnetwork,
  VpnGatewayStatusVpnConnection=VpnGatewayStatusVpnConnection,
  MetadataFilter=MetadataFilter,
  UpcomingMaintenance=UpcomingMaintenance,
  Backend=Backend,
  GRPCHealthCheck=GRPCHealthCheck,
  PublicDelegatedPrefixesScopedList=PublicDelegatedPrefixesScopedList,
  HttpHeaderAction=HttpHeaderAction,
  ConnectionDraining=ConnectionDraining,
  BackendServiceIAP=BackendServiceIAP,
  RegionTargetHttpsProxiesSetSslCertificatesRequest=RegionTargetHttpsProxiesSetSslCertificatesRequest,
  ServiceAttachment=ServiceAttachment,
  BackendBucket=BackendBucket,
  ForwardingRuleReference=ForwardingRuleReference,
  InstanceConsumptionInfo=InstanceConsumptionInfo,
  SerialPortOutput=SerialPortOutput,
  InterconnectAttachmentConfigurationConstraints=InterconnectAttachmentConfigurationConstraints,
  TargetPoolsRemoveHealthCheckRequest=TargetPoolsRemoveHealthCheckRequest,
  RouterList=RouterList,
  InstanceGroupManagersListErrorsResponse=InstanceGroupManagersListErrorsResponse,
  SnapshotList=SnapshotList,
  WafExpressionSetExpression=WafExpressionSetExpression,
  NetworksAddPeeringRequest=NetworksAddPeeringRequest,
  VpnGatewayAggregatedList=VpnGatewayAggregatedList,
  InstantSnapshotAggregatedList=InstantSnapshotAggregatedList,
  InstanceGroupManagerStatusStateful=InstanceGroupManagerStatusStateful,
  StoragePoolTypeAggregatedList=StoragePoolTypeAggregatedList,
  PreservedStatePreservedNetworkIpIpAddress=PreservedStatePreservedNetworkIpIpAddress,
  InstanceGroupsRemoveInstancesRequest=InstanceGroupsRemoveInstancesRequest,
  ResourceStatusScheduling=ResourceStatusScheduling,
  RegionInstanceGroupManagersSetTemplateRequest=RegionInstanceGroupManagersSetTemplateRequest,
  LogConfig=LogConfig,
  TargetSslProxyList=TargetSslProxyList,
  ReservationList=ReservationList,
  HttpFaultAbort=HttpFaultAbort,
  DiskList=DiskList,
  TargetSslProxiesSetProxyHeaderRequest=TargetSslProxiesSetProxyHeaderRequest,
  Network=Network,
  GlobalAddressesMoveRequest=GlobalAddressesMoveRequest,
  StoragePoolList=StoragePoolList,
  ProjectsSetDefaultNetworkTierRequest=ProjectsSetDefaultNetworkTierRequest,
  AddressAggregatedList=AddressAggregatedList,
  BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy=BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy,
  RouterInterface=RouterInterface,
  ExternalVpnGatewayList=ExternalVpnGatewayList,
  SetCommonInstanceMetadataOperationMetadata=SetCommonInstanceMetadataOperationMetadata,
  HttpHeaderOption=HttpHeaderOption,
  GlobalSetPolicyRequest=GlobalSetPolicyRequest,
  ResourcePolicyInstanceSchedulePolicy=ResourcePolicyInstanceSchedulePolicy,
  BackendServiceHttpCookie=BackendServiceHttpCookie,
  ForwardingRule=ForwardingRule,
  RequestMirrorPolicy=RequestMirrorPolicy,
  AllocationResourceStatusSpecificSKUAllocation=AllocationResourceStatusSpecificSKUAllocation,
  BackendServiceCdnPolicy=BackendServiceCdnPolicy,
  NodeGroupMaintenanceWindow=NodeGroupMaintenanceWindow,
  RouterMd5AuthenticationKey=RouterMd5AuthenticationKey,
  LogConfigCloudAuditOptions=LogConfigCloudAuditOptions,
  TargetPoolList=TargetPoolList,
  InstanceGroupManagerInstanceFlexibilityPolicyInstanceSelection=InstanceGroupManagerInstanceFlexibilityPolicyInstanceSelection,
  PublicAdvertisedPrefix=PublicAdvertisedPrefix,
  RegionInstanceGroupManagersStartInstancesRequest=RegionInstanceGroupManagersStartInstancesRequest,
  AutoscalingPolicyScaleInControl=AutoscalingPolicyScaleInControl,
  UsageExportLocation=UsageExportLocation,
  License=License,
  RoutersListRoutePolicies=RoutersListRoutePolicies,
  TargetPoolInstanceHealth=TargetPoolInstanceHealth,
  BulkInsertInstanceResourcePerInstanceProperties=BulkInsertInstanceResourcePerInstanceProperties,
  ShieldedInstanceConfig=ShieldedInstanceConfig,
  ReservationsResizeRequest=ReservationsResizeRequest,
  FirewallPolicyRuleMatcherLayer4Config=FirewallPolicyRuleMatcherLayer4Config,
  FutureReservationsListResponse=FutureReservationsListResponse,
  TargetPoolsScopedList=TargetPoolsScopedList,
  AutoscalingPolicyLoadBalancingUtilization=AutoscalingPolicyLoadBalancingUtilization,
  FileContentBuffer=FileContentBuffer,
  FutureReservationsScopedList=FutureReservationsScopedList,
  RegionInstanceGroupManagersListInstancesResponse=RegionInstanceGroupManagersListInstancesResponse,
  SslPoliciesScopedList=SslPoliciesScopedList,
  FirewallList=FirewallList,
  LocationPolicy=LocationPolicy,
  HTTPSHealthCheck=HTTPSHealthCheck,
  SslPolicyReference=SslPolicyReference,
  InstancesStartWithEncryptionKeyRequest=InstancesStartWithEncryptionKeyRequest,
  LocationPolicyLocationConstraints=LocationPolicyLocationConstraints,
  BackendService=BackendService,
  NetworkEndpointGroupCloudRun=NetworkEndpointGroupCloudRun,
  DiskInstantiationConfig=DiskInstantiationConfig,
  ForwardingRulesScopedList=ForwardingRulesScopedList,
  BgpRouteAsPath=BgpRouteAsPath,
  InstanceGroupManagersSetAutoHealingRequest=InstanceGroupManagersSetAutoHealingRequest,
  WafExpressionSet=WafExpressionSet,
  StatefulPolicyPreservedStateDiskDevice=StatefulPolicyPreservedStateDiskDevice,
  OrganizationSecurityPoliciesListAssociationsResponse=OrganizationSecurityPoliciesListAssociationsResponse,
  InterconnectMacsecPreSharedKey=InterconnectMacsecPreSharedKey,
  InstanceGroupManagersAbandonInstancesRequest=InstanceGroupManagersAbandonInstancesRequest,
  InstantSnapshotList=InstantSnapshotList,
  InstanceGroupManagerStatus=InstanceGroupManagerStatus,
  InstanceListReferrers=InstanceListReferrers,
  NetworkEdgeSecurityServicesScopedList=NetworkEdgeSecurityServicesScopedList,
  DeprecationStatus=DeprecationStatus,
  DisksScopedList=DisksScopedList,
  Metadata=Metadata,
  Region=Region,
  CustomerEncryptionKeyProtectedDisk=CustomerEncryptionKeyProtectedDisk,
  NodeTemplateList=NodeTemplateList,
  ResourcePolicySnapshotSchedulePolicySnapshotProperties=ResourcePolicySnapshotSchedulePolicySnapshotProperties,
  DiskResourceStatus=DiskResourceStatus,
  DiskTypeAggregatedList=DiskTypeAggregatedList,
  InstanceGroupManagersResumeInstancesRequest=InstanceGroupManagersResumeInstancesRequest,
  RegionInstanceGroupManagerDeleteInstanceConfigReq=RegionInstanceGroupManagerDeleteInstanceConfigReq,
  FirewallPolicy=FirewallPolicy,
  AWSV4Signature=AWSV4Signature,
  ResourceStatus=ResourceStatus,
  UrlMapsAggregatedList=UrlMapsAggregatedList,
  BgpRouteNetworkLayerReachabilityInformation=BgpRouteNetworkLayerReachabilityInformation,
  RegionInstanceGroupManagersSuspendInstancesRequest=RegionInstanceGroupManagersSuspendInstancesRequest,
  StoragePool=StoragePool,
  XpnHostList=XpnHostList,
  DistributionPolicy=DistributionPolicy,
  BfdStatusPacketCounts=BfdStatusPacketCounts,
  ErrorInfo=ErrorInfo,
  BackendServiceUsedBy=BackendServiceUsedBy,
  Router=Router,
  ReservationsScopedList=ReservationsScopedList,
  AutoscalingPolicyScaleDownControl=AutoscalingPolicyScaleDownControl,
  SslCertificate=SslCertificate,
  InstanceReference=InstanceReference,
  AuditLogConfig=AuditLogConfig,
  HealthCheckService=HealthCheckService,
  LicenseResourceRequirements=LicenseResourceRequirements,
  NetworkEndpointGroupList=NetworkEndpointGroupList,
  AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk=AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk,
  TargetSslProxiesSetBackendServiceRequest=TargetSslProxiesSetBackendServiceRequest,
  OperationAggregatedList=OperationAggregatedList,
  RouterStatusNatStatusNatRuleStatus=RouterStatusNatStatusNatRuleStatus,
  StructuredEntries=StructuredEntries,
  BackendBucketCdnPolicyBypassCacheOnRequestHeader=BackendBucketCdnPolicyBypassCacheOnRequestHeader,
  RolloutPolicy=RolloutPolicy,
  RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy=RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy,
  Subsetting=Subsetting,
  AutoscalingPolicyCustomMetricUtilization=AutoscalingPolicyCustomMetricUtilization,
  SecurityPolicyRule=SecurityPolicyRule,
  PublicDelegatedPrefixAggregatedList=PublicDelegatedPrefixAggregatedList,
  Quota=Quota,
  NetworkEndpointGroupsListNetworkEndpoints=NetworkEndpointGroupsListNetworkEndpoints,
  AdvancedMachineFeatures=AdvancedMachineFeatures,
  LicenseCodeLicenseAlias=LicenseCodeLicenseAlias,
  BackendServiceLogConfig=BackendServiceLogConfig,
  RegionSetLabelsRequest=RegionSetLabelsRequest,
  NetworkEndpointGroupLbNetworkEndpointGroup=NetworkEndpointGroupLbNetworkEndpointGroup,
  InterconnectOutageNotification=InterconnectOutageNotification,
  InstanceGroupAggregatedList=InstanceGroupAggregatedList,
  ReservationAffinity=ReservationAffinity,
  PacketMirroringAggregatedList=PacketMirroringAggregatedList,
  HealthCheck=HealthCheck,
  NodeTypeList=NodeTypeList,
  RoutersPreviewResponse=RoutersPreviewResponse,
  RouterStatusNatStatus=RouterStatusNatStatus,
  StatefulPolicyPreservedState=StatefulPolicyPreservedState,
  ShieldedVmIntegrityPolicy=ShieldedVmIntegrityPolicy,
  CustomerEncryptionKey=CustomerEncryptionKey,
  ExchangedPeeringRoute=ExchangedPeeringRoute,
  LicenseCode=LicenseCode,
  PathRule=PathRule,
  NetworkEndpointGroupsAttachEndpointsRequest=NetworkEndpointGroupsAttachEndpointsRequest,
  InstanceManagedByIgmError=InstanceManagedByIgmError,
  InstanceGroupManagerAutoHealingPolicy=InstanceGroupManagerAutoHealingPolicy,
  InstanceGroupManagersListPerInstanceConfigsResp=InstanceGroupManagersListPerInstanceConfigsResp,
  VmEndpointNatMappingsInterfaceNatMappings=VmEndpointNatMappingsInterfaceNatMappings,
  SecurityPolicyReference=SecurityPolicyReference,
  InstantSnapshotResourceStatus=InstantSnapshotResourceStatus,
  AcceleratorTypeAggregatedList=AcceleratorTypeAggregatedList,
  FirewallPolicyRuleMatcher=FirewallPolicyRuleMatcher,
  Screenshot=Screenshot,
  BackendServiceCdnPolicyBypassCacheOnRequestHeader=BackendServiceCdnPolicyBypassCacheOnRequestHeader,
  BackendServiceLocalityLoadBalancingPolicyConfigPolicy=BackendServiceLocalityLoadBalancingPolicyConfigPolicy,
  InstanceGroupManagerResourcePolicies=InstanceGroupManagerResourcePolicies,
  InstanceProperties=InstanceProperties,
  ResourceGroupReference=ResourceGroupReference,
  TargetPoolsRemoveInstanceRequest=TargetPoolsRemoveInstanceRequest,
  UsableSubnetworkSecondaryRange=UsableSubnetworkSecondaryRange,
  InterconnectMacsec=InterconnectMacsec,
  RouterBgpPeerCustomLearnedIpRange=RouterBgpPeerCustomLearnedIpRange,
  PacketMirroringNetworkInfo=PacketMirroringNetworkInfo,
  SubnetworksSetPrivateIpGoogleAccessRequest=SubnetworksSetPrivateIpGoogleAccessRequest,
  HealthCheckLogConfig=HealthCheckLogConfig,
  SslCertificateManagedSslCertificate=SslCertificateManagedSslCertificate,
  ManagedInstance=ManagedInstance,
  HttpHealthCheckList=HttpHealthCheckList,
  GlobalSetLabelsRequest=GlobalSetLabelsRequest,
  HealthStatusForNetworkEndpoint=HealthStatusForNetworkEndpoint,
  Instance=Instance,
  InstanceGroupManagerUpdatePolicy=InstanceGroupManagerUpdatePolicy,
  HttpsHealthCheckList=HttpsHealthCheckList,
  AutoscalingPolicyScalingSchedule=AutoscalingPolicyScalingSchedule,
  ForwardingRuleServiceDirectoryRegistration=ForwardingRuleServiceDirectoryRegistration,
  ResourcePolicySnapshotSchedulePolicyRetentionPolicy=ResourcePolicySnapshotSchedulePolicyRetentionPolicy,
  VpnGatewayList=VpnGatewayList,
  MachineTypeAggregatedList=MachineTypeAggregatedList,
  NetworkEndpointGroupsDetachEndpointsRequest=NetworkEndpointGroupsDetachEndpointsRequest,
  ResourceCommitment=ResourceCommitment,
  GlobalNetworkEndpointGroupsAttachEndpointsRequest=GlobalNetworkEndpointGroupsAttachEndpointsRequest,
  UrlMapReference=UrlMapReference,
  InstancesSetMachineResourcesRequest=InstancesSetMachineResourcesRequest,
  UsableSubnetworksAggregatedList=UsableSubnetworksAggregatedList,
  RegionInstanceGroupManagersDeleteInstancesRequest=RegionInstanceGroupManagersDeleteInstancesRequest,
  HttpFilterConfig=HttpFilterConfig,
  VpnGatewayStatus=VpnGatewayStatus,
  HttpRouteRuleMatch=HttpRouteRuleMatch,
  RegionInstanceGroupManagerUpdateInstanceConfigReq=RegionInstanceGroupManagerUpdateInstanceConfigReq,
  SslPoliciesAggregatedList=SslPoliciesAggregatedList,
  PacketMirroringMirroredResourceInfoSubnetInfo=PacketMirroringMirroredResourceInfoSubnetInfo,
  ManagedInstanceVersion=ManagedInstanceVersion,
  ServerBinding=ServerBinding,
  NetworkEndpointGroupAggregatedList=NetworkEndpointGroupAggregatedList,
  TargetReference=TargetReference,
  RegionInstanceGroupsListInstances=RegionInstanceGroupsListInstances,
  SecurityPolicyRulePreconfiguredWafConfigExclusion=SecurityPolicyRulePreconfiguredWafConfigExclusion,
  HealthChecksAggregatedList=HealthChecksAggregatedList,
  SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions=SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions,
  Tags=Tags,
  InstanceManagedByIgmErrorManagedInstanceError=InstanceManagedByIgmErrorManagedInstanceError,
  ResourcePolicyGroupPlacementPolicy=ResourcePolicyGroupPlacementPolicy,
  FirewallLogConfig=FirewallLogConfig,
  VpnGatewaysScopedList=VpnGatewaysScopedList,
  VpnTunnelList=VpnTunnelList,
  MetadataFilterLabelMatch=MetadataFilterLabelMatch,
  InstanceSettings=InstanceSettings,
  InstanceGroupManagerActionsSummary=InstanceGroupManagerActionsSummary,
  TCPHealthCheck=TCPHealthCheck,
  TargetTcpProxiesScopedList=TargetTcpProxiesScopedList,
  Image=Image,
  NodeTemplatesScopedList=NodeTemplatesScopedList,
  Reference=Reference,
  HealthCheckList=HealthCheckList,
  HttpHeaderMatch=HttpHeaderMatch,
  CustomErrorResponsePolicy=CustomErrorResponsePolicy,
  MachineTypeList=MachineTypeList,
  ResourcePolicyInstanceSchedulePolicySchedule=ResourcePolicyInstanceSchedulePolicySchedule,
  DisksAddResourcePoliciesRequest=DisksAddResourcePoliciesRequest,
  CacheKeyPolicy=CacheKeyPolicy,
  SecurityPolicyRuleMatcher=SecurityPolicyRuleMatcher,
  InstanceGroupManagerInstanceLifecyclePolicy=InstanceGroupManagerInstanceLifecyclePolicy,
  Scheduling=Scheduling,
  SslCertificateList=SslCertificateList,
  AttachedDiskInitializeParams=AttachedDiskInitializeParams,
  StoragePoolAggregatedList=StoragePoolAggregatedList,
  InstancesGetEffectiveFirewallsResponse=InstancesGetEffectiveFirewallsResponse,
  InterconnectDiagnosticsARPEntry=InterconnectDiagnosticsARPEntry,
  TestPermissionsResponse=TestPermissionsResponse,
  InstanceMoveRequest=InstanceMoveRequest,
  LocationPolicyLocation=LocationPolicyLocation,
  ProjectsEnableXpnResourceRequest=ProjectsEnableXpnResourceRequest,
  InstanceGroupManagerAggregatedList=InstanceGroupManagerAggregatedList,
  InstancesSetLabelsRequest=InstancesSetLabelsRequest,
  ExchangedPeeringRoutesList=ExchangedPeeringRoutesList,
  NetworkRoutingConfig=NetworkRoutingConfig,
  GlobalOrganizationSetPolicyRequest=GlobalOrganizationSetPolicyRequest,
  InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy=InstancesGetEffectiveFirewallsResponseOrganizationFirewallPolicy,
  CacheInvalidationRule=CacheInvalidationRule,
  RouterStatusBgpPeerStatus=RouterStatusBgpPeerStatus,
  RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse=RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse,
  InterconnectAttachmentAggregatedList=InterconnectAttachmentAggregatedList,
  DiskParams=DiskParams,
  SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig=SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig,
  NodeGroupList=NodeGroupList,
  RouterNatSubnetworkToNat=RouterNatSubnetworkToNat,
  InstanceGroupManagersUpdatePerInstanceConfigsReq=InstanceGroupManagersUpdatePerInstanceConfigsReq,
  SecurityPolicyRulePreconfiguredWafConfig=SecurityPolicyRulePreconfiguredWafConfig,
  WeightedBackendService=WeightedBackendService,
  ServiceAttachmentAggregatedList=ServiceAttachmentAggregatedList,
  ProjectsListXpnHostsRequest=ProjectsListXpnHostsRequest,
  NodeGroupAutoscalingPolicy=NodeGroupAutoscalingPolicy,
  InstancesSetMachineTypeRequest=InstancesSetMachineTypeRequest,
  TargetHttpProxyList=TargetHttpProxyList,
  Zone=Zone,
  VpnGateway=VpnGateway,
  RouteAsPath=RouteAsPath,
  UrlMapTestHeader=UrlMapTestHeader,
  FutureReservationStatusExistingMatchingUsageInfo=FutureReservationStatusExistingMatchingUsageInfo,
  InterconnectList=InterconnectList,
  RegionInstanceGroupManagersSetTargetPoolsRequest=RegionInstanceGroupManagersSetTargetPoolsRequest,
  NetworkAttachmentsScopedList=NetworkAttachmentsScopedList,
  FutureReservationSpecificSKUProperties=FutureReservationSpecificSKUProperties,
  HTTP2HealthCheck=HTTP2HealthCheck,
  BackendServiceReference=BackendServiceReference,
  UrlMapList=UrlMapList,
  NodeType=NodeType,
  BackendServiceCdnPolicyNegativeCachingPolicy=BackendServiceCdnPolicyNegativeCachingPolicy,
  AutoscalingPolicyCpuUtilization=AutoscalingPolicyCpuUtilization,
  LogConfigDataAccessOptions=LogConfigDataAccessOptions,
  CorsPolicy=CorsPolicy,
  TargetInstance=TargetInstance,
  InstanceGroupManagerAllInstancesConfig=InstanceGroupManagerAllInstancesConfig,
  InstancesResumeRequest=InstancesResumeRequest,
  RoutersListBgpRoutes=RoutersListBgpRoutes,
  ProjectsSetManagedProtectionTierRequest=ProjectsSetManagedProtectionTierRequest,
  SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig=SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig,
  InstanceGroupManagerStandbyPolicy=InstanceGroupManagerStandbyPolicy,
  ConsistentHashLoadBalancerSettings=ConsistentHashLoadBalancerSettings,
  ResourcePolicySnapshotSchedulePolicySchedule=ResourcePolicySnapshotSchedulePolicySchedule,
  VpnTunnelsScopedList=VpnTunnelsScopedList,
  SecurityPolicyDdosProtectionConfig=SecurityPolicyDdosProtectionConfig,
  TargetHttpsProxiesSetQuicOverrideRequest=TargetHttpsProxiesSetQuicOverrideRequest,
  NodeGroupsSetNodeTemplateRequest=NodeGroupsSetNodeTemplateRequest,
  ShieldedVmConfig=ShieldedVmConfig,
  InstanceGroupManagersSuspendInstancesRequest=InstanceGroupManagersSuspendInstancesRequest,
  InstanceGroupManagerParams=InstanceGroupManagerParams,
  InterconnectAttachmentPartnerMetadata=InterconnectAttachmentPartnerMetadata,
  TargetTcpProxiesSetProxyHeaderRequest=TargetTcpProxiesSetProxyHeaderRequest,
  TargetSslProxiesSetSslCertificatesRequest=TargetSslProxiesSetSslCertificatesRequest,
  InstancesSetServiceAccountRequest=InstancesSetServiceAccountRequest,
  InstancesBulkInsertOperationMetadata=InstancesBulkInsertOperationMetadata,
  TargetPool=TargetPool,
  VpnTunnelAggregatedList=VpnTunnelAggregatedList,
  LicensesListResponse=LicensesListResponse,
  ServiceAttachmentConnectedEndpoint=ServiceAttachmentConnectedEndpoint,
  FirewallPolicyRule=FirewallPolicyRule,
  InterconnectDiagnosticsLinkLACPStatus=InterconnectDiagnosticsLinkLACPStatus,
  LocalizedMessage=LocalizedMessage,
  RegionAddressesMoveRequest=RegionAddressesMoveRequest,
  Snapshot=Snapshot,
  RegionInstanceGroupManagersResizeAdvancedRequest=RegionInstanceGroupManagersResizeAdvancedRequest,
  InstanceTemplatesScopedList=InstanceTemplatesScopedList,
  RouterNatRule=RouterNatRule,
  ResourcePolicyResourceStatus=ResourcePolicyResourceStatus,
  XpnResourceId=XpnResourceId,
  BackendServiceListUsable=BackendServiceListUsable,
  StoragePoolsScopedList=StoragePoolsScopedList,
  TargetInstanceAggregatedList=TargetInstanceAggregatedList,
  InstancesSetMinCpuPlatformRequest=InstancesSetMinCpuPlatformRequest,
  SecurityPolicyList=SecurityPolicyList,
  InstantSnapshot=InstantSnapshot,
  InstancesAddResourcePoliciesRequest=InstancesAddResourcePoliciesRequest,
  SecurityPolicyAdvancedOptionsConfigJsonCustomConfig=SecurityPolicyAdvancedOptionsConfigJsonCustomConfig,
  NodeTypesScopedList=NodeTypesScopedList,
  FirewallPolicyList=FirewallPolicyList,
  ShareSettingsProjectConfig=ShareSettingsProjectConfig,
  SslPolicy=SslPolicy,
  TargetSslProxy=TargetSslProxy,
  PreconfiguredWafSet=PreconfiguredWafSet,
  StoragePoolTypeList=StoragePoolTypeList,
  SourceDiskEncryptionKey=SourceDiskEncryptionKey,
  InstanceTemplateList=InstanceTemplateList,
  ResourcePolicyWorkloadPolicy=ResourcePolicyWorkloadPolicy,
  VpnGatewaysGetStatusResponse=VpnGatewaysGetStatusResponse,
  PathMatcher=PathMatcher,
  FutureReservationsAggregatedListResponse=FutureReservationsAggregatedListResponse,
  ZoneSetPolicyRequest=ZoneSetPolicyRequest,
  HttpRedirectAction=HttpRedirectAction,
  RoutePolicyPolicyTerm=RoutePolicyPolicyTerm,
  Interconnect=Interconnect,
  FutureReservationStatus=FutureReservationStatus,
  Binding=Binding,
  StatefulPolicy=StatefulPolicy,
  CircuitBreakers=CircuitBreakers,
  InstanceGroupManagersResizeAdvancedRequest=InstanceGroupManagersResizeAdvancedRequest,
  HttpRouteRule=HttpRouteRule,
  NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter=NetworkEndpointGroupsListEndpointsRequestNetworkEndpointFilter,
  RouterAdvertisedIpRange=RouterAdvertisedIpRange,
  SecurityPolicyRuleHttpHeaderAction=SecurityPolicyRuleHttpHeaderAction,
  RegionInstanceGroupManagersListInstanceConfigsResp=RegionInstanceGroupManagersListInstanceConfigsResp,
  UrlMapsValidateResponse=UrlMapsValidateResponse,
  AutoscalerList=AutoscalerList,
  ShieldedVmIdentityEntry=ShieldedVmIdentityEntry,
  BackendServiceFailoverPolicy=BackendServiceFailoverPolicy,
  TargetInstanceList=TargetInstanceList,
  InstanceGroupsAddInstancesRequest=InstanceGroupsAddInstancesRequest,
  ManagedInstancePropertiesFromFlexibilityPolicy=ManagedInstancePropertiesFromFlexibilityPolicy,
  PacketIntervals=PacketIntervals,
  PerInstanceConfig=PerInstanceConfig,
  Reservation=Reservation,
  SslPoliciesList=SslPoliciesList,
  ResourcePolicy=ResourcePolicy,
  TargetHttpProxiesScopedList=TargetHttpProxiesScopedList,
  TargetHttpsProxiesSetCertificateMapRequest=TargetHttpsProxiesSetCertificateMapRequest,
  DistributionPolicyZoneConfiguration=DistributionPolicyZoneConfiguration,
  ResourcePolicyWeeklyCycle=ResourcePolicyWeeklyCycle,
  FutureReservationTimeWindow=FutureReservationTimeWindow,
  ShieldedInstanceIntegrityPolicy=ShieldedInstanceIntegrityPolicy,
  SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig=SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig,
  UrlRewrite=UrlRewrite,
  PacketMirroringsScopedList=PacketMirroringsScopedList,
  InterconnectLocationRegionInfo=InterconnectLocationRegionInfo,
  NetworksRemovePeeringRequest=NetworksRemovePeeringRequest,
  PreservedState=PreservedState,
  UrlMap=UrlMap,
  AutoscalerAggregatedList=AutoscalerAggregatedList,
  Commitment=Commitment,
  RegionUrlMapsValidateRequest=RegionUrlMapsValidateRequest,
  InterconnectDiagnosticsLinkOpticalPower=InterconnectDiagnosticsLinkOpticalPower,
  SavedAttachedDisk=SavedAttachedDisk,
  DisksResizeRequest=DisksResizeRequest,
  PublicDelegatedPrefix=PublicDelegatedPrefix,
  InterconnectMacsecConfigPreSharedKey=InterconnectMacsecConfigPreSharedKey,
  PacketMirroring=PacketMirroring,
  ResourcePolicyHourlyCycle=ResourcePolicyHourlyCycle,
  SecurityPoliciesScopedList=SecurityPoliciesScopedList,
  InstancesSetNameRequest=InstancesSetNameRequest,
  ManagedInstanceAllInstancesConfig=ManagedInstanceAllInstancesConfig,
  DiskAsyncReplicationList=DiskAsyncReplicationList,
  RouterStatusResponse=RouterStatusResponse,
  NetworkEdgeSecurityService=NetworkEdgeSecurityService,
  InstanceGroupManagersDeleteInstancesRequest=InstanceGroupManagersDeleteInstancesRequest,
  StoragePoolDisk=StoragePoolDisk,
  StatefulPolicyPreservedStateNetworkIp=StatefulPolicyPreservedStateNetworkIp,
  PacketMirroringMirroredResourceInfo=PacketMirroringMirroredResourceInfo,
  InstanceTemplate=InstanceTemplate,
  Project=Project,
  NotificationEndpointGrpcSettings=NotificationEndpointGrpcSettings,
  InstanceGroupManagerStatusStatefulPerInstanceConfigs=InstanceGroupManagerStatusStatefulPerInstanceConfigs,
  BackendServiceGroupHealth=BackendServiceGroupHealth,
  SslCertificatesScopedList=SslCertificatesScopedList,
  PublicAdvertisedPrefixList=PublicAdvertisedPrefixList,
  NetworkAttachmentAggregatedList=NetworkAttachmentAggregatedList,
  TargetHttpProxy=TargetHttpProxy,
  AllocationAggregateReservation=AllocationAggregateReservation,
  InstanceGroupManagersCreateInstancesRequest=InstanceGroupManagersCreateInstancesRequest,
  StoragePoolResourceStatus=StoragePoolResourceStatus,
  NatIpInfo=NatIpInfo,
  TargetGrpcProxy=TargetGrpcProxy,
  TargetHttpsProxiesScopedList=TargetHttpsProxiesScopedList,
  UrlMapTest=UrlMapTest,
  NetworkEndpointWithHealthStatus=NetworkEndpointWithHealthStatus,
  LicenseResourceCommitment=LicenseResourceCommitment,
  DisksStopGroupAsyncReplicationResource=DisksStopGroupAsyncReplicationResource,
  NetworksUpdatePeeringRequest=NetworksUpdatePeeringRequest,
  ImageFamilyView=ImageFamilyView,
  SnapshotSettingsStorageLocationSettingsStorageLocationPreference=SnapshotSettingsStorageLocationSettingsStorageLocationPreference,
  SecurityPoliciesWafConfig=SecurityPoliciesWafConfig,
  InstanceGroupManagerResizeRequestStatus=InstanceGroupManagerResizeRequestStatus,
  NetworkAttachmentConnectedEndpoint=NetworkAttachmentConnectedEndpoint,
  SecurityPolicyAdaptiveProtectionConfig=SecurityPolicyAdaptiveProtectionConfig,
  SecurityPolicyUserDefinedField=SecurityPolicyUserDefinedField,
  TargetHttpsProxiesSetSslCertificatesRequest=TargetHttpsProxiesSetSslCertificatesRequest,
  HttpRouteAction=HttpRouteAction,
  InstanceGroupManagerInstanceFlexibilityPolicyProvisioningModelMix=InstanceGroupManagerInstanceFlexibilityPolicyProvisioningModelMix,
  ExternalVpnGatewayInterface=ExternalVpnGatewayInterface,
  BfdPacket=BfdPacket,
  AddressList=AddressList,
  VpnGatewayVpnGatewayInterface=VpnGatewayVpnGatewayInterface,
  GuestOsFeature=GuestOsFeature,
  ResourcePolicyWeeklyCycleDayOfWeek=ResourcePolicyWeeklyCycleDayOfWeek,
  VmEndpointNatMappings=VmEndpointNatMappings,
  RegionInstanceGroupManagersApplyUpdatesRequest=RegionInstanceGroupManagersApplyUpdatesRequest,
  ProjectsDisableXpnResourceRequest=ProjectsDisableXpnResourceRequest,
  ForwardingRuleList=ForwardingRuleList,
  HealthCheckReference=HealthCheckReference,
  TargetTcpProxiesSetBackendServiceRequest=TargetTcpProxiesSetBackendServiceRequest,
  SignedUrlKey=SignedUrlKey,
  GlobalNetworkEndpointGroupsDetachEndpointsRequest=GlobalNetworkEndpointGroupsDetachEndpointsRequest,
  BackendBucketCdnPolicyCacheKeyPolicy=BackendBucketCdnPolicyCacheKeyPolicy,
  InterconnectRemoteLocation=InterconnectRemoteLocation,
  AcceleratorTypesScopedList=AcceleratorTypesScopedList,
  Address=Address,
  OutlierDetection=OutlierDetection,
  Policy=Policy,
  BfdStatus=BfdStatus,
  FutureReservation=FutureReservation,
  TargetHttpsProxy=TargetHttpsProxy,
  SecuritySettings=SecuritySettings,
  BulkInsertInstanceResource=BulkInsertInstanceResource,
  NodeGroupAggregatedList=NodeGroupAggregatedList,
  InstanceGroupsListInstances=InstanceGroupsListInstances,
  AcceleratorTypeList=AcceleratorTypeList,
  NetworkEndpointGroupAppEngine=NetworkEndpointGroupAppEngine,
  NetworkAttachmentList=NetworkAttachmentList,
  BackendBucketList=BackendBucketList,
  RouteList=RouteList,
  AcceleratorType=AcceleratorType,
  InstanceGroupManagersApplyUpdatesRequest=InstanceGroupManagersApplyUpdatesRequest,
  SchedulingOnInstanceStopAction=SchedulingOnInstanceStopAction,
  SourceInstanceParams=SourceInstanceParams,
  InstanceGroupManagersPatchPerInstanceConfigsReq=InstanceGroupManagersPatchPerInstanceConfigsReq,
  InstanceGroupsScopedList=InstanceGroupsScopedList,
  RouterNat=RouterNat,
  FutureReservationStatusLastKnownGoodStateFutureReservationSpecs=FutureReservationStatusLastKnownGoodStateFutureReservationSpecs,
  InstantSnapshotsScopedList=InstantSnapshotsScopedList,
  GuestAttributes=GuestAttributes,
  NodeGroup=NodeGroup,
  RoutersGetRoutePolicyResponse=RoutersGetRoutePolicyResponse,
  NotificationEndpointList=NotificationEndpointList,
  InterconnectLocationList=InterconnectLocationList,
  SecurityPolicyAdaptiveProtectionConfigAutoDeployConfig=SecurityPolicyAdaptiveProtectionConfigAutoDeployConfig,
  PreservedStatePreservedNetworkIp=PreservedStatePreservedNetworkIp,
  StoragePoolListDisks=StoragePoolListDisks,
  SSLHealthCheck=SSLHealthCheck,
  TargetTcpProxyAggregatedList=TargetTcpProxyAggregatedList,
  FirewallPoliciesListAssociationsResponse=FirewallPoliciesListAssociationsResponse,
  HostRule=HostRule,
  RegionInstanceGroupManagersResumeInstancesRequest=RegionInstanceGroupManagersResumeInstancesRequest,
  AllocationSpecificSKUReservation=AllocationSpecificSKUReservation,
  NetworkEndpointGroupsScopedList=NetworkEndpointGroupsScopedList,
  NetworkEndpointGroupCloudFunction=NetworkEndpointGroupCloudFunction,
  HealthChecksScopedList=HealthChecksScopedList,
  NetworkEndpointGroup=NetworkEndpointGroup,
  NatIpInfoResponse=NatIpInfoResponse,
  NodeGroupsPerformMaintenanceRequest=NodeGroupsPerformMaintenanceRequest,
  InstanceGroupManagersListManagedInstancesResponse=InstanceGroupManagersListManagedInstancesResponse,
  BackendBucketCdnPolicyNegativeCachingPolicy=BackendBucketCdnPolicyNegativeCachingPolicy,
  SecurityPolicyRuleRateLimitOptions=SecurityPolicyRuleRateLimitOptions,
  AutoscalingPolicy=AutoscalingPolicy,
  InstanceSettingsMetadata=InstanceSettingsMetadata,
  BackendServiceLocalityLoadBalancingPolicyConfig=BackendServiceLocalityLoadBalancingPolicyConfig,
  SslPoliciesListAvailableFeaturesResponse=SslPoliciesListAvailableFeaturesResponse,
  Rule=Rule,
  RegionInstanceGroupManagersAbandonInstancesRequest=RegionInstanceGroupManagersAbandonInstancesRequest,
  Autoscaler=Autoscaler,
  TargetHttpsProxyAggregatedList=TargetHttpsProxyAggregatedList,
  TestFailure=TestFailure,
  AllocationReservationSharingPolicy=AllocationReservationSharingPolicy,
  InstanceGroupManagersDeletePerInstanceConfigsReq=InstanceGroupManagersDeletePerInstanceConfigsReq,
  FirewallPolicyAssociation=FirewallPolicyAssociation,
  InstanceGroupsListInstancesRequest=InstanceGroupsListInstancesRequest,
  HttpRetryPolicy=HttpRetryPolicy,
  RegionSetPolicyRequest=RegionSetPolicyRequest,
  InterconnectsGetMacsecConfigResponse=InterconnectsGetMacsecConfigResponse,
  InstanceGroupManagersScopedList=InstanceGroupManagersScopedList,
  SecurityPolicyAssociation=SecurityPolicyAssociation,
  InterconnectRemoteLocationList=InterconnectRemoteLocationList,
  BackendServiceList=BackendServiceList,
  ResourcePolicySnapshotSchedulePolicy=ResourcePolicySnapshotSchedulePolicy,
  AccessConfig=AccessConfig,
  RegionAutoscalerList=RegionAutoscalerList,
  DisplayDevice=DisplayDevice,
  OperationList=OperationList,
  Route=Route,
  ManagedInstanceInstanceHealth=ManagedInstanceInstanceHealth,
  PublicDelegatedPrefixPublicDelegatedSubPrefix=PublicDelegatedPrefixPublicDelegatedSubPrefix,
  InstanceList=InstanceList,
  ProjectsSetCloudArmorTierRequest=ProjectsSetCloudArmorTierRequest,
  InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy=InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy,
  RegionInstanceGroupManagersCreateInstancesRequest=RegionInstanceGroupManagersCreateInstancesRequest,
  HealthStatus=HealthStatus,
  SchedulingNodeAffinity=SchedulingNodeAffinity,
  Operation=Operation,
  RouterNatRuleAction=RouterNatRuleAction,
  TargetPoolsAddInstanceRequest=TargetPoolsAddInstanceRequest,
  SslCertificateSelfManagedSslCertificate=SslCertificateSelfManagedSslCertificate,
  ResourcePolicyAggregatedList=ResourcePolicyAggregatedList,
  AcceleratorConfig=AcceleratorConfig,
  InstanceGroupManagerResizeRequest=InstanceGroupManagerResizeRequest,
  RouterStatus=RouterStatus,
  LogConfigCounterOptionsCustomField=LogConfigCounterOptionsCustomField,
  AutoscalerStatusDetails=AutoscalerStatusDetails,
  NetworkEndpointGroupsListEndpointsRequest=NetworkEndpointGroupsListEndpointsRequest,
  NetworkEndpoint=NetworkEndpoint,
  FutureReservationStatusLastKnownGoodState=FutureReservationStatusLastKnownGoodState,
  SubnetworksScopedList=SubnetworksScopedList,
  SubnetworkAggregatedList=SubnetworkAggregatedList,
  InterconnectAttachmentPrivateInfo=InterconnectAttachmentPrivateInfo,
  HttpQueryParameterMatch=HttpQueryParameterMatch,
  InterconnectLocation=InterconnectLocation,
  ResourcePolicyResourceStatusInstanceSchedulePolicyStatus=ResourcePolicyResourceStatusInstanceSchedulePolicyStatus,
  SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo=SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo,
  DiskResourceStatusAsyncReplicationStatus=DiskResourceStatusAsyncReplicationStatus,
  CommitmentAggregatedList=CommitmentAggregatedList,
  PacketMirroringForwardingRuleInfo=PacketMirroringForwardingRuleInfo,
  TargetHttpProxyAggregatedList=TargetHttpProxyAggregatedList,
  InterconnectAttachmentList=InterconnectAttachmentList,
  NatIpInfoNatIpInfoMapping=NatIpInfoNatIpInfoMapping,
  InstanceConsumptionData=InstanceConsumptionData,
  NodeTemplateAggregatedList=NodeTemplateAggregatedList,
  RegionCommitmentsUpdateReservationsRequest=RegionCommitmentsUpdateReservationsRequest,
  MachineImageList=MachineImageList,
  InterconnectCircuitInfo=InterconnectCircuitInfo,
  LocalDisk=LocalDisk,
  ServiceAttachmentConsumerProjectLimit=ServiceAttachmentConsumerProjectLimit,
  SubnetworkLogConfig=SubnetworkLogConfig,
  InterconnectDiagnosticsLinkStatus=InterconnectDiagnosticsLinkStatus,
  LogConfigCounterOptions=LogConfigCounterOptions,
  NetworkEndpointGroupServerlessDeployment=NetworkEndpointGroupServerlessDeployment,
  InstanceWithNamedPorts=InstanceWithNamedPorts,
  PartnerMetadata=PartnerMetadata,
  RegionDisksStartAsyncReplicationRequest=RegionDisksStartAsyncReplicationRequest,
  UrlMapsScopedList=UrlMapsScopedList,
  TargetGrpcProxyList=TargetGrpcProxyList,
  CustomErrorResponsePolicyCustomErrorResponseRule=CustomErrorResponsePolicyCustomErrorResponseRule,
  SecurityPolicyRuleNetworkMatcher=SecurityPolicyRuleNetworkMatcher,
  Firewall=Firewall,
  Condition=Condition,
  InterconnectRemoteLocationPermittedConnections=InterconnectRemoteLocationPermittedConnections,
  CommitmentsScopedList=CommitmentsScopedList,
  TargetInstancesScopedList=TargetInstancesScopedList,
  NetworksGetEffectiveFirewallsResponse=NetworksGetEffectiveFirewallsResponse,
  UrlMapsValidateRequest=UrlMapsValidateRequest,
  RegionInstanceGroupManagersSetAutoHealingRequest=RegionInstanceGroupManagersSetAutoHealingRequest,
  InstancesSetSecurityPolicyRequest=InstancesSetSecurityPolicyRequest,
  InstancesRemoveResourcePoliciesRequest=InstancesRemoveResourcePoliciesRequest,
  ManagedInstanceLastAttempt=ManagedInstanceLastAttempt,
  HttpFaultDelay=HttpFaultDelay,
  InstanceGroupManagersStopInstancesRequest=InstanceGroupManagersStopInstancesRequest,
  HttpHealthCheck=HttpHealthCheck,
  NodeGroupsSimulateMaintenanceEventRequest=NodeGroupsSimulateMaintenanceEventRequest,
  NodeGroupsListNodes=NodeGroupsListNodes,
  RegionNetworkEndpointGroupsAttachEndpointsRequest=RegionNetworkEndpointGroupsAttachEndpointsRequest,
  PublicDelegatedPrefixList=PublicDelegatedPrefixList,
  DiskAsyncReplication=DiskAsyncReplication,
  NetworkList=NetworkList,
  InstanceGroupManagerResizeRequestsListResponse=InstanceGroupManagerResizeRequestsListResponse,
  InstanceGroupManagerList=InstanceGroupManagerList,
  TestPermissionsRequest=TestPermissionsRequest,
  ReservationAggregatedList=ReservationAggregatedList,
  QuotaExceededInfo=QuotaExceededInfo,
  BackendServiceConnectionTrackingPolicy=BackendServiceConnectionTrackingPolicy,
  InterconnectDiagnostics=InterconnectDiagnostics,
  InterconnectAttachment=InterconnectAttachment,
  ResourcePolicyDiskConsistencyGroupPolicy=ResourcePolicyDiskConsistencyGroupPolicy,
  HelpLink=HelpLink,
  DiskTypesScopedList=DiskTypesScopedList,
  PacketMirroringMirroredResourceInfoInstanceInfo=PacketMirroringMirroredResourceInfoInstanceInfo,
  SecurityPolicyRecaptchaOptionsConfig=SecurityPolicyRecaptchaOptionsConfig,
  ServiceAttachmentList=ServiceAttachmentList,
  TargetSslProxiesSetCertificateMapRequest=TargetSslProxiesSetCertificateMapRequest,
  InterconnectRemoteLocationConstraints=InterconnectRemoteLocationConstraints,
  InitialStateConfig=InitialStateConfig,
  BundledLocalSsds=BundledLocalSsds,
  MachineType=MachineType,
  NetworkInterface=NetworkInterface,
  SubnetworkSecondaryRange=SubnetworkSecondaryRange,
  FirewallPolicyRuleSecureTag=FirewallPolicyRuleSecureTag,
  Uint128=Uint128,
  ShieldedVmIdentity=ShieldedVmIdentity,
  SavedDisk=SavedDisk,
  RegionInstanceGroupList=RegionInstanceGroupList,
  SnapshotSettingsStorageLocationSettings=SnapshotSettingsStorageLocationSettings,
  TargetPoolsAddHealthCheckRequest=TargetPoolsAddHealthCheckRequest,
  RegionDisksAddResourcePoliciesRequest=RegionDisksAddResourcePoliciesRequest,
  ServiceAttachmentsScopedList=ServiceAttachmentsScopedList,
  UrlMapValidationResult=UrlMapValidationResult,
  Expr=Expr,
  NodeTemplate=NodeTemplate,
  SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch=SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch,
  VmEndpointNatMappingsList=VmEndpointNatMappingsList,
  RegionInstanceGroupManagersListErrorsResponse=RegionInstanceGroupManagersListErrorsResponse,
  InstanceGroupManagersSetTargetPoolsRequest=InstanceGroupManagersSetTargetPoolsRequest,
  NodeTypeAggregatedList=NodeTypeAggregatedList,
  HealthCheckServicesList=HealthCheckServicesList,
  HTTPHealthCheck=HTTPHealthCheck,
  InstanceManagedByIgmErrorInstanceActionDetails=InstanceManagedByIgmErrorInstanceActionDetails,
  InterconnectDiagnosticsMacsecStatus=InterconnectDiagnosticsMacsecStatus,
  StoragePoolType=StoragePoolType,
  SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams=SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams,
  InstanceGroupManagerResizeRequestStatusLastAttempt=InstanceGroupManagerResizeRequestStatusLastAttempt,
  InstanceGroupsSetNamedPortsRequest=InstanceGroupsSetNamedPortsRequest,
  RegionInstanceGroupManagersStopInstancesRequest=RegionInstanceGroupManagersStopInstancesRequest,
  SourceInstanceProperties=SourceInstanceProperties,
  RoutePolicy=RoutePolicy,
  InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange=InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange,
  SecurityPolicyRuleRedirectOptions=SecurityPolicyRuleRedirectOptions,
  PacketMirroringList=PacketMirroringList,
  BulkInsertDiskResource=BulkInsertDiskResource,
  FixedOrPercent=FixedOrPercent,
  ResourcePoliciesScopedList=ResourcePoliciesScopedList,
  ConfidentialInstanceConfig=ConfidentialInstanceConfig,
  GuestAttributesEntry=GuestAttributesEntry,
  NetworkAttachment=NetworkAttachment,
  SecurityPolicyRuleHttpHeaderActionHttpHeaderOption=SecurityPolicyRuleHttpHeaderActionHttpHeaderOption,
  TargetVpnGatewayList=TargetVpnGatewayList,
  NodeGroupsDeleteNodesRequest=NodeGroupsDeleteNodesRequest,
  RegionInstanceGroupManagerPatchInstanceConfigReq=RegionInstanceGroupManagerPatchInstanceConfigReq,
  AuditConfig=AuditConfig,
  RoutersScopedList=RoutersScopedList,
  BulkInsertOperationStatus=BulkInsertOperationStatus,
  RegionInstanceGroupsListInstancesRequest=RegionInstanceGroupsListInstancesRequest,
  NotificationEndpoint=NotificationEndpoint,
  Int64RangeMatch=Int64RangeMatch,
  SecurityPolicyRuleMatcherExprOptions=SecurityPolicyRuleMatcherExprOptions,
  HealthCheckServiceReference=HealthCheckServiceReference,
  ZoneList=ZoneList,
  InstanceGroupManagerStatusVersionTarget=InstanceGroupManagerStatusVersionTarget,
  InstanceGroupManagersRecreateInstancesRequest=InstanceGroupManagersRecreateInstancesRequest,
  InstanceGroupManagersSetInstanceTemplateRequest=InstanceGroupManagersSetInstanceTemplateRequest,
  VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings=VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings,
  GuestAttributesValue=GuestAttributesValue,
  InterconnectMacsecConfig=InterconnectMacsecConfig,
  InstancePropertiesPatch=InstancePropertiesPatch,
  SnapshotSettings=SnapshotSettings,
  TargetVpnGateway=TargetVpnGateway,
  InstanceGroupManager=InstanceGroupManager,
  TargetHttpsProxyList=TargetHttpsProxyList,
  AliasIpRange=AliasIpRange,
  RegionNetworkEndpointGroupsDetachEndpointsRequest=RegionNetworkEndpointGroupsDetachEndpointsRequest,
  VpnTunnel=VpnTunnel,
  ResourcePolicyList=ResourcePolicyList,
  Duration=Duration,
  DiskTypeList=DiskTypeList,
  RegionDisksRemoveResourcePoliciesRequest=RegionDisksRemoveResourcePoliciesRequest,
  RouterBgp=RouterBgp,
  Status=Status
}
export schemas
