#lang marv
## AUTO-GENERATED FILE - DO NOT EDIT!

import types/gcp/_auto/sql-schema
API-ID="sql"
# /resources/operations
type operations = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Operation"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/operations/{name}"
   required=["(project operation)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export operations

# /resources/databases
type databases = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Database(cfg)
   response-type="sql.schemas.Operation"
   method="POST"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/databases"
   required=["(project instance)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Database"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/databases/{name}"
   required=["(project instance database)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.Database(cfg)
   response-type="sql.schemas.Operation"
   method="PATCH"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/databases/{name}"
   required=["(project instance database)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Operation"
   method="DELETE"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/databases/{name}"
   required=["(project instance database)"]
  }
 }
}
export databases

# /resources/tiers
type tiers = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export tiers

# /resources/instances
type instances = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.DatabaseInstance(cfg)
   response-type="sql.schemas.Operation"
   method="POST"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances"
   required=["(project)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.DatabaseInstance"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{name}"
   required=["(project instance)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.DatabaseInstance(cfg)
   response-type="sql.schemas.Operation"
   method="PATCH"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{name}"
   required=["(project instance)"]
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Operation"
   method="DELETE"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{name}"
   required=["(project instance)"]
  }
 }
}
export instances

# /resources/backupRuns
type backupRuns = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.BackupRun(cfg)
   response-type="sql.schemas.Operation"
   method="POST"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/backupRuns"
   required=["(project instance)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.BackupRun"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/backupRuns/{name}"
   required=["(id project instance)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Operation"
   method="DELETE"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/backupRuns/{name}"
   required=["(id project instance)"]
  }
 }
}
export backupRuns

# /resources/connect
type connect = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.ConnectSettings"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/connectSettings"
   required=["(project instance)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export connect

# /resources/sslCerts
type sslCerts = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.SslCertsInsertRequest(cfg)
   response-type="sql.schemas.SslCertsInsertResponse"
   method="POST"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/sslCerts"
   required=["(project instance)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.SslCert"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/sslCerts/{name}"
   required=["(project instance sha1Fingerprint)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Operation"
   method="DELETE"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/sslCerts/{name}"
   required=["(project instance sha1Fingerprint)"]
  }
 }
}
export sslCerts

# /resources/users
type users = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   api-id=API-ID
   request-body=schemas.User(cfg)
   response-type="sql.schemas.Operation"
   method="POST"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/users"
   required=["(project instance)"]
  }
 }
 read(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.User"
   method="GET"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/users/{name}"
   required=["(project instance name)"]
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   api-id=API-ID
   response-type="sql.schemas.Operation"
   method="DELETE"
   url="https://sqladmin.googleapis.com/v1/projects/{project}/instances/{instance}/users"
   required=["(project instance)"]
  }
 }
}
export users

# /resources/flags
type flags = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export flags

# /resources/projects/resources/instances
type instances = {
 # TODO41 - destructors
 origin(cfg)= cfg <- {
  driver="gcp"
 }
 create(cfg)={
  config=cfg
  api={
   
  }
 }
 read(cfg)={
  config=cfg
  api={
   
  }
 }
 update(cfg)={
  config=cfg
  api={
   
  }
 }
 delete(cfg)={
  config=cfg
  api={
   
  }
 }
}
export instances

