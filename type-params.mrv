#lang marv

import types/gcp/_auto/storage as _auto

test(c) = c

type lifecyle-base = {
    create(cfg) = cfg
    post-create(o, cfg) = cfg

    read(cfg) = cfg
    post-read(o, cfg) = cfg

    update(cfg) = cfg
    post-update(o, cfg) = cfg
    
    delete(cfg) = cfg
    identity(cfg) = cfg
}

type API<T> = {
    post-create(original, state) = state <- { project=original.project  region=original.region }
    post-read(o, cfg) = post-create(o, cfg)
    post-update(original, cfg)=post-create(original, cfg)
    delete(state) = T.delete(state) <- { config={name=state.name} }
    identity(cfg) = cfg
    * = T.*
}

type bucket = API<_auto:buckets> 

# E-types are type-enhancements which allow a base type T to be manipulated by
# one or more enhancement types

type E1<T,E1> = {
    identity(cfg) = E1.identity(cfg)

    create(ident) = T.create(ident)
    post-create(ident, cfg) = E1.post-create(ident, T.post-create(ident, cfg))

    read(ident) = T.read(ident)
    post-read(ident, cfg) = E1.post-read(ident, T.post-read(ident, cfg))

    update(ident) = T.update(ident)
    post-update(ident, cfg) = E1.post-update(ident, T.post-update(ident, cfg))

    delete(cfg) = T.delete(cfg)

    * = T.*
}

type E2<T,E1,E2> = {
    identity(cfg) = E2.identity(E1.identity(cfg))
    # tbc...

    create(ident) = T.create(ident)
    post-create(ident, cfg) = E1.post-create(ident, E2.post-create(ident, T.post-create(ident, cfg)))

    read(ident) = T.read(ident)
    post-read(ident, cfg) = E1.post-read(ident, E2.post-read(ident, T.post-read(ident, cfg)))

    update(ident) = T.update(ident)
    post-update(ident, cfg) = E1.post-update(ident, E2.post-update(ident, T.post-update(ident, cfg)))

    delete(cfg) = T.delete(E2.delete(E1.delete(cfg)))

    * = T.*
}

type label-project = {
    identity(cfg) = cfg <- { labels = cfg.labels <- { project = "123" }}
    * = lifecyle-base.*
}

type storage-policy = {
    identity(cfg) = cfg <- { storageClass = "NEARLINE" }
    * = lifecyle-base.*
}

type lbucket = E2<bucket, label-project, storage-policy>

module main {

    defaults = {
        project = env("MARV_GCP_PROJECT")
        region = env("MARV_GCP_REGION")
    }

    my-bucket = lbucket defaults <- {
        name = strf("~a-mybucket" defaults.project)
        labels = { "local"= "y" }
        storageClass = "STANDARD"
    }
    
}
