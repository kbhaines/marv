#lang marv

import types/gcp/base
import types/gcp/compute as compute

import types/marv/base
import types/marv/enhancers

type network = E1<compute:network, default-resource>
type subnet = E1<compute:subnetwork, default-resource>
type firewall = E1<compute:firewall, default-resource>

module main {

    name = "my-network"
    primary-cidr = "10.0.1.0/24"
    proxy-cidr="10.0.3.0/24"

    vpc = network {
        name = imm: name
        description = strf("VPC for ~a" name)
        autoCreateSubnetworks = false
        routingConfig = { routingMode = "REGIONAL" }
    } 

    primary-sn = subnet {
        name = strf("~a-primary" name)
        description = strf("Primary subnet for ~a" name)
        network = imm: vpc.selfLink
        ipCidrRange =  imm: primary-cidr
    }

    proxy-sn = subnet {
        name = strf("~a-proxy" name)
        description = strf("Proxy subnet for ~a" name)
        ipCidrRange = imm: proxy-cidr
        network = imm: vpc.selfLink
        purpose = "REGIONAL_MANAGED_PROXY"
        role = "ACTIVE"
    }

    google-source-range = [ "130.211.0.0/22" "35.191.0.0/16" ]
    
    fw-health-check = firewall {
        name = strf("~a-fw-allow-health-check" name)
        sourceRanges = google-source-range
        targetTags =  [ "load-balanced-backend" ]
        allowed = [ { IPProtocol = "tcp" } ]
        direction = "INGRESS"
    }

    fw-proxies = firewall {
        name = strf("~a-fw-allow-proxies" name)
        sourceRanges = [ proxy-sn.ipCidrRange ]
        targetTags =  [ "load-balanced-backend" ]
        allowed = [ { IPProtocol = "tcp" ports = [ "80" ] }
                    { IPProtocol = "tcp" ports = [ "443" ] }
                    { IPProtocol = "tcp" ports = [ "8080" ] } ]
        direction = "INGRESS"
    }


}