#lang marv

# Modules can accept parameters, each of which has an optional default value
# Parameters can be separated by commas if you want, but they are currently
# optional.

import types/gcp/compute as compute

module network-base(defaults name 
        primary-cidr="10.0.1.0/24" 
        proxy-cidr="10.0.2.0/24") {

    # resources are declared using the syntax:
    #    <res-id> = <driver-id>:<type> CONFIG-EXPRESSION

    # <res-id> is immutable - you can't change a resource's ident without destroying
    # and recreating it.

    # <driver-id> - two drivers are supported for now: gcp and dev, and they are
    # currently hard-coded into marv. 

    # <type> - driver-specific resource type 

    # A CONFIG-EXPRESSION can be a CONFIG-OBJECT or it can be a
    # merge of CONFIG-OBJECTS. There are two merge operations:
    #
    #   a -> b   # a is merged over b, with a's attributes taking priority
    #   a <- b   # b is merged over a, with b's attributes taking priority
    #
    # (the object with priority is on the 'greater-than' side of the <- or ->)
    #
    # a and b can be literal objects, variables or expressions that create objects.

    # So here we will create a VPC network, using the 'defaults' as a basis but
    # merging them with the CONFIG-OBJECT (between { and })
    
    vpc = compute:network defaults <- {

        # imm: declares that this attribute is immutable; if it changes, then the
        # resource will need to be recreated.  (this is a work-around because
        # marv's GCP driver doesn't know which attributes are immutable in GCP)
        
        name = imm: name

        # strf is a string-template function, '~a' is replaced by 'name'
        description = strf("VPC for ~a" name)
        autoCreateSubnetworks = false

        routingConfig = { routingMode = "REGIONAL" }
    } 

    ################################################################################
    # the result of a CONFIG-EXPRESSION is another CONFIG-OBJECT which can also be
    # assigned to a variable and re-used.

#    vpc-defaults = defaults <- {
#
#        # this is a reference to the vpc resource's 'selfLink' value - any resource
#        # that uses this CONFIG-OBJECT will get its 'network' attribute from the
#        # 'vpc' resource. Because it's immutable if the VPC is recreated then the
#        # resource will be too.
#        
#        network = imm: vpc.selfLink
#    }
#
#    primary-sn = compute:subnetwork vpc-defaults <- {
#        name = strf("~a-primary" name)
#        description = strf("Primary subnet for ~a" name)
#        ipCidrRange =  imm: primary-cidr
#    }
#
#    proxy-sn = compute:subnetwork vpc-defaults <- {
#        name = strf("~a-proxy" name)
#        description = strf("Proxy subnet for ~a" name)
#        ipCidrRange = imm: proxy-cidr
#        purpose = "REGIONAL_MANAGED_PROXY"
#        role = "ACTIVE"
#    }
#
#    # lists are space separated
#    google-source-range = [ "130.211.0.0/22" "35.191.0.0/16" ]
#    
#    fw-health-check = compute:firewall vpc-defaults <- {
#        name = strf("~a-fw-allow-health-check" name)
#        sourceRanges = google-source-range
#        targetTags =  [ "load-balanced-backend" ]
#        allowed = [ { IPProtocol = "tcp" } ]
#        direction = "INGRESS"
#    }
#
#    fw-proxies = compute:firewall vpc-defaults <- {
#        name = strf("~a-fw-allow-proxies" name)
#        sourceRanges = [ proxy-sn.ipCidrRange ]
#        targetTags =  [ "load-balanced-backend" ]
#        allowed = [ { IPProtocol = "tcp" ports = [ "80" ] }
#                    { IPProtocol = "tcp" ports = [ "443" ] }
#                    { IPProtocol = "tcp" ports = [ "8080" ] } ]
#        direction = "INGRESS"
#    }
#
#    # a module can provide return values to its caller
#    
#    return {
#        vpc = vpc.selfLink
#        primary-subnet = primary-sn.selfLink
#        proxy-subnet = proxy-sn.selfLink
#    }
}