#lang marv

module network-base(defaults name 
        primary-cidr="10.0.1.0/24" 
        proxy-cidr="10.0.2.0/24") {

    vpc = gcp:compute.network defaults <- {

        # imm: declares that this attribute is immutable; if it changes, then the
        # resource will need to be recreated.  (this is a work-around because
        # marv's GCP driver doesn't know which attributes are immutable in GCP)
        
        name = imm: name
        description = strf("VPC for ~a" name)
        autoCreateSubnetworks = false

        routingConfig = { routingMode = "REGIONAL" }
    } 

    vpc-defaults = defaults <- {

        # this is a reference to the vpc resource's 'selfLink' value - any resource
        # that uses this CONFIG-OBJECT will get its 'network' attribute from the
        # 'vpc' resource. Because it's immutable if the VPC is recreated then the
        # resource will be too.
        
        network = imm: vpc.selfLink
    }

    primary-sn = gcp:compute.subnetwork vpc-defaults <- {
        name = strf("~a-primary" name)
        description = strf("Primary subnet for ~a" name)
        ipCidrRange =  imm: primary-cidr
    }

    proxy-sn = gcp:compute.subnetwork vpc-defaults <- {
        name = strf("~a-proxy" name)
        description = strf("Proxy subnet for ~a" name)
        ipCidrRange = imm: proxy-cidr
        purpose = "REGIONAL_MANAGED_PROXY"
        role = "ACTIVE"
    }

    google-source-range = [ "130.211.0.0/22" "35.191.0.0/16" ]
    
    fw-health-check = gcp:compute.firewall vpc-defaults <- {
        name = strf("~a-fw-allow-health-check" name)
        sourceRanges = google-source-range
        targetTags =  [ "load-balanced-backend" ]
        allowed = [ { IPProtocol = "tcp" } ]
        direction = "INGRESS"
    }

    fw-proxies = gcp:compute.firewall vpc-defaults <- {
        name = strf("~a-fw-allow-proxies" name)
        sourceRanges = [ proxy-sn.ipCidrRange ]
        targetTags =  [ "load-balanced-backend" ]
        allowed = [ { IPProtocol = "tcp" ports = [ "80" ] }
                    { IPProtocol = "tcp" ports = [ "443" ] }
                    { IPProtocol = "tcp" ports = [ "8080" ] } ]
        direction = "INGRESS"
    }

    return {
        vpc = vpc.selfLink
        primary-subnet = primary-sn.selfLink
        proxy-subnet = proxy-sn.selfLink
    }
}