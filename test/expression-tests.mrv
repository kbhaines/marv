#lang marv

module simple() {

    func1(p) = { result=p }

    x = { 
        a = "string-a", 
        b ={ c = "c" }, 
        f=func1,
        y = true,
        z = false
    }

    assert(x.y == true)
    assert(x.z == false)
    assert(x.a == "string-a")
    assert(x.b.c == "c" )
    assert(func1("help").result == "help")
    assert(x.f == func1)
    assert(x.f("help2").result == "help2")
    assert(x.f("help2") == func1("help2"))
}

module ints() {
    pprint("** INTEGERS **")
    sum = (1 + 2 + 3) * 4 - 1
    assert(23 == sum)

    # idents ! 
    #pprint(sum-23)

    assert(27 == ((1 + 2 * 3) * 4 - 1))
    assert(18 == ((1 + 2 + 3) * (4 -1)))

    add1(x) = x + 1
    assert (100 == add1(99))
    assert(18 == ((1 + add1(1) + 3) * (4 -1)))
}

module lists() {
    pprint("** LISTS & INTEGERS **")
    list = [1,2,3,4]
    assert(1 == list[0])
    assert(18 == ((1 + list[1] + list[2]) * (4 -1)))
    assert(18 == ((1 + [1,2,3,4][1] + list[2]) * (4 -1)))

    pprint("** NESTED LISTS **")
    nestedList = [[1,2,3], [4,5,6], list]

    assert (nestedList[0][2]*2 == nestedList[1][2])
    assert (4 == nestedList[2][3])
}

module maps() {
    pprint("** MAPS **")
    map = { one=1, two=2, submap= { three=3 } }
    list = [1,2,3,4]
    assert(2 == map.two)
    assert(3 == map.submap.three)
    assert(18 == ((1 + map.two + list[2]) * (4 -1)))
    assert(18 == ((1 + { one=1,two=2}.two + list[2]) * (4 -1)))

    pprint("** MAP EXPRESSIONS **")
    map2 = { a= { one=123, two=456} }
    assert( { one=1, two=2, submap={three=3}, a={one=123, two=456}} == map <- map2)
    assert({one=123, two=456, submap={three=3}} == map <- { one=123, two=456})
    assert({one=123, two=456, submap={three=3}} == map <- map2.a)
    assert({one=123, two=456} == (map <- map2).a)
    assert({one=123,two=789} == map2.a <- { two = 789})
}

module funcs() {
    pprint("** FUNCS **")
    func1(a,b) = a - b
    mapFunc1(a,b) = {
         b = [ a, b, a + b], 
         f = func1,
    }
    
    assert( [1,2,3] == mapFunc1(1,2).b)
    assert(3 == mapFunc1(1,2).b[2])
    assert(4 == mapFunc1(1,2).f(5, 1))

    mpf = mapFunc1(1,2).f
    nested(a) = func1(20, mpf(a,2))
    assert(12 == nested(10))

    lam = lambda(x,y,z) = x + y + z
    assert(6 == lam(1,2,3))

    closure(a) = lambda(b) = [a + b, a - b]
    assert([15,5] == closure(10)(5))
    assert(15 == closure(10)(5)[0])

    lcs = [closure(5), closure(10)]
    assert([7,3] == lcs[0](2))

#   pprint(bucket1.size + 2 <- should prohibit because it's non-assignment?)
#   pprint([bucket1.link, bucket1.name])
#   mapRes1 = { bucket = xyz({name = bucket1.name}) }
#   mapRes2 = { bucket = xyz({name ="happyrat3"}) }
#   link1 = bucket1.link
}

module main() {
    s = simple()
    i = ints()
    l = lists()
    m = maps()
    f = funcs()
}