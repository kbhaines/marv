#lang marv

func1(p) = { result=p }

x = { 
    a = "string-a", 
    b ={ c = "c" }, 
    f=func1,
    y = true,
    z = false
}

type t1 = {
    identity(i) = i <- { extra="extra" }
    create(c) = { config = c }
    delete(c) = { api = { selfLink="abc" }}
}

type t2 = {
    identity(i) = t1.identity(i)
    create(c) = t1.create(c)
}

type t3 = {
    create(c) = { t2config = c }
    copy(c) = create(c)
    * = t1.*
}

delete-self(state, oapi) = {
  api= oapi.api <- { returnedUrl=state.selfLink }
  config = {}
}

type template1<P1> = {
    identity(i) = P1.identity(i) <- { template="template"}
    delete(s) = delete-self(s, P1.delete(s))
    * = P1.*
}

type t4=template1<t1>

module main() {
    assert(t1.identity(x).extra == "extra")
    assert(t2.identity(x).extra == "extra")
    assert(t3.create(x).t2config == x)
    assert(t3.identity(x) == t1.identity(x))

    assert(t3.copy(x) == t3.create(x))

    assert(t4.identity(x) != t1.identity(x))
    assert(t4.identity(x).template == "template")
    assert(t4.create(x) == t1.create(x))
    
    pprint(t4.delete({selfLink="abcd"}))
    pprint("** DONE **")
}