#lang marv

module main() {

    pprint("** INTEGERS - expect all zero **")
    sum = (1 + 2 + 3) * 4 - 1
    pprint(23 - sum)

    # idents ! 
    #pprint(sum-23)

    pprint(27 - ((1 + 2 * 3) * 4 - 1))
    pprint(18 - ((1 + 2 + 3) * (4 -1)))

    add1(x) = x + 1
    pprint (100 - add1(99))
    pprint(18 - ((1 + add1(1) + 3) * (4 -1)))

    pprint("** LISTS & INTEGERS - expect all zero **")
    list = [1,2,3,4]
    pprint(1 - list[0])
    pprint(18 - ((1 + list[1] + list[2]) * (4 -1)))
    pprint(18 - ((1 + [1,2,3,4][1] + list[2]) * (4 -1)))

    pprint("** NESTED LISTS **")
    nestedList = [[1,2,3], [4,5,6], list]

    pprint (nestedList[0][2]*2 - nestedList[1][2])
    pprint (4 - nestedList[2][3])

    pprint("** MAPS - expect zero's **")
    map = { one=1, two=2, submap= { three=3 } }
    pprint(2 - map.two)
    pprint(3 - map.submap.three)
    pprint(18 - ((1 + map.two + list[2]) * (4 -1)))
    pprint(18 - ((1 + { one=1,two=2}.two + list[2]) * (4 -1)))

    pprint("** MAP EXPRESSIONS **")
    pprint(map)
    map2 = { a={ one = 123, two=456} }
    pprint (map <- map2)
    pprint((map <- map2).a)
    pprint(map <- map2.a)
    pprint(map2.a <- { b = 123})

#   pprint("** FUNCS **")
#   func1(a,b) = a - b
#   mapFunc1(a,b) = { b = [ a, b, a + b], f = func1}
#   
#   pprint(mapFunc1(1,2).b)
#   pprint(3 - mapFunc1(1,2).b[2])
#   pprint(4 - mapFunc1(1,2).f(5, 1))

#   mpf = mapFunc1(1,2).f
#   nested(a) = func1(20, mpf(a,2))
#   pprint(12 - nested(10))

#   pprint("** DONE **")
#   pprint(bucket1.size + 2 <- should prohibit because it's non-assignment?)
#   pprint([bucket1.link, bucket1.name])
#   mapRes1 = { bucket = xyz({name = bucket1.name}) }
#   mapRes2 = { bucket = xyz({name ="happyrat3"}) }
#   link1 = bucket1.link


}
